[
	{
		"id": "berkeley-Spring-CS",
		"title": "CS 9A: MATLAB for Programmers",
		"source": "Berkeley",
		"year": "Spring 2019",
		"url": "https://selfpaced.bitbucket.io/#/matlab/calendar",
		"desc": "Introduction to the constructs in the Matlab programming language, aimed at students who already know how to program. Array and matrix operations, functions and function handles, control flow, plotting and image manipulation, cell arrays and structures, and the Symbolic Mathematics toolbox.",
		"tags": ["CS9A"],
		"contains": {
			"videos": false,
			"written": true,
			"assignments": true
		}
	},
	{
		"id": "berkeley-Spring-CS",
		"title": "CS 9C: C for Programmers",
		"source": "Berkeley",
		"year": "Spring 2019",
		"url": "https://selfpaced.bitbucket.io/#/c/calendar",
		"desc": "Self-paced course in the C programming language for students who already know how to program. Computation, input and output, flow of control, functions, arrays, and pointers, linked structures, use of dynamic storage, and implementation of abstract data types.",
		"tags": ["CS9C"],
		"contains": {
			"videos": false,
			"written": true,
			"assignments": true
		}
	},
	{
		"id": "berkeley-Spring-CS",
		"title": "CS 9E: Productive Use of the UNIX Environment",
		"source": "Berkeley",
		"year": "Spring 2019",
		"url": "https://selfpaced.bitbucket.io/#/unix/calendar",
		"desc": "Use of UNIX utilities and scripting facilities for customizing the programming environment, organizing files (possibly in more than one computer account), implementing a personal database, reformatting text, and searching for online resources.",
		"tags": ["CS9E"],
		"contains": {
			"videos": false,
			"written": true,
			"assignments": true
		}
	},
	{
		"id": "berkeley-Spring-CS",
		"title": "CS 9F: C++ for Programmers",
		"source": "Berkeley",
		"year": "Spring 2019",
		"url": "https://selfpaced.bitbucket.io/#/cpp/calendar",
		"desc": "Self-paced introduction to the constructs provided in the C++ programming language for procedural and object-oriented programming, aimed at students who already know how to program.",
		"tags": ["CS9F"],
		"contains": {
			"videos": false,
			"written": true,
			"assignments": true
		}
	},
	{
		"id": "berkeley-Spring-CS",
		"title": "CS 9G: JAVA for Programmers",
		"source": "Berkeley",
		"year": "Spring 2019",
		"url": "https://selfpaced.bitbucket.io/#/java/calendar",
		"desc": "Self-paced course in Java for students who already know how to program. Applets; variables and computation; events and flow of control; classes and objects; inheritance; GUI elements; applications; arrays, strings, files, and linked structures; exceptions; threads.",
		"tags": ["CS9G"],
		"contains": {
			"videos": false,
			"written": true,
			"assignments": true
		}
	},
	{
		"id": "berkeley-Spring-CS",
		"title": "CS 9H: Python for Programmers",
		"source": "Berkeley",
		"year": "Spring 2019",
		"url": "https://selfpaced.bitbucket.io/#/python/calendar",
		"desc": "Introduction to the constructs provided in the Python programming language, aimed at students who already know how to program. Flow of control; strings, tuples, lists, and dictionaries; CGI programming; file input and output; object-oriented programming; GUI elements.",
		"tags": ["CS9H"],
		"contains": {
			"videos": false,
			"written": true,
			"assignments": true
		}
	},
	{
		"id": "berkeley-Spring-CS",
		"title": "CS 10: The Beauty and Joy of Computing",
		"source": "Berkeley",
		"year": "Spring 2021",
		"url": "https://cs10.org/sp21/",
		"desc": "An introductory course for students with minimal prior exposure to computer science. Prepares students for future computer science courses and empowers them to utilize programming to solve problems in their field of study. Presents an overview of the history, great principles, and transformative applications of computer science, as well as a comprehensive introduction to programming. T",
		"tags": ["CS10"],
		"contains": {
			"videos": false,
			"written": true,
			"assignments": true
		}
	},
	{
		"id": "berkeley-Summer-CS",
		"title": "CS 61A: Structure and Interpretation of Computer Programs",
		"source": "Berkeley",
		"year": "Summer 2021",
		"url": "https://cs61a.org/",
		"desc": "CS 61A concentrates on the idea of abstraction, allowing the programmer to think in terms appropriate to the problem rather than in low-level operations dictated by the computer hardware.",
		"tags": ["CS61"],
		"contains": {
			"videos": true,
			"written": true,
			"assignments": true
		}
	},
	{
		"id": "berkeley-Spring-CS",
		"title": "CS 61B: Data Structures",
		"source": "Berkeley",
		"year": "Spring 2021",
		"url": "https://sp21.datastructur.es/",
		"desc": "The CS 61 series is an introduction to Computer Science, with particular emphasis on software and machines from a programmerâ€™s point of view. CS 61A covered high-level approaches to problem-solving, providing you with a variety of ways to organize solutions to programming problems as compositions of functions, collections of objects, or sets of rules. In CS 61B, we move to a somewhat more detailed (and to some extent, more basic) level of programming.",
		"tags": ["CS61"],
		"contains": {
			"videos": true,
			"written": true,
			"assignments": true
		}
	},
	{
		"id": "berkeley-Spring-CS",
		"title": "CS 61C: Great Ideas in Computer Architecture (Machine Structures)",
		"source": "Berkeley",
		"year": "Summer 2021",
		"url": "https://cs61c.org/su21/",
		"desc": "The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.",
		"tags": ["CS61"],
		"contains": {
			"videos": false,
			"written": true,
			"assignments": true
		}
	},
	{
		"id": "berkeley-Spring-CS",
		"title": "CS 70: Discrete Math and Probability",
		"source": "Berkeley",
		"year": "Spring 2021",
		"url": "http://www.eecs70.org/",
		"desc": "Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.",
		"tags": ["CS70"],
		"contains": {
			"videos": false,
			"written": true,
			"assignments": true
		}
	}
]