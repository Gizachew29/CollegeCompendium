id,title,source,year,url,desc,tags,contains/videos,contains/written,contains/assignments
berkeley-Spring-CS,CS 9A: MATLAB for Programmers,Berkeley,Spring 2019,https://selfpaced.bitbucket.io/#/matlab/calendar,"Introduction to the constructs in the Matlab programming language, aimed at students who already know how to program. Array and matrix operations, functions and function handles, control flow, plotting and image manipulation, cell arrays and structures, and the Symbolic Mathematics toolbox.",CS9A,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 9C: C for Programmers,Berkeley,Spring 2019,https://selfpaced.bitbucket.io/#/c/calendar,"Self-paced course in the C programming language for students who already know how to program. Computation, input and output, flow of control, functions, arrays, and pointers, linked structures, use of dynamic storage, and implementation of abstract data types.",CS9C,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 9E: Productive Use of the UNIX Environment,Berkeley,Spring 2019,https://selfpaced.bitbucket.io/#/unix/calendar,"Use of UNIX utilities and scripting facilities for customizing the programming environment, organizing files (possibly in more than one computer account), implementing a personal database, reformatting text, and searching for online resources.",CS9E,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 9F: C++ for Programmers,Berkeley,Spring 2019,https://selfpaced.bitbucket.io/#/cpp/calendar,"Self-paced introduction to the constructs provided in the C++ programming language for procedural and object-oriented programming, aimed at students who already know how to program.",CS9F,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 9G: JAVA for Programmers,Berkeley,Spring 2019,https://selfpaced.bitbucket.io/#/java/calendar,"Self-paced course in Java for students who already know how to program. Applets; variables and computation; events and flow of control; classes and objects; inheritance; GUI elements; applications; arrays, strings, files, and linked structures; exceptions; threads.",CS9G,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 9H: Python for Programmers,Berkeley,Spring 2019,https://selfpaced.bitbucket.io/#/python/calendar,"Introduction to the constructs provided in the Python programming language, aimed at students who already know how to program. Flow of control; strings, tuples, lists, and dictionaries; CGI programming; file input and output; object-oriented programming; GUI elements.",CS9H,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 10: The Beauty and Joy of Computing,Berkeley,Spring 2021,https://cs10.org/sp21/,"An introductory course for students with minimal prior exposure to computer science. Prepares students for future computer science courses and empowers them to utilize programming to solve problems in their field of study. Presents an overview of the history, great principles, and transformative applications of computer science, as well as a comprehensive introduction to programming. T",CS10,FALSE,TRUE,TRUE
berkeley-Summer-CS,CS 61A: Structure and Interpretation of Computer Programs,Berkeley,Summer 2021,https://cs61a.org/,"CS 61A concentrates on the idea of abstraction, allowing the programmer to think in terms appropriate to the problem rather than in low-level operations dictated by the computer hardware.",CS61,TRUE,TRUE,TRUE
berkeley-Spring-CS,CS 61B: Data Structures,Berkeley,Spring 2021,https://sp21.datastructur.es/,"The CS 61 series is an introduction to Computer Science, with particular emphasis on software and machines from a programmer’s point of view. CS 61A covered high-level approaches to problem-solving, providing you with a variety of ways to organize solutions to programming problems as compositions of functions, collections of objects, or sets of rules. In CS 61B, we move to a somewhat more detailed (and to some extent, more basic) level of programming.",CS61,TRUE,TRUE,TRUE
berkeley-Spring-CS,CS 61C: Great Ideas in Computer Architecture (Machine Structures),Berkeley,Summer 2021,https://cs61c.org/su21/,"The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.",CS61,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 70: Discrete Math and Probability,Berkeley,Spring 2021,http://www.eecs70.org/,"Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.",CS70,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 88: Computational Structures in Data Science,Berkeley,Spring 2021,https://cs88-website.github.io/sp21/,"Development of Computer Science topics appearing in Foundations of Data Science (C8); expands computational concepts and techniques of abstraction. Understanding the structures that underlie the programs, algorithms, and languages used in data science and elsewhere. Mastery of a particular programming language while studying general techniques for managing program complexity, e.g., functional, object-oriented, and declarative programming. Provides practical experience with composing larger systems through several significant programming projects.",CS88,TRUE,TRUE,TRUE
berkeley-Spring-CS,CS 152. Computer Architecture and Engineering,Berkeley,Spring 2021,https://inst.eecs.berkeley.edu/~cs152/sp21/,"Instruction set architecture, microcoding, pipelining (simple and complex). Memory hierarchies and virtual memory. Processor parallelism: VLIW, vectors, multithreading. Multiprocessors.",CS15,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 161: Computer Security,Berkeley,Spring 2021,https://sp21.cs161.org/,"Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.",CS16,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 162: Operating Systems and Systems Programming,Berkeley,Spring 2021,https://inst.eecs.berkeley.edu/~cs162/sp21/,"Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.",CS16,FALSE,TRUE,TRUE
berkeley-Fall-CS,CS 164: Programming Languages and Compilers,Berkeley,Fall 2020,https://inst.eecs.berkeley.edu/~cs164/fa20/,"Survey of programming languages. The design of modern programming languages. Principles and techniques of scanning, parsing, semantic analysis, and code generation. Implementation of compilers, interpreters, and assemblers. Overview of run-time organization and error handling.",CS16,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 168: Introduction to the Internet: Architecture and Protocols,Berkeley,Spring 2020,http://cs168.io/,"This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet's scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).",CS16,TRUE,TRUE,FALSE
berkeley-Spring-CS,CS 170: Efficient Algorithms and Intractable Problems,Berkeley,Spring 2021,https://cs170.org/,"Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.",CS17,TRUE,TRUE,TRUE
berkeley-Fall-CS,CS 172: Computability and Complexity,Berkeley,Fall 2006,https://people.eecs.berkeley.edu/~sseshia/172/f06/,"Specific topics include: Finite automata, Pushdown automata, Turing machines and RAMs. Undecidable, exponential, and polynomial-time problems. Polynomial-time equivalence of all reasonable models of computation. Nondeterministic Turing machines. Theory of NP-completeness: Cook's theorem, NP-completeness of basic problems. Selected topics in language theory, complexity and randomness.",CS17,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 174: Combinatorics and Discrete Probability,Berkeley,Spring 2008,https://inst.eecs.berkeley.edu/~cs174/sp08/,"Permutations, combinations, principle of inclusion and exclusion, generating functions, Ramsey theory. Expectation and variance, Chebychev's inequality, Chernov bounds. Birthday paradox, coupon collector's problem, Markov chains and entropy computations, universal hashing, random number generation, random graphs and probabilistic existence bounds.",CS17,FALSE,FALSE,TRUE
berkeley-Spring-CS,CS 182: Neural Basis of Thought and Language,Berkeley,Spring 2008,https://inst.eecs.berkeley.edu/~cs182/sp08/,"Much of the course will focus on The Neural Theory of Language (NTL), which seeks to answer these questions in terms of architecture and mechanism, using models and simulations of language and learning phenomena. The focus is less on where such functions are located in the brain than on how neural systems can carry out the computations necessary to characterize specific concepts, such as spatial relations concepts, aspectual concepts (used in structuring events), abstract metaphorical concepts, and so on.",CS18,FALSE,FALSE,TRUE
berkeley-Spring-CS,CS 184: Computer Graphics and Imaging,Berkeley,Spring 2021,https://cs184.eecs.berkeley.edu/sp21,"Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms for clipping, hidden surface removal, rasterization, and anti-aliasing. Scan-line based and ray-based rendering algorithms. Lighting models for reflection, refraction, transparency.",CS18,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 186: Introduction to Database Systems,Berkeley,Spring 2021,https://cs186berkeley.net/,"Access methods and file systems to facilitate data access. Hierarchical, network, relational, and object-oriented data models. Query languages for models. Embedding query languages in programming languages. Database services including protection, integrity control, and alternative views of data. High-level interfaces including application generators, browsers, and report writers. Introduction to transaction processing. Database system implementation to be done as term project.",CS18,TRUE,TRUE,TRUE
berkeley-Spring-CS,CS 188: Introduction to Artificial Intelligence,Berkeley,Spring 2021,https://inst.eecs.berkeley.edu/~cs188/sp21/,"Ideas and techniques underlying the design of intelligent computer systems. Topics include search, game playing, knowledge representation, inference, planning, reasoning under uncertainty, machine learning, robotics, perception, and language understanding.",CS18,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 189/289A: Introduction to Machine Learning,Berkeley,Spring 2021,https://people.eecs.berkeley.edu/~jrs/189/,"Theoretical foundations, algorithms, methodologies, and applications for machine learning. Topics may include supervised methods for regression and classication (linear models, trees, neural networks, ensemble methods, instance-based methods); generative and discriminative probabilistic models; Bayesian parametric learning; density estimation and clustering; Bayesian networks; time series models; dimensionality reduction; programming projects covering a variety of real-world applications.",CS18,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 194-16 Introduction to Data Science,Berkeley,Spring 2014,http://amplab.github.io/datascience-sp14/,"Organizations use their data for decision support and to build data-intensive products and services. The collection of skills required by organizations to support these functions has been grouped under the term Data Science. This course will attempt to articulate the expected output of Data Scientists and then equip the students with the ability to deliver against these expectations. The assignments will involve web programming, statistics, and the ability to manipulate data sets with code.",CS19,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 194-23: The Art and Science of Digital Photography,Berkeley,Spring 2013,https://inst.eecs.berkeley.edu/~cs194-23/sp13/,"This course will explore the artistic aspects, scientific foundations, and techniques of digital photography with the goals of enabling students to expand their knowledge of photography as an art form, to develop a deeper and broader understanding of the scientific basis of photography, and to improve their photographic technique.",CS19,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 194-24: Advanced Operating Systems Structures and Implementation,Berkeley,Spring 2013,https://inst.eecs.berkeley.edu/~cs194-24/sp13/,"The purpose of this course is to teach the design of Operating Systems through both academic study and by making modifications to a modern OS (Linux). Topics we will cover include concepts of operating systems and systems programming; utility programs, subsystems, multiple-program systems; processes, interprocess communication, and synchronization; memory allocation, segmentation, paging; loading and linking, libraries; resource allocation, scheduling, performance evaluation; I/O systems, storage devices, file systems; basic networking, protocols, and distributed file systems, protection, security, and privacy.",CS19,FALSE,TRUE,FALSE
berkeley-Spring-CS,"CS 194-26/294-26: Image Manipulation, Computer Vision and Computational Photography",Berkeley,Spring 2020,https://inst.eecs.berkeley.edu/~cs194-26/sp20/,"The aim of this advanced undergraduate course is to introduce students to computing with visual data (images and video). We will cover acquisition, representation, and manipulation of visual information from digital photographs (image processing), image analysis and visual understanding (computer vision), and image synthesis (computational photography). Key algorithms will be presented, ranging from classical (e.g. Gaussian and Laplacian Pyramids) to contemporary (e.g. ConvNets, GANs), with an emphasis on using these techniques to build practical systems. This hands-on emphasis will be reflected in the programming assignments, in which students will have the opportunity to acquire their own images and develop, largely from scratch, the image analysis and synthesis tools for solving applications.",CS19,FALSE,TRUE,TRUE
berkeley-Fall-CS,CS 194/294-126: Software Defined Printed Circuit Boards,Berkeley,Fall 2016,https://inst.eecs.berkeley.edu/~cs194-126/fa16/,"This class introduces the design and fabrication of PCBs and explores software compilation of high level descriptions of embedded systems into circuit boards and software ready to be milled on desktop mills. This software defined hardware technique dramatically raises the level of description making easy things easy and hard things much more possible, and most importantly makes board-level embedded systems design more accessible those with a more computer science background. Topics include: circuit basics, microcontrollers, embedded programming, milling, assembly and soldering of PCBs. The class is half lecture/labs and half instructor advised student projects.",CS19,FALSE,TRUE,TRUE
berkeley-Fall-CS,CS 194-6: Digital Systems Project Laboratory,Berkeley,Fall 2008,https://inst.eecs.berkeley.edu/~cs194-6/fa08/,"Projects will create versatile medium-scale hardware IP with associated testbenches, for applications compatible with RAMP Gold. Application areas include CPU and GPU design, networks on chip, audio and video processing -- other ideas are welcome.",CS19,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 195: Social Implications of Computong,Berkeley,Spring 2021,https://inst.eecs.berkeley.edu/~cs195/sp21/,Topics include electronic community; the changing nature of work; technological risks; the information economy; intellectual property; privacy; artificial intelligence and the sense of self; pornography and censorship; professional ethics. Students will lead discussions on additional topics.,CS19,FALSE,TRUE,TRUE
berkeley-Fall-CS,CS 250: VLSI Systems Design,Berkeley,Fall 2020,https://inst.eecs.berkeley.edu/~cs250,"Unified top-down and bottom-up design of integrated circuits and systems concentrating on architectural and topological issues. VLSI architectures, systolic arrays, self-timed systems. Trends in VLSI development. Physical limits. Tradeoffs in custom-design, standard cells, gate arrays. VLSI design tools.",CS25,FALSE,TRUE,FALSE
berkeley-Fall-CS,CS 261: Security in Computer Systems,Berkeley,Fall 2018,https://inst.eecs.berkeley.edu/~cs261/fa18/,"Graduate survey of modern topics in computer systems security, including secure messaging, blockchain and cryptocurrencies, hardware security, secure federated computation, language-based security, anonymous communication, privacy and others.",CS26,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 261N: Internet/Network Security,Berkeley,Spring 2020,https://www.icir.org/vern/cs261n/,"This class aims to provide a thorough grounding in network security suitable for those interested in conducting research in the area, as well as students more generally interested in either security or networking. We will also look at broader issues relating to Internet security for which networking plays a role. The syllabus has overlap with portions of the SEC prelim.",CS26,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 274: Computational Geometry,Berkeley,Spring 2019,https://people.eecs.berkeley.edu/~jrs/274/,"Constructive problems in computational geometry: convex hulls, triangulations, Voronoi diagrams, arrangements of hyperplanes; relationships among these problems. Search problems: advanced data structures; subdivision search; various kinds of range searches. Models of computation; lower bounds.",CS27,FALSE,FALSE,TRUE
berkeley-Fall-MIT,MIT 6.875/CS 276: Graduate Cryptography,Berkeley,Fall 2020,https://inst.eecs.berkeley.edu/~cs276/fa20/,"The last few years have witnessed dramatic developments in the foundations of cryptography as well as its applications to real-world privacy and security problems. On the one hand, security and privacy are of paramount importance in the age of big data and mass surveillance. On the other hand, cryptography is abuzz with solutions to long-standing open problems such as fully homomorphic encryption and software obfuscation that use the abundance of data for public good without compromising security. The course will explore both the rich theory of cryptography as well as its real-world applications.",MIT6,FALSE,TRUE,FALSE
berkeley-Fall-CS,CS 285: Solid Modeling,Berkeley,Fall 2011,https://people.eecs.berkeley.edu/~sequin/CS285/,"In Fall 2011, CS285 will emphasize procedural modeling, as is appropriate for objects of high complexity. We will consider the whole design process for such objects, from a conceptual vision to a concrete computer-based description that is suitable for use in virtual worlds or for physical prototyping and manufacturing. The course will cover various modeling techniques, including volume representations, boundary representations, instantiation and Boolean combinations of shapes, as well as procedural generation, ranging from simple sweeps to L-systems. We will also discuss effective data structures for representing various types of objects, as well as the process of making models from acquired data, e.g., via 3D scanners. In the end, we will use our Fused Deposition Modeling machine to actually fabricate some objects designed in this class.",CS28,FALSE,FALSE,TRUE
berkeley-Fall-CS,CS 287: Advanced Robotics,Berkeley,Fall 2009,https://people.eecs.berkeley.edu/~pabbeel/cs287-fa09/,"Control: underactuation, controllability, Lyapunov, dynamic programming, LQR, feedback linearization, MPC. Estimation: Bayes filters, KF, EKF, UKF, particle filter, occupancy grid mapping, EKF slam, GraphSLAM, SEIF, FastSLAM. Manipulation and grasping: force closure, grasp point selection, visual servo-ing, more sub-topics tbd. Reinforcement learning: value iteration, policy iteration, linear programming, Q learning, TD, value function approximation, Sarsa, LSTD, LSPI, policy gradient, inverse reinforcement learning, reward shaping, hierarchical reinforcement learning, inference based methods, exploration vs. exploitation",CS28,FALSE,TRUE,TRUE
berkeley-Spring-CS,CS 288: An Artificial Intelligence Approach to Natural Language Processing,Berkeley,Spring 2020,https://cal-cs288.github.io/sp20/,"This course will explore current statistical techniques for the automatic analysis of natural (human) language data. The dominant modeling paradigm is corpus-driven statistical learning. This term, we are introducing a few new projects to give increased hands-on experience with a greater variety of NLP tasks and commonly used techniques.",CS28,FALSE,TRUE,FALSE
berkeley-Fall-EECS,EECS 16A: Designing Information Devices and Systems I,Berkeley,Fall 2020,https://inst.eecs.berkeley.edu/~eecs16a/fa20/index.html#schedule,"The EECS 16AB series (Designing Information Devices and Systems) is a pair of introductory-level courses introducing students to EECS. The courses have a particular emphasis on how to build and understand systems interacting with the world from an informational point of view. Mathematical modeling is an important theme throughout these courses, and students will learn many conceptual tools along the way. These concepts are rooted in specific application domains. Students should understand why they are learning something.",EECS16,FALSE,TRUE,TRUE
berkeley-Spring-EECS,EECS 16B: Designing Information Devices and Systems II,Berkeley,Spring 2021,https://eecs16b.org/,"The EECS 16AB series (Designing Information Devices and Systems) is a pair of introductory-level courses introducing students to EECS. The courses have a particular emphasis on how to build and understand systems interacting with the world from an informational point of view. Mathematical modeling is an important theme throughout these courses, and students will learn many conceptual tools along the way. These concepts are rooted in specific application domains. Students should understand why they are learning something.",EECS16,FALSE,TRUE,TRUE
berkeley-Fall-EECS,EECS 127: Optimization Models in Engineering,Berkeley,Fall 2020,https://inst.eecs.berkeley.edu/~ee127/fa20/#schedule,"This course offers an introduction to optimization models and their applications, ranging from machine learning and statistics to decision-making and control, with emphasis on numerically tractable problems. We will appreciate the role of duality in optimization. We will encounter several widely used classes of convex optimization problems, such as LP, QP, GP, SOCP and SDP.",EECS12,FALSE,TRUE,TRUE
berkeley-Spring-EECS,EECS 151: Introduction to Digital Design and Integrated Circuits,Berkeley,Spring 2021,https://inst.eecs.berkeley.edu/~eecs151/sp21/,"An introduction to digital and system design. The material provides a top-down view of the principles, components, and methodologies for large scale digital system design. The underlying CMOS devices and manufacturing technologies are introduced, but quickly abstracted to higher-levels to focus the class on design of larger digital modules for both FPGAs (field programmable gate arrays) and ASICs (application specific integrated circuits). The class includes extensive use of industrial grade design automation and verification tools for assignments, labs and projects. The class has two lab options: ASIC Lab (EECS 151LA) and FPGA Lab (EECS 151LB). Students must enroll in at least one of the labs concurrently with the class.",EECS15,FALSE,TRUE,TRUE
washington-Winter-CSE120:,CSE120: Computer Science Principles,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse120/20wi/,"Introduces fundamental concepts of computer science and computational thinking. Includes logical reasoning, problem solving, data representation, abstraction, the creation of “digital artifacts” such as Web pages and programs, managing complexity, operation of computers and networks, effective Web searching, ethical, legal and social aspects of information technology.",CSE120,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 142: Computer Programming I,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse142/20sp/,"This course provides an introduction to computer science using the Java programming language. CSE142 is primarily a programming course, but the focus is on the problem solving techniques common in computer science. No prior programming experience is assumed, although students should know the basics of using a computer (e.g., using a web browser and word processing program) and should be competent with math through Algebra I. Students with significant prior programming experience should consider skipping cse142 and taking cse143 (we allow students to do so without any special permission)",CSE142,TRUE,TRUE,TRUE
washington-Spring-CSE,CSE 143: Computer Programming II,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse143/20sp/,"While CSE 142 focused on control issues (loops, conditionals, methods, parameter passing, etc.), CSE 143 focuses on data issues. Topics include: abstract data types (ADTs), lists, stacks, queues, linked lists, binary trees, recursion, interfaces, inheritance, and encapsulation. The course also introduces the notion of complexity and performance trade-offs in examining classic algorithms such as sorting and searching and classic data structures such as lists, sets, and maps. The course will include a mixture of implementing data structure and using components from the Java Collections Framework.",CSE143,FALSE,TRUE,TRUE
washington-Winter-CSE,CSE 160: Data Programming,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse160/20wi/,"CSE 160, “Introduction to Data Programming”, is an introductory programming class that meets this need. You will learn to write small programs in the Python programming language to solve real-world scientific and engineering problems. This will be useful in your classes, your research, and your jobs.",CSE160,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 163: Intermediate Data Programming,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse163/20sp/,"This course teaches intermediate data programming. It is a follow on to CSE142 (Computer programming I) or CSE160 (Data Programming). The course complements CSE143, which focuses more deeply on fundamental programming concepts and the internals of data structures. In contrast, CSE163 emphasizes the efficient use of those concepts for data programming.",CSE163,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 180: Introduction to Data Science,Washington,Spring 2019,https://courses.cs.washington.edu/courses/cse180/19sp/,We live in a world that is increasingly driven by decisions based on analysis and inference on diverse data sets. This course will give you an introduction to the conceptual knowledge and practical training for doing data science in this environment.,CSE180,FALSE,TRUE,FALSE
washington-Spring-CSE,CSE 311: Foundations of Computing I,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse311/20sp/,"CSE 311 examines fundamentals of logic, set theory, induction, and algebraic structures with applications to computing; finite state machines; and limits of computability. Prerequisite: CSE 143; either MATH 126 or MATH 136.",CSE311,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 331: Software Design and Implementation,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse331/20sp/,"The aim of this course is to help students write programs of higher quality and increased complexity. This requires creating software that is correct, easy to change, easy to understand, and easy to scale. The course covers principled approaches to achieving each of these.",CSE331,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 332: Data Structures and Parallelism,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse332/20sp/,"Covers abstract data types and structures including dictionaries, balanced trees, hash tables, priority queues, and graphs; sorting; asymptotic analysis; fundamental graph algorithms including graph search, shortest path, and minimum spanning trees; concurrency and synchronization; and parallelism.",CSE332,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 333: Systems Programming,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse333/20sp/,"This course is designed to give you substantial experience with programming. There will be four major programming assignments during the quarter; the assignments are designed to build on top of each other, so it is in your interest to make sure that earlier assignments are rock-solid.",CSE333,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 340: Interaction Programming,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse340/20sp/,"Interactive technology is changing society. Some of today’s interfaces are used by a billion people at a time. Almost everything we create is created for people to use, through user interfaces. We will learn about interactive systems, including programming paradigms and design of event handling, layout, undo, accessibility and context awareness.",CSE340,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 341: Programming Languages,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse341/20sp/,"Successful course participants will: Internalize an accurate understanding of what functional and object-oriented programs mean, develop the skills necessary to learn new programming languages quickly, master many specific language concepts such that they can recognize them in strange guises, learn to evaluate the power and elegance of programming languages and their constructs, and attain reasonable proficiency in the ML, Racket, and Ruby languages (and, as a by-product, become more proficient in languages they already know)",CSE341,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 344: Introduction to Data Management,Washington,Spring 2020,https://sites.google.com/cs.washington.edu/cse-344-20sp/home,"Description: In this course, we will introduce the basics of modern data management. You will learn about schema design, data modeling, query languages, building database applications, transactions, and many other topics. Through lectures, sections, and assignments, you will learn about and understand how real-world data management systems work, and how they touch upon many aspects of our daily lives.",CSE344,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 351: The Hardware/Software Interface,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse351/20sp/,"This course should develop students' sense of what really happens when software runs — and that this question can be answered at several levels of abstraction, including the hardware architecture level, the assembly level, the C programming level, and the Java programming level. The core around which the course is built is C, assembly, and low-level data representation, but this is connected to higher levels (roughly how basic Java could be implemented), lower levels (the general structure of a processor), and the role of the operating system (but not how the operating system is implemented).",CSE351,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 369: Introduction to Digital Design,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse369/20sp/,"Introduces the implementation of digital logic and its specification and simulation. Covers Boolean algebra; combinational circuits including arithmetic circuits and regular structures; sequential circuits including finitestate-machines; and use of field-programmable gate arrays (FPGAs). Emphasizes simulation, high-level specification, and automatic synthesis techniques. Prerequisite: CSE 311.",CSE369,FALSE,TRUE,FALSE
washington-Spring-EE/CSE,EE/CSE 371: Design of Digital Circuits and Systems,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse371/20sp/,"Provides a theoretical background in, and practical experience with, tools, and techniques for modeling complex digital systems with the Verilog hardware description language, maintaining signal integrity, managing power consumption, and ensuring robust intra- and inter-system communication. Prerequisite: either E E 205 or E E 215; either E E 271 or CSE 369. Offered: jointly with E E 371.",EE/CSE371,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 373: Data Structures and Algorithms,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse373/20sp/,The primary focus of this class is on gaining a strong theoretical and conceptual understanding of common data structures and algorithms as well as how they can be practically applied within larger programming projects.,CSE373,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 374: Programming Concepts and Tools,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse374/20sp/,"There is an amorphous set of things computer scientists know about and novice programmers don’t. Knowing them empowers you in computing, lessens the “friction” of learning in other classes, and makes you a mature programmer. The goal is to give you a sense of what's out there and what you can expect – and how you can learn more later when you need to.",CSE374,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 391: System and Software Tools,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse391/20sp/,"In this course you will learn about topics such as: basics of navigating a Unix/Linux environment; setting up a basic Unix/Linux system, using a Unix command-line shell, Unix file system; file and directory management; processes and process management, and permissions, groups, and users",CSE391,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 401/M501: Compiler Construction,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse401/20sp/,"Fundamentals of compilers and interpreters; symbol tables, lexical analysis, syntax analysis, semantic analysis, code generation, and optimization for general purpose programming languages. No credit to students who have taken 413. Credits: 4.",CSE401,FALSE,TRUE,TRUE
washington-Winter-CSE,CSE 402: Design and Implementation of Domain-Specific Languages,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse402/20wi/,"You will learn how to design and implement a domain-specific language. We will cover several strategies for implementing a DSL, and practice most of them in programming assignments.  All told, you will implement a compiler, an interpreter, a parser, and an optimizer.",CSE402,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 403: Software Engineering,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse403/20sp/,"In this course, students learn and gain practical experience with software engineering principles, techniques, and tools. Topics in this course include requirements analysis, specification, design, abstraction, programming style, testing, maintenance, communication, teamwork, and software project management. The practical experience centers on a quarter-long team project, in which a software development project is carried through all the stages of the software life cycle. Particular emphasis is placed on communication skills and on developing maintainable software. In-class activities further provide a hands-on experience in using state-of-the-art techniques and tools.",CSE403,FALSE,TRUE,FALSE
washington-Winter-CSE,CSE 410: Computer Systems,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse410/20wi/,"CSE 410 is an undergraduate course on computer systems, spanning from processor organization through the operating system. Assignments will be a combination of reading, paper and pencil, and software implementation. We will use, but not master, RISC-V assembler, C, and possibly Python, as well as associated Linux tools. While programming experience is required, no experience with these languages is necessary.",CSE410,FALSE,TRUE,TRUE
washington-Winter-CSE,CSE 414: Introduction to Data Management,Washington,Winter 2020,https://sites.google.com/cs.washington.edu/cse414-20sp/,"This seminar introduces database management systems and techniques that use such systems; data models, query languages, database tuning and optimization, data warehousing, and parallel processing. Intended for undergraduate students who are not CSE-majors.",CSE414,FALSE,TRUE,TRUE
washington-Winter-CSE,CSE 415: Introduction to Artificial Intelligence,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse415/20wi/,"This course begins with a discussion of what ""artificial intelligence"" means and how it can be useful. Next is a grounding in state-space search, problem formulation and solving. We then consider state-space search in the context of game playing, which then leads to alpha-beta pruning, expectimax search and the modeling of uncertainty. After that, we focus primarily on machine learning, starting with methods for reasoning under uncertainty. We cover reinforcement learning in Markov Decision Processes, perceptron learning, and deep learning. We touch briefly on ethical issues and the future of AI.",CSE415,FALSE,TRUE,TRUE
washington-Spring-CSE/STAT,CSE/STAT 416: Introduction to Machine Learning,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse416/20sp/,"Provides practical introduction to machine learning. Modules include regression, classification, clustering, dimensionality reduction with a focus on an intuitive understanding grounded in real-world applications. Intelligent applications are designed and used to make predictions on large, complex datasets.",CSE/STAT416,FALSE,TRUE,TRUE
washington-Winter-CSE,CSE 417: Algorithms and Computational Complexity,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse417/20wi/lectures/index.html,"Design and analysis of algorithms and data structures. Efficient algorithms for manipulating graphs and strings. Fast Fourier Transform. Models of computation, including Turing machines. Time and space complexity. NP-complete problems and undecidable problems",CSE417,FALSE,TRUE,FALSE
washington-Spring-CSE,CSE 421: Introduction to Algorithms,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse421/20sp/,"Techniques for design of efficient algorithms. Methods for showing lower bounds on computational complexity. Particular algorithms for sorting, searching, set manipulation, arithmetic, graph problems, pattern matching.",CSE421,FALSE,TRUE,TRUE
washington-Winter-CSE,CSE 427: Computational Biology,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse427/20wi/,"In this course, we will discuss ML approaches, with an emphasis on those that address the black-box nature of ML, to solve a wide variety of problems in biology and medicine. Class projects will provide opportunities to solve real-world research problems in biology and medicine.",CSE427,FALSE,TRUE,TRUE
washington-Winter-CSE,CSE 440: Introduction to HCI,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse440/20wi/,"This course provides an introduction to human-computer interaction and the design process. Students will learn methods and skills for designing and prototyping interactive systems. The course covers a design process from the initial formulation of a design problem to creation of digital prototypes. The course structure is a mix of lectures, classroom activities, and design critiques by peers and course staff. The course is overwhelmingly organized around a group project, in which students:",CSE440,FALSE,FALSE,TRUE
washington-Spring-CSE,"CSE 441: Advanced HCI: User Interface Design, Prototyping, and Evaluation",Washington,Spring 2013,https://courses.cs.washington.edu/courses/cse441/13sp/,Advanced Human-Computer Interaction (HCI) theory and techniques.The primary objectives of the course are for students to learn advanced ideas in human-computer interaction (HCI) and to gain experience with advanced techniques in user interface prototyping and evaluation. Students will also learn basic design principles by applying each principle individually and gaining feedback in a studio style critique.,CSE441,FALSE,FALSE,TRUE
washington-Winter-CSE,CSE 442: Data Visualization,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse442/20wi/,"In this course we will study techniques and algorithms for creating effective visualizations based on principles from graphic design, perceptual psychology, and cognitive science. Students will learn how to design and build interactive visualizations for the web, using the D3.js (Data-Driven Documents) framework.",CSE442,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 444: Database Internals,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse444/20sp/,"Databases are at the heart of modern commercial application development. Their use extends beyond this to many other environments and domains where large amounts of data must be stored for efficient update, retrieval, and analysis. In the previous course, CSE 344, we learned how to use a variety of data management systems and we learned some basic data management principles. In this course, we will study the principles behind building data management systems. For the detailed list of topics and schedule, please see the course calendar.",CSE444,FALSE,TRUE,TRUE
washington-Winter-CSE,CSE 446: Machine Learning,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse446/20wi/,"This course will introduce the fundamental concepts and algorithms that enable computational artifacts to modify and improve their performance through experience. We will cover a variety of topics, including decision trees, logistic regression, support vector machines, ensemble methods, Bayesian methods, neural networks, clustering, and dimensionality reduction.",CSE446,FALSE,TRUE,TRUE
washington-Winter-CSE,CSE 447/547: Natural Language Processing,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse447/20wi/,"Methods for designing systems that usefully and/or intelligently process natural language text data. Language models, text categorization, syntactic and semantic analysis, machine translation. This course emphasizes algorithms and data-driven methods. Prerequisite: CSE 312 and CSE 332; recommended: MATH 308 ; CSE 446 is recommended before or concurrently.",CSE447,FALSE,TRUE,FALSE
washington-Spring-CSE,CSE 451: Operating Systems,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse451/20sp/,"CSE 451 is an undergraduate course on operating systems. During the course you will complete several labs, working in teams of two. Each lab will add a new feature to a primitive operating system called xk. At the end of this class you will be able to find your way around the source code of most operating systems, and more generally, be comfortable with systems software.",CSE451,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 452: Distributed Systems,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse452/20sp/,"Distributed systems have become central to many aspects of how computers are used, from web applications to e-commerce to content distribution. This senior-level course will cover abstractions and implementation techniques for the construction of distributed systems, including client server computing, the web, cloud computing, peer-to-peer systems, and distributed storage systems. Topics will include remote procedure call, preventing and finding errors in distributed programs, maintaining consistency of distributed state, fault tolerance, high availability, and scaling.",CSE452,FALSE,FALSE,TRUE
washington-Spring-CSE,CSE 455: Computer Vision,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse455/20sp/,"Introduction to image analysis and interpreting the 3D world from image data. Topics may include segmentation, motion estimation, image mosaics, 3D-shape reconstruction, object recognition, and image retrieval.",CSE455,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 457: Introduction to Computer Graphics,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse457/20sp/,"Introduction to computer image synthesis, modeling, and animation. Topics may include visual perception, displays and framebuffers, image processing, affine and projective transformations, hierarchical modeling, hidden surface elimination, shading, ray-tracing, anti-aliasing, texture mapping, curves, surfaces, particle systems, dynamics, character animation, and animation principles.",CSE457,FALSE,TRUE,TRUE
washington-Winter-CSE,CSE 469: Computer Arch I,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse469/20wi/,"Introduction to computer architecture. Assembly and machine language, microprocessor organization including control and datapath. Computer arithmetic. Memory systems and caching. Performance modeling of microprocessors.",CSE469,FALSE,FALSE,TRUE
washington-Spring-CSE,CSE 470: Computer Arch II,Washington,Spring 2019,https://courses.cs.washington.edu/courses/cse470/19sp/,Advanced computer architecture. Performance evaluation and energy efficiency. Instruction set architectures. Instruction-level parallelism. Modern microprocessor micro-architecture. Thread-level parallelism. Cache coherency and memory consistency in shared-memory multiprocessors. Memory hierarchy. GPU architecture. Warehouse-scale computing. Trends in computer design.,CSE470,FALSE,TRUE,FALSE
washington-Winter-CSE,CSE 478: Autonomous Robotics,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse478/20wi/,"Mobile Robots delves into the building blocks of autonomous systems that operate in the wild. We will cover topics related to state estimation (bayes filtering, probabilistic motion and sensor models), control (feedback, Lyapunov, LQR, MPC), planning (roadmaps, heuristic search, incremental densification) and online learning. Students will be forming teams and implementing algorithms on 1/10th sized rally cars as part of their assignments. Concepts from all of the assignments will culminate into a final project with a demo on the rally cars. The course will involve programming in a Linux and Python environment along with ROS for interfacing to the robot.",CSE478,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 484/CSE M 584: Computer Security,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse484/20sp/,"Foundations of modern computer security, including software security, operating system security, network security, applied cryptography, human factors, authentication, anonymity, and web security.",CSE484,FALSE,TRUE,TRUE
washington-Winter-CSE,CSE 503: Software Engineering,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse503/20wi/,"Software is becoming ever more complex and difficult to understand, at the same time as it is used ever more pervasively. It is hopeless to understand how software systems work (or why they do not work!) without automated assistance. Programmers need tool assistance during design, implementation, testing, debugging, and modification (""maintenance""). This graduate course will investigate a variety of program analysis techniques that address these software engineering tasks. Topics include static analysis (e.g., abstract interpretation), dynamic analysis (e.g., testing and debugging), and probabilistic methods. While the course focuses on the design and implementation of program analysis tools, the material will be useful to anyone who wishes to improve his or her programming or understand the state of the art.",CSE503,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 505: Programming Lectures,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse505/20sp/,"Design and formal semantics of modern programming languages, includes functional and object-oriented languages.",CSE505,FALSE,TRUE,TRUE
washington-Spring-CSE,CSE 510: Advanced Topics in HCI,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse510/20sp/,"This course provides an introduction to forms of contribution several major areas of research in Human-Computer Interaction (HCI). It is based in a combination of readings and discussion, a small statistics lab, and a self-defined project. The course readings will require preparing reports on a combination of historic framing papers and more recent contributions. This will help you examine what the HCI community considers a research contribution across a variety of problems, thus preparing you to understand and make meaningful research contributions in these and other areas of HCI.",CSE510,FALSE,TRUE,FALSE
washington-Winter-CSE,CSE 515: Statistical Methods in Computer Science,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse515/20wi/,"Introduction to the probabilistic and statistical techniques used in modern computer systems. Graphical models, probabilistic inference, statistical learning, sequential models, decision theory.",CSE515,FALSE,TRUE,FALSE
washington-Spring-CSE,CSE 526: Cryptography,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse526/20sp/,"This course gives a comprehensive introduction to cryptography. The focus is on (1) understanding how existing tools work; (2) how to formalize the security goals they achieve, and (3) how to prove that they achieve these goals. The class will aim to be both of interest to theory students, as well as to a broader audience interested in using cryptography in a sound way. In partcular, a main objective is exposure to the paradigm of provable security which allows us to reason rigorously about cryptographic security.",CSE526,FALSE,TRUE,TRUE
washington-Spring-CSE/NEUBEH,CSE/NEUBEH 528: Computational Neuroscience,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse528/20sp/,"This course provides an introduction to basic computational methods for understanding what nervous systems do and for determining how they function. We will explore the computational principles governing various aspects of vision, sensory-motor control, learning, and memory. Specific topics that will be covered include representation of information by spiking neurons, processing of information in neural circuits, and algorithms for adaptation and learning. We will make use of Matlab demonstrations and exercises to gain a deeper understanding of concepts and methods introduced in the course. (Prerequisites: Familiarity with basic concepts in calculus, differential equations, linear algebra, and probability theory).",CSE/NEUBEH528,FALSE,FALSE,TRUE
washington-Spring-CSE531:,CSE531: Computational Complexity,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse531/20sp/,"We seek to give a rigorous mathematical framework that will enable us to answer some of these questions. Along the way, we shall encounter several interesting mathematical tools. Complexity theory has been around as an area for more than 50 years, but it is still in its infancy. It is notorious for generating the hardest open questions in computer science.",CSE531,FALSE,TRUE,TRUE
washington-Winter-CSE544:,CSE544: Principles of Data Management,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse544/20wi/,"In this course we discuss principles of modern data management. We will cover the fundamentals of relational modeling and query languages (SQL, Relational Algebra, Datalog), advanced optimizations (including worst-case optimal algorithms and magic sets), the architecture of modern relational database systems (including parallel database systems and column-oriented database systems), and transactions.",CSE544,FALSE,TRUE,TRUE
washington-Fall-CSE546:,CSE546: Machine Learning,Washington,Fall 2018,https://courses.cs.washington.edu/courses/cse546/18au/,"Machine learning explores the study and construction of algorithms that can learn from historical data and make inferences about future outcomes. This study is a marriage of algorithms, computation, and statistics so this class will be have healthy doses of each. The goals of this course are to provide a thorough grounding in the fundamental methodologies and algorithms of machine learning.",CSE546,FALSE,TRUE,FALSE
washington-Spring-CS547:,CS547: Machine Learning for Big Data,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse547/20sp/,"One of the main goals of CS547 is to prepare you to apply state-of-the-art data mining tools and algorithms to an application. If you are interested in research, CS547 will also leave you well-qualified to do data mining research. The class's final project will offer you an opportunity to do exactly this.",CS547,FALSE,TRUE,TRUE
washington-Spring-CSE549:,CSE549: High-Performance Computer Architecture,Washington,Spring 2014,https://courses.cs.washington.edu/courses/cse549/14sp/,"Algorithm design, software techniques, computer organizations for high-performance computing systems. Selected topics from: VLSI complexity for parallel algorithms, compiling techniques for parallel and vector machines, large MIMD machines, interconnection networks, reconfigurable systems, memory hierarchies in multiprocessors, algorithmically specialized processors, data flow architectures.",CSE549,FALSE,TRUE,FALSE
washington-Spring-CSE562:,CSE562: Mobile Systems and Applications,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse562/20sp/,"Signal processing fundamentals, acoustic device and device-free tracking, physiological sensing using phones and speakers, IMU tracking and GPS localization, Wi-Fi localization and sensing, designing and building IoT device hardware, backscatter systems, mobile privacy and security, and robotics mobile systems",CSE562,FALSE,TRUE,FALSE
washington-Winter-CSE564:,CSE564: Computer Security and Privacy,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse564/20wi/,"Computer systems play a critical role in modern society. Unfortunately, there exist individuals -- including vandals and professional criminals -- who wish to compromise the security and privacy of these computer systems. Computer security is the discipline dedicated to protecting computer systems and their users from the malicious actions of adversaries. This course is designed to bring participants to the forefront of modern computer security research, thereby giving students the foundations for advancing the state-of-the-art in the field. This course also targets individuals in other fields who wish to address security and privacy in their own research.",CSE564,FALSE,TRUE,FALSE
washington-Spring-CSE571:,CSE571: Robotics,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse571/20sp/,"Overview of mobile robot control and sensing. Behavior-based control, world modeling, localization, navigation, and planning Probabilistic sensor interpretation, Bayers filters, particle filters. Projects: Program real robots to perform navigation tasks.",CSE571,FALSE,TRUE,FALSE
washington-Winter-CSE573:,CSE573: Introduction to Artificial Intelligence,Washington,Winter 2020,https://courses.cs.washington.edu/courses/cse573/20wi/,"Introduction to computational models of thought and construction of intelligent information systems. Topics include search algorithms, data dependencies and truth-maintenance systems, approaches to knowledge representation, automated deduction, reasoning under uncertainty, and machine learning.",CSE573,FALSE,TRUE,TRUE
washington-Spring-CSE576:,CSE576: Computer Vision,Washington,Spring 2020,https://courses.cs.washington.edu/courses/cse576/20sp/,"This class is a general introduction to computer vision. It covers standard techniques in image processing like filtering, edge detection, stereo, flow, etc. (old-school vision), as well as newer, machine-learning based computer vision.",CSE576,FALSE,TRUE,TRUE
brown-Spring-CSCI0030:,CSCI0030: Introduction to Computation for the Humanities and Social Sciences,Brown,Spring 2021,http://cs.brown.edu/courses/csci0030,"Introduces students to the use of computation for solving problems in the social sciences and the humanities. We will investigate a series of real-world problems taken from the news, from books such as Freakonomics, and from current research. Topics covered include data gathering, analysis, and visualization; web-based interfaces; algorithms; and scripting.",CSCI0030,FALSE,TRUE,TRUE
brown-Spring-CSCI0040:,CSCI0040: Introduction to Scientific Computing and Problem Solving,Brown,Spring 2021,http://cs.brown.edu/courses/csci0040/,"CSCI0040 provides an introduction to using computers to solve STEM (Science, Technology, Engineering and Mathematics) data analysis, visualization and simulation problems from engineering, neuroscience, biology, mathematics and finance. Students will access and analyze a number of ""real world"" data sets while becoming fluent MATLAB programmers. Other tools utilized may include Excel, Wolframalpha and Python.",CSCI0040,FALSE,TRUE,TRUE
brown-Fall-CSCI0060:,CSCI0060: Practical Systems Skills,Brown,Fall 2020,http://cs.brown.edu/courses/csci0060/index.html,"This class is an introduction to develop hands-on-computing skills necessary to comfortably work within a UNIX-like operating system. Topics include the shell, its filesystem, bash scripting, SSH, version control, as well as how to locally develop, deploy and publish a website.",CSCI0060,FALSE,TRUE,TRUE
brown-Spring-CSCI0080:,CSCI0080: A First Byte of Computer Science,Brown,Spring 2017,http://cs.brown.edu/courses/csci0080,"Introduces non-CS concentrators to the academic discipline of computer science, its thought processes, and its relevance to other fields and modern life more generally. The target audience is students who are interested in learning more about what computer science is about and the ideas it has to offer tomorrow's citizens and scholars. Topics include the basics of computation and programming, a taste of theoretical computer science and algorithms, and an introduction to codes and artificial intelligence. Although students will learn to read and understand short programs, the course will not teach or require advanced programming skills.",CSCI0080,FALSE,TRUE,TRUE
brown-Fall-CSCI0100:,CSCI0100: Data Fluency for All,Brown,Fall 2019,http://cs.brown.edu/courses/csci0100/,"This course introduces students to a variety of statistical and computational techniques that data scientists use to tell stories. The subject matter for such stories might range from the American slave trade to local elections. As an example of the former, data scientists have designed powerful visualizations demonstrating the growth and demise of the slave trade over time, highlighting the extent of the human displacement. For the latter, one could imagine mining Twitter feeds to measure the public’s relative interest in various political candidates, and then using the content of these feeds to predict election winners.",CSCI0100,FALSE,TRUE,TRUE
brown-Fall-CSCI0111:,CSCI0111: Computing Foundations: Data,Brown,Fall 2020,http://cs.brown.edu/courses/csci0111/fall2020/index.html,"An introduction to computing and programming that focuses on understanding and manipulating data. Students will learn to write programs to process both tabular and structured data, to assess programs both experimentally and theoretically, to apply basic data science concepts, and to discuss big ideas around the communication, use, and social impacts of digital information.",CSCI0111,FALSE,TRUE,TRUE
brown-Fall-CSCI0112:,CSCI0112: Computing Foundations: Program Organization,Brown,Fall 2020,http://cs.brown.edu/courses/csci0112/fall-2020/,"CSCI 0112 builds on the data-focused programming introduced in CSCI 0111. Students will learn how to structure their programs so that subproblems can be solved in isolation. We will discuss several algorithms–abstract descriptions of computations–and students will get practice implementing working programs from these abstract descriptions. We will continue our study of data organization, covering several new ways of storing and accessing information. We will also continue to discuss program efficiency; students will learn how to reason about the performance of their programs. Finally, like CSCI 0111, CSCI 0112 will foreground the ethical considerations programmers must think about when developing software.",CSCI0112,FALSE,TRUE,TRUE
brown-Fall-CSCI0150:,CSCI0150: Introduction to Object-Oriented Programming and Computer Science,Brown,Fall 2020,http://cs.brown.edu/courses/csci0150,"Emphasizes object-oriented design and programming in Java, an effective modern technique for producing modular, reusable, internet-aware programs. Also introduces interactive computer graphics, user interface design, and some fundamental data structures and algorithms. The course features a sequence of successively more complex graphics programs, including Tetris, and culminating in a significant final project such as an interactive sketching program, Othello, PacMan or a student-designed application. CS15 helps provide a serious introduction to the field intended for both potential concentrators and those who may take only a single course. No prerequisites, no prior knowledge of programming required.",CSCI0150,FALSE,TRUE,TRUE
brown-Summer-CSCI0160:,CSCI0160: Introduction to Algorithms and Data Structures,Brown,Summer 2021,http://cs.brown.edu/courses/csci0160,"This course teaches fundamental techniques for problem solving by computer that are relevant to most areas of Computer Science, both theoretical and applied. Algorithms and data structures for sorting, searching, graph problems and geometric problems are covered. Programming assignments conform with the object-oriented methodology introduced in CSCI0150. Prerequisite: CSCI0150 or written permission.",CSCI0160,FALSE,TRUE,TRUE
brown-Spring-CSCI0170:,CSCI0170: CS: An Integrated Introduction,Brown,Spring 2021,https://cs17-spring2021.github.io/,"CSCI0170/0180 is an introductory sequence that helps students begin to develop the skills, knowledge, and confidence to solve computational problems elegantly, correctly, efficiently, and with ease. The sequence is unique in teaching the functional and imperative programming paradigms---the first using the languages Scheme and ML in CSCI0170; the second two using Java and Scala in CSCI0180. The sequence requires no previous programming experience. Indeed, few high school students are exposed to functional programming; hence even students with previous programming experience often find this sequence an invaluable part of their education.",CSCI0170,FALSE,TRUE,TRUE
brown-Summer-CSCI0180:,CSCI0180: CS: An Integrated Introduction,Brown,Summer 2021,https://cs18-summer-2021.github.io/,"A continuation of CSCI0170. Students learn to program in Java while continuing to develop their algorithmic and analytic skills. Emphasis is placed on object-oriented design, imperative programming, and the implementation and use of data structures. Examples are drawn from such areas as databases, strategy games, web programming, graphical user interfaces, route finding, and data compression. Lab work done with the assistance of TAs. Prerequisite: CSCI 0170 or CSCi 0190.",CSCI0180,FALSE,TRUE,TRUE
brown-Fall-CSCI0190:,CSCI0190: Accelerated Introduction to Computer Science,Brown,Fall 2020,http://cs.brown.edu/courses/csci0190/2020/,"A one-semester introduction to CS covering programming integrated with core data structures, algorithms, and analysis techniques, similar to the two-course introductory sequences (CSCI 0150-0160 and CSCI 0170-0180). Students wishing to take CSCI 0190 must pass a a sequence of online placement assignments. Though the placement process is most appropriate for students who have had some prior programming experience, it is self-contained so all are welcome to try learning the provided material and attempting placement.",CSCI0190,FALSE,FALSE,TRUE
brown-Summer-CSCI0220:,CSCI0220: Discrete Structures and Probability,Brown,Summer 2021,https://cs22.netlify.app/,"The objective of the course is to place on solid foundations the most common structures of Computer Science, to illustrate proof techniques, to provide the background for an introductory course in computational theory and to introduce basic concepts of probability theory. It introduces Boolean algebras, logic, set theory, elements of algebraic structures, graph theory, combinatorics and probability. No prerequisites.",CSCI0220,TRUE,TRUE,TRUE
brown-Spring-CSCI0240:,CSCI0240: Visual Thinking/Visual Computing,Brown,Spring 2005,http://cs.brown.edu/courses/csci0240/,"Visual Thinking/Visual Computing"" is an interdisciplinary course designed to provide a systematic grounding in both technical and theoretical areas of visual research and communication, with a focus on the key role of computer graphics.",CSCI0240,FALSE,TRUE,FALSE
brown-Spring-CSCI0300:,CSCI0300: Fundamentals of Computer Science,Brown,Spring 2021,http://cs.brown.edu/courses/csci0300/2021/,"The goal of CSCI 0300/CS 300 is to teach the fundamentals behind the ""magic"" of computer systems from the hardware level to the global internet. We'll cover the ideas, principles and abstractions that unify computer systems design – from how your laptop runs multiple programs at the same time, to how companies like Instagram, AirBnB, and Google operate large websites, to how easy it is to exploit security vulnerabilities on badly designed systems. This is a great class for students who are interested in learning what systems programming is, how systems work, and why these systems are so critical to modern technology.",CSCI0300,TRUE,TRUE,TRUE
brown-Fall-CSCI0310:,CSCI0310: Introduction to Computer Systems,Brown,Fall 2011,http://cs.brown.edu/courses/csci0310/assignments.xml,"This course covers the basic principles behind the organization of modern computers. It starts with machine representation of data types and logic design, then explores the architecture and operations of computer systems, including I/O, pipelining, and memory hierarchies. Assembly language is introduced as an intermediate abstraction and is used to study introductory operating system and compiler concepts",CSCI0310,FALSE,TRUE,TRUE
brown-Spring-CSCI0320:,CSCI0320: Introduction to Software Engineering,Brown,Spring 2021,http://cs.brown.edu/courses/csci0320,"Techniques for designing, building, and maintaining large,scalable, and reusable systems. We will cover advanced programming techniques using Java and Javascript. Course assignments will familiarize students with software testing, relational databases, concurrency techniques such as threads, and software engineering tools like git, profilers, and debuggers.",CSCI0320,FALSE,TRUE,TRUE
brown-Fall-CSCI0330:,CSCI0330: Introduction to Computer Systems,Brown,Fall 2020,https://brown-cs0330.github.io/website/index.html,"High-level computer architecture and systems programming. The course covers the organization of computer systems (in terms of storage units, caches, processors, and I/O controllers) and teaches students assembly-language programming and C-language programming. Extensive programming exercises introduce students to systems-level programming on Linux systems, as well as to multi-threaded programming with POSIX threads. Students will be introduced to the functions of operating systems.",CSCI0330,FALSE,TRUE,TRUE
brown-Fall-CSCI0530:,CSCI0530: Coding the Matrix: an Introduction to Linear Algebra for Computer Science,Brown,Fall 2017,http://cs.brown.edu/courses/csci0530/current/index.htm,"The aim of this course is to provide students interested in computer science an introduction to vectors and matrices and their use in CS applications. The course will be driven by applications from areas chosen from among: combinatorial optimization, computer vision, cryptography, game theory, graphics, information retrieval and web search, maching learning, and scientific visualization. For example, students will learn Google's PageRank method for ranking web pages. This course satisfies the linear algebra requirement for the Computer Science Sc.B.and the Applied-Math/CS Sc.B.",CSCI0530,TRUE,TRUE,TRUE
brown-Spring-CSCI0920:,CSCI0920: The Educational Software Seminar,Brown,Spring 2005,http://cs.brown.edu/courses/csci0920/,"Students examine the purpose, design, production, use and evaluation of educational software, electronically mediated curriculum, and other educational technologies, while working in teams to design software for clients in local classrooms (K-12 and university). CS4 or 15 is helpful, as is coursework or strong interest in education or digital production, but there are no prerequisites. Enrollment limited to 30; written permission required.",CSCI0920,FALSE,TRUE,FALSE
brown-Fall-CSCI1010:,CSCI1010: Theory of Computation,Brown,Fall 2020,http://cs.brown.edu/courses/csci1010,"The course introduces basic models of computation including languages, finite-state automata and Turing machines. Proves fundamental limits on computation (incomputability, the halting problem). Provides the tools to compare the hardness of computational problems (reductions). Introduces computational complexity classes (P, NP, PSPACE and others).",CSCI1010,FALSE,TRUE,TRUE
brown-Spring-CSCI1260:,CSCI1260: Compilers and Program Analysis,Brown,Spring 2021,http://cs.brown.edu/courses/csci1260/spring-2021/,"Lexical analysis, syntactic analysis, semantic analysis, code generation, code optimization, translator writing systems.",CSCI1260,FALSE,TRUE,TRUE
brown-Fall-CSCI1270:,CSCI1270: Database Management Systems,Brown,Fall 2020,http://cs.brown.edu/courses/csci1270/website_2020/lectures.html,"Introduction to database structure, organization, languages and implementation. Relational model. Query languages, query processing, query optimization, normalization, file structures, concurrency control and recovery algorithms, and distributed databases. Studies of actual systems. While database management system usage is covered, emphasis is on the systems-building aspects of these large, complex systems. We also relate the material to modern applications such as the web",CSCI1270,FALSE,TRUE,FALSE
brown-Fall-CSCI1290:,CSCI1290: Computational Photography and Image Manipulation,Brown,Fall 2020,http://cs.brown.edu/courses/csci1290/,"We will cover topics such as cameras, human visual perception, image processing and manipulation, image based lighting and rendering, high dynamic range, single view reconstruction, photo quality assessment, non photorealistic rendering, the use of Internet-scale data, and many more topics. The course will consist of several programming assignments and a final project. Students are encouraged to capture and process their own data. Students can earn graduate credit for the course but will need to meet higher requirements on all projects throughout the semester and need the instructor's permission.",CSCI1290,FALSE,TRUE,TRUE
brown-Fall-CSCI1300:,CSCI1300: User Interfaces and User Experience,Brown,Fall 2020,http://cs.brown.edu/courses/csci1300/,"Have you ever walked into a door thinking that you were supposed to pull instead of push? Have you ever been stuck on a website, not sure how to proceed next? Learn when to use different interfaces, how to model and represent user interaction, how to elicit requirements and feedback from users, as well as the principles of user experience design, methods for designing and prototyping interfaces, and user interface evaluation. Students interested in both learning the process behind building an effective interface and gaining hands-on experience designing a user interface should take this course. There will be assignments, readings, and studios, where students will have the opportunity to work alongside TAs and interact with industry guests as they learn critical tools for interface and web design.",CSCI1300,FALSE,FALSE,TRUE
brown-Spring-CSCI1301:,CSCI1301: Livestreaming Reimagined,Brown,Spring 2021,http://cs.brown.edu/courses/csci1301/,"Livestreaming today is comprised of video game streams and Zoom classes. But as video production becomes more accessible, and devices become more mobile, the blending of the Instagram photo feed and TV reality show could produce a new generation of streaming personalities. In this project-based course, we’ll investigate together the space of livestreaming technology beyond desktop gaming, exploring new configurations, interfaces, and improvements to current livestreaming systems. We’ll focus on creative (music, art, food, travel) or educational streaming, exploring how to support new forms of streamer-audience interaction and presence.",CSCI1301,FALSE,TRUE,FALSE
brown-Spring-CSCI1310:,CSCI1310: Fundamentals of Computer Systems (Master's),Brown,Spring 2021,http://cs.brown.edu/courses/csci1310/2020/,"Covers fundamental concepts, principles, and abstractions that underlie the design and engineering of computer systems. Students will learn how a computer works, how to write safe and performant systems software, and what systems abstractions support today’s complex, high-performance systems developed in industry. Specific topics include machine organization, systems programming and performance, key concepts of operating systems, isolation, security, virtualization, concurrent programming, and the basics of distributed systems. Combined lectures, labs, and several hands-on projects involving programming exercises in C/C++.",CSCI1310,FALSE,TRUE,TRUE
brown-Spring-CSCI1320:,CSCI1320: Creating Modern & Mobile Web Applications,Brown,Spring 2021,http://cs.brown.edu/courses/csci1320/,"This course covers all aspects of web application development, including the initial concept, user-centric design, development methodologies, front end development, databases, back end development, security, testing, load testing, accessibility, and deployment. There will be a substantial team project. The course is designed both for students with substantial programming background (equivalent to CS32 or CS33) who want to learn how to use this background to build web applications, and for students with a substantial background in web design including HTML and Javascript who are interested in learning how to extend design techniques to incorporate the technologies needed in modern web applications",CSCI1320,FALSE,FALSE,TRUE
brown-Spring-CSCI1340:,CSCI1340: Innovating Game Development,Brown,Spring 2008,http://cs.brown.edu/courses/csci1340/2008/Home.html,"What technologies will shape the next generation of video games? This project-centered course focuses on computational innovations for game development. Students examine innovative game technology through case studies of existing games and talks by industrial and academic game professionals. In teams, students propose and implement a project demonstrating a novel technology for gaming. Recommended: strong computational or engineering background.",CSCI1340,FALSE,TRUE,TRUE
brown-Fall-CSCI1370:,CSCI1370: Virtual Reality Design for Science,Brown,Fall 2019,http://cs.brown.edu/courses/cs137/,"Explores the visual and human-computer interaction design process for scientific applications in Brown's immersive virtual reality Cave. Joint with RISD. Computer Science and design students learn how to work effectively together; study the process of design, learn about scientific problems, create designs for scientific applications; critique, evaluate, realize and iterate designs, and demonstrate final projects.",CSCI1370,FALSE,TRUE,TRUE
brown-Spring-CSCI1380:,CSCI1380: Distributed Computer Systems,Brown,Spring 2021,http://cs.brown.edu/courses/csci1380/s21/,"Explores the fundamental principles and practice underlying networked information systems. We first cover basic distributed computing mechanisms (e.g., naming, replication, fault tolerance, security) and enabling middleware technologies. We then discuss how these mechanisms and technologies fit together to realize distributed databases and file systems, web-based and mobile information systems.",CSCI1380,FALSE,TRUE,TRUE
brown-Fall-CSCI1410:,CSCI1410: Artificial Intelligence,Brown,Fall 2020,http://cs.brown.edu/courses/csci1410,"Algorithms and representations used in artificial intelligence. Introduction and implementation of algorithms for search, planning, perception, knowledge representation, logic, probabilistic representation and reasoning, robotics and machine learning",CSCI1410,FALSE,TRUE,TRUE
brown-Spring-CSCI1420:,CSCI1420: Machine Learning,Brown,Spring 2021,http://cs.brown.edu/courses/csci1420/,"How can artificial systems learn from examples, and discover information buried in massive datasets? We explore the theory and practice of statistical machine learning, focusing on computational methods for supervised and unsupervised data analysis. Specific topics include empirical risk minimization, probably approximately correct learning, maximum likelihood parameter estimation, kernel methods, neural networks, the expectation maximization algorithm, and principal component analysis.",CSCI1420,FALSE,TRUE,TRUE
brown-Spring-CSCI1430:,CSCI1430: Introduction to Computer Vision,Brown,Spring 2021,https://browncsci1430.github.io/webpage/index.html,"How can computers understand the visual world of humans? This course treats vision as a process of inference from noisy and uncertain data and emphasizes probabilistic and statistical approaches. Topics may include perception of 3D scene structure from stereo, motion, and shading; image filtering, smoothing, edge detection; segmentation and grouping; texture analysis; learning, recognition and search; tracking and motion estimation. Strongly recommended: basic linear algebra, basic calculus and exposure to probability.",CSCI1430,FALSE,TRUE,TRUE
brown-Spring-CSCI1440:,CSCI1440: Topics In Algorithmic Game Theory,Brown,Spring 2021,http://cs.brown.edu/courses/csci1440/,"This course examines topics in game theory and mechanism design from a computer scientist's perspective. Through the lens of computation, the focus is the design and analysis of systems utilized by self-interested agents. Students will investigate how the potential for strategic agent behavior can/should influence system design, and the ramifications of conflicts of interest between system designers and participating agents.",CSCI1440,FALSE,TRUE,TRUE
brown-Fall-CSCI1450:,CSCI1450: Advanced Introduction to Probability for Computing and Data Science,Brown,Fall 2020,http://cs.brown.edu/courses/csci1450/,"Probability and statistics have become indispensable tools in computer science. Probabilistic methods and statistical reasoning play major roles in machine learning, cryptography, network security, communication protocols, web search engines, robotics, program verification, and more. This course introduces the basic concepts of probability and statistics, focusing on topics that are most useful in computer science applications. Topics include: modeling and solution in sample space, random variables, simple random processes and their probability distributions, Markov processes, limit theorems, and basic elements of statistical inference.",CSCI1450,FALSE,TRUE,TRUE
brown-Spring-CSCI1460:,CSCI1460: Introduction to Computational Linguistics,Brown,Spring 2021,http://cs.brown.edu/courses/csci1460/,"The application of computational methods to problems in natural-language processing. In particular we examine techniques due to recent advances in deep learning: word embeddings, recurrent neural networks (e.g., LSTMs), sequence-to-sequence models, and generative adversarial networks (GANs). Programming projects include parsing, machine translation, question answering, and chat-bots.",CSCI1460,FALSE,TRUE,TRUE
brown-Fall-CSCI1470:,CSCI1470: Deep Learning,Brown,Fall 2020,https://brown-deep-learning.github.io/dl-website-2020/index.html,"Deep Learning belongs to a broader family of machine learning methods. It is a particular version of artificial neural networks -- a version that emphasizes learning representation with multiple layers of networks. Deep Learning, plus the specialized techniques that it has inspired (e.g. convolutional neural networks, recurrent neural networks, and transformers), have led to rapid improvements in many applications, such as computer vision, machine learning, sound understanding, and robotics. This course intends to give students an overview of the prominent techniques of Deep Learning and its applications in computer vision, language understanding, and other areas. It also aims at providing hands-on practice of implementing deep learning algorithms in Python.",CSCI1470,FALSE,FALSE,TRUE
brown-Spring-CSCI1550:,CSCI1550: Probabilistic Methods in Computer Science,Brown,Spring 2021,http://cs.brown.edu/courses/csci1550/,"Randomization and probabilistic techniques play an important role in modern computer science, with applications ranging from combinatorial optimization and machine learning to communications networks and secure protocols. This course introduces the most fundamental probabilistic techniques used in computer science applications, in particular in randomized algorithms, probabilistic analysis of algorithms and machine learning.",CSCI1550,FALSE,TRUE,TRUE
brown-Fall-CSCI1570:,CSCI1570: Design and Analysis of Algorithms,Brown,Fall 2020,http://cs.brown.edu/courses/csci1570,"A single algorithmic improvement can have a greater impact on our ability to solve a problem than ten years of incremental improvements in CPU speed. We study techniques for designing and analyzing algorithms. Typical problem areas addressed include hashing, searching, dynamic programming, graph algorithms, network flow, optimization algorithms including linear programming.",CSCI1570,FALSE,TRUE,FALSE
brown-Spring-CSCI1580:,CSCI1580: Information Retrieval and Web Search,Brown,Spring 2013,http://cs.brown.edu/courses/csci1580/,"Covers traditional material as well as recent advances in information retrieval (IR), the study of indexing, processing, and querying of textual data. The focus will be on newer techniques geared to hypertext documents available on the World Wide Web. Topics include efficient text indexing; Boolean and vector space retrieval models; evaluation and interface issues; Web crawling, link-based algorithms, and Web metadata; text/Web clustering, classification; text mining.",CSCI1580,FALSE,TRUE,TRUE
brown-Spring-CSCI1590:,CSCI1590: Introduction to Computational Complexity,Brown,Spring 2009,http://cs.brown.edu/courses/csci1590,Introduction to serial and parallel models of computation; time and space complexity classes on these models; the circuit model of computation and its relation to serial and parallel time complexity; space-time tradeoffs on serial computers; area-time tradeoffs on the VLSI computational model; interactive and probabilistically checkable proofs; the definition of NP in terms of probabilistically checkable proofs; hardness of approximations to solutions to NP-hard problems,CSCI1590,FALSE,TRUE,FALSE
brown-Spring-CSCI1600:,CSCI1600: Real-time and Embedded Software,Brown,Spring 2021,http://cs.brown.edu/courses/csci1600/,"Comprehensive introduction to the design and implementation of software for programmable embedded computing systems, in applications such as Internet of Things, transportation, and mobile. Includes the overall embedded real-time software design and development processes, with a focus on engineering for reliability.",CSCI1600,FALSE,TRUE,TRUE
brown-Fall-CSCI1610:,CSCI1610: Building High-Performance Servers,Brown,Fall 2005,http://cs.brown.edu/courses/csci1610/,"In-depth study of modern server design. Considers architectures for building high-performance, robust, scalable and secure servers. We consider all aspects of 'mission-critical' servers. Topics include threaded and non-blocking programming paradigms, high-performance I/O (network and disk), secure programming techniques, database access, performance profiling, security, and redundancy.",CSCI1610,FALSE,TRUE,TRUE
brown-Fall-CSCI1650:,CSCI1650: Software Security and Exploitation,Brown,Fall 2020,http://cs.brown.edu/courses/csci1650/,"CSCI 1650 covers software exploitation techniques and state-of-the-art mechanisms for hardening software. The course begins with a summary of prevalent software defects, typically found in applications written in memory unsafe languages, like C/C++, and proceeds with studying traditional and modern exploitation techniques, ranging from classical code injection and code reuse up to the latest goodies (e.g., JIT-ROP).",CSCI1650,FALSE,TRUE,TRUE
brown-Spring-CSCI1670:,CSCI1670: Operating Systems,Brown,Spring 2021,https://brown-cs1690.github.io/brown-cs167-s21/#/,"Covers not just the principles of operating systems but the intricacies of how they work. Topics include multithreaded programming, managing threads and interrupts, managing storage, processor scheduling, operating-system structure, virtualization, security, and the design of file systems (both local and distributed).",CSCI1670,FALSE,TRUE,TRUE
brown-Fall-CSCI1680:,CSCI1680: Computer Networks,Brown,Fall 2019,http://cs.brown.edu/courses/csci1680/f19/,"Covers the technologies supporting the Internet, from Ethernet and WiFi through the routing protocols that govern the flow of traffic and the web technologies that are generating most of it. A major concern is understanding the protocols used on the Internet: what the issues are, how they work, their shortcomings, and what improvements are on the horizon.",CSCI1680,FALSE,TRUE,TRUE
brown-Spring-CSCI1710:,CSCI1710: Logic for Systems,Brown,Spring 2021,http://cs.brown.edu/courses/csci1710/,"The course will focus on proving properties about systems and programs. We will study the distinction between programs and specifications, and check for whether the former obey the latter. We will work with tools that have extensive automation such as model constructors, model checkers, and proof assistants. Problems and projects will apply to real-world systems.",CSCI1710,FALSE,TRUE,FALSE
brown-Fall-CSCI1760:,CSCI1760: Multiprocessor Synchronization,Brown,Fall 2020,http://cs.brown.edu/courses/csci1760/,"This course examines the theory and practice of multiprocessor synchronization. Subjects covered include multiprocessor architecture, mutual exclusion, wait-free and lock-free synchronization, spin locks, monitors, load balancing, concurrent data structures, and transactional synchronization.",CSCI1760,FALSE,TRUE,TRUE
brown-Fall-CSCI1810:,CSCI1810: Computational Molecular Biology,Brown,Fall 2020,http://cs.brown.edu/courses/csci1810/,"High-throughput experimental approaches now allow molecular biologists to make large-scale measurements of DNA, RNA, and protein, the three fundamental molecules of the cell. The resulting datasets are often too large for manual analysis and demand computational techniques. This course introduces algorithms for sequence comparison and alignment; molecular evolution and phylogenetics; DNA/RNA sequencing and assembly; recognition of genes and regulatory elements; and RNA and protein structure.",CSCI1810,FALSE,TRUE,TRUE
brown-Spring-CSCI1820:,CSCI1820: Algorithmic Foundations of Computational Biology,Brown,Spring 2020,http://cs.brown.edu/courses/csci1820/,"This course is devoted to computational and statistical methods as well as software tools for DNA, RNA, and protein sequence analysis. The focus is on understanding the algorithmic and mathematical foundations of the methods, the design of the associated genomics tools, as well as on their applications. A comprehensive set of programming assignments provides a hands-on journey for the student into the complexities of real genomic data.",CSCI1820,FALSE,TRUE,FALSE
brown-Spring-CSCI1850:,CSCI1850: Deep Learning in Genomics,Brown,Spring 2021,http://cs.brown.edu/courses/csci1850/,"Deep learning models have achieved impressive performance in fields like computer vision and NLP. The collection of vast quantities of biological data naturally leads to the question -- can deep learning help us understand genomics? We will cover deep learning models like Auto-encoders and Convolutional Neural Networks and how have they been applied to solve problems in genomics. We will learn about different biological datasets, interpretation methods that help explain predictions, and what unique challenges are presented by the data in this field. Critical thinking and learning from the practical application of models to data are expected outcomes.",CSCI1850,FALSE,TRUE,TRUE
brown-Fall-CSCI1971:,CSCI1971: Topics in 2D Game Engines,Brown,Fall 2013,http://cs.brown.edu/courses/csci1971/,"Welcome to 2D Game Engines! This is a largely student-run course, similar to an independent study, and you'll learn lots of techniques needed to create a fledgling game engine. These topics include animation, simple AI, collision detection, physics, and raycasting. You will create a game engine of your own over the course of the semester, adding a few features to it each week. At the same time, you will also create a series of games using your engine that demonstrate the use of the features you add. Near the end of the semester, you will design and implement a final project that uses your game engine to create a complete, polished game.",CSCI1971,FALSE,TRUE,TRUE
brown-Spring-CSCI1950U:,CSCI1950U: Topics in 3D Game Engine Development,Brown,Spring 2021,http://cs.brown.edu/courses/csci1972/index.shtml,"Covers core techniques in 3D game development with an emphasis on engine architecture. Students independently develop their own engines using C++, OpenGL, and the Qt framework, then work in groups to create a polished game. Topics include: spatial subdivision, player representation, collision detection and response, game networking, GPUs, and OpenGL.",CSCI1950U,FALSE,TRUE,TRUE
brown-Spring-CSCI2270:,CSCI2270: Managing and Mining Massive Time Series,Brown,Spring 2021,https://www.francosolleza.com/CS227/,"In-depth treatment of advanced issues in database management systems. Topics vary from year to year and may include distributed databases, mobile data management, data stream processing and web-based data management.",CSCI2270,FALSE,TRUE,FALSE
brown-Spring-CSCI2300:,CSCI2300: Human-Computer Interaction Seminar,Brown,Spring 2020,http://cs.brown.edu/courses/csci2300,"This seminar covers methods for conducting research in human-computer interaction (HCI). These topics will be pursued through independent reading, assignments, and class discussion. The seminar comprises four assignments that are designed to be meaningful and have the potential to be widely visible. We will have readings that teach HCI experimental research methods and provide examples of valuable contributions.",CSCI2300,FALSE,TRUE,TRUE
brown-Fall-CSCI2340:,CSCI2340: Software Engineering,Brown,Fall 2018,https://cs.brown.edu/courses/cs234/2018/,"This source provides an overview of particular topics relevant to software engineering with a strong emphasis on research directions and where the field is going. It is designed both to familiarize the student with current research directions and where the field is going, and to lay the foundations for students wising to do research in the area.",CSCI2340,FALSE,TRUE,FALSE
brown-Fall-CSCI2370:,CSCI2370: Interdisciplinary Scientific Visualization,Brown,Fall 2020,http://cs.brown.edu/courses/csci2370/2020/,"Description: Learn how to do interdisciplinary scientific visualization research, from soup to nuts, in one semester. Projects will involve the solution of scientific problems using computer graphics, modeling, and visualization. Working in small groups, students will identify scientific problems, propose solutions involving computational modeling and visualization, evaluate the proposals, design and implement the solutions, apply them to the problems, evaluate their success, and report on results. Examples might include interactive software systems, immersive virtual reality applications, quantitative analysis tools, or new applications of existing visualizations methods.",CSCI2370,FALSE,TRUE,FALSE
brown-Fall-CSCI2390:,CSCI2390: Privacy-Conscious Computer Systems,Brown,Fall 2020,http://cs.brown.edu/courses/csci2390/2020/,"The goal of CSCI 2390 is to understand privacy-related challenges for computer systems, learn what design trade-offs we face as engineers, and to identify new research directions that might help address these challenges. We will examine research papers on distributed system design, privacy-preserving, and secure computing techniques, and discuss how to apply these ideas in practice. The goal is to understand if, and how, we can answer questions like these:",CSCI2390,FALSE,TRUE,TRUE
brown-Fall-CSCI2420:,CSCI2420: Probabilistic Graphical Models,Brown,Fall 2016,http://cs.brown.edu/courses/csci2420,"Probabilistic graphical models provide a flexible framework for modeling large, complex, heterogeneous collections of random variables. After a brief introduction to their representational power, we provide a comprehensive survey of state-of-the-art methods for statistical learning and inference in graphical models.",CSCI2420,FALSE,TRUE,TRUE
brown-Spring-CSCI2520:,CSCI2520: Computational Geometry,Brown,Spring 2005,http://cs.brown.edu/courses/csci2520/home.html,"Algorithms and data structures for fundamental geometric problems in two and three dimensions. Topics include point location, range searching, convex hull, intersection, Voronoi diagrams and graph drawing. Applications to computer graphics, circuit layout, information visualization and computer-aided design are also discussed",CSCI2520,FALSE,TRUE,TRUE
brown-Spring-CSCI2530:,CSCI2530: Internet and Web Algorithms,Brown,Spring (Unknown),http://cs.brown.edu/courses/csci2530/,"Graduate course/seminar focuses on the mathematical foundations of algorithms for handling large amounts of data over networks. We'll read and discuss recent papers in information retrieval, search engines, link analysis, probabilistic modeling of the web and social networks, and more.",CSCI2530,FALSE,TRUE,FALSE
brown-Fall-CSCI2570:,CSCI2570: Introduction to Nanocomputing,Brown,Fall 2007,http://cs.brown.edu/courses/csci2570/slides.html,Nanoscale technologies employing materials whose smallest dimension is on the order of a few nanometers are expected to replace lithography in the design of chips. We introduce to computational nanotechnologies and explore problems presented by their stochastic nature. Nanotechnologies based on the use of DNA and semiconducting materials are explored.,CSCI2570,FALSE,TRUE,TRUE
brown-Spring-CSCI2820:,CSCI2820: Advanced Algorithms in Computational Biology and Medical Bioinformatics (Master's),Brown,Spring 2021,http://cs.brown.edu/courses/csci2820/,"Devoted to computational problems and methods in the emerging field of Medical Bioinformatics where genomics, computational biology and bioinformatics impact medical research. We will present challenging problems and solutions in three areas: Disease Associations, Protein Folding and Immunogenomics.",CSCI2820,FALSE,TRUE,TRUE
uiuc-Fall-CS107:,CS107: Data Science Discovery,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs107/fa2020/,"Data Science Discovery is the intersection of statistics, computation, and real-world relevance. As a project-driven course, students perform hands-on-analysis of real-world datasets to analyze and discover the impact of the data. Throughout each experience, students reflect on the social issues surrounding data analysis such as privacy and design",CS107,TRUE,TRUE,TRUE
uiuc-Fall-CS126:,CS126: Software Design Studio,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs126/fa2020/,"Fundamental principles and techniques of software development. Design, documentation, testing, and debugging software, with a significant emphasis on code review.",CS126,FALSE,FALSE,TRUE
uiuc-Fall-CS173:,CS173: Discrete Structures,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs173/fa2020/,"Discrete mathematical structures frequently encountered in the study of Computer Science. Sets, propositions, Boolean algebra, induction, recursion, relations, functions, and graphs.",CS173,FALSE,TRUE,TRUE
uiuc-Fall-CS225:,CS225: Data Structures,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs225/fa2020/,"Data abstractions: elementary data structures (lists, stacks, queues, and trees) and their implementation using an object-oriented programming language. Solutions to a variety of computational problems such as search on graphs and trees. Elementary analysis of algorithms.",CS225,TRUE,TRUE,TRUE
uiuc-Fall-CS240:,CS240: Introduction to Computer Systems,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs240/fa2020/,"Basics of computer systems. Number representations, assembly/machine language, abstract models of processors (fetch/execute, memory hierarchy), processes/process control, simple memory management, file I/O and directories, network programming, usage of cloud services.",CS240,TRUE,TRUE,TRUE
uiuc-Fall-CS241:,CS241: Systems Programming,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs241/fa2020/,"Basics of system programming, including POSIX processes, process control, inter-process communication, synchronization, signals, simple memory management, file I/O and directories, shell programming, socket network programming, RPC programming in distributed systems, basic security mechanisms, and standard tools for systems programming such as debugging tools.",CS241,FALSE,TRUE,TRUE
uiuc-Fall-CS265:,CS265: Innovation Illinois - From Accessible Design to Supercomputing Cultures,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs265/fa2020/,"For the duration of the course, we’ll work with various perspectives from different parts of our campus to imagine, research, and develop—via paper, multimedia, and code-based prototypes–future innovation ideas. We’ll be introduced to and get to experiment with mixed media resources and prototyping methods, spanning on- and off-line archives, digital editing, low and high-fidelity prototyping, and online data collection. We’ll also “visit” campus sites and speak to key figures related to Illinois’ world-changing interdisciplinary innovation histories and collaborations. Our work will culminate in a research project that surveys interdisciplinary practice on our campus, and explores innovation as a phenomenon that necessarily emerges from creative innovation cultures that cross the arts, humanities, social sciences, and computer science.",CS265,FALSE,TRUE,TRUE
uiuc-Fall-CS357:,CS357: Numerical Methods I,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs357/fa2020/,"Fundamentals of numerical methods for students in science and engineering; floating-point computation, systems of linear equations, approximation of functions and integrals, the single nonlinear equation, and the numerical solution of ordinary differential equations; various applications in science and engineering; programming exercises and use of high quality mathematical library routines",CS357,FALSE,TRUE,TRUE
uiuc-Fall-CS361:,CS361: Probability & Statistics for Computer Science,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs361/fa2020/,"Introduction to probability theory and statistics with applications to computer science. Topics include: visualizing datasets, summarizing data, basic descriptive statistics, conditional probability, independence, Bayes theorem, random variables, joint and conditional distributions, expectation, variance and covariance, central limit theorem. Markov inequality, Chebyshev inequality, law of large numbers, Markov chains, simulation, the PageRank algorithm, populations and sampling, sample mean, standard error, maximum likelihood estimation, Bayes estimation, hypothesis testing, confidence intervals, linear regression, principal component analysis, classification, and decision trees.",CS361,FALSE,TRUE,TRUE
uiuc-Fall-CS374:,CS374: Introduction to Algorithms & Models of Computation,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs374/fa2020/,"Analysis of algorithms, major paradigms of algorithm design including recursive algorithms, divide-and-conquer algorithms, dynamic programming, greedy algorithms, and graph algorithms. Formal models of computation including finite automata and Turing machines. Limitations of computation arising from fundamental notions of algorithm and from complexity-theoretic constraints. Reductions, undecidability and NP-completeness.",CS374,FALSE,TRUE,TRUE
uiuc-Fall-CS410:,CS410: Text Information Systems,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs410/fa2020/,"Theory, design, and implementation of text-based information systems. Text analysis, retrieval models (e.g., Boolean, vector space, probabilistic), text categorization, text filtering, clustering, retrieval system design and implementation, and applications to web information management",CS410,FALSE,TRUE,FALSE
uiuc-Fall-CS418:,CS418: Interactive Computer Graphics,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs418/fa2020/,"Basic mathematical tools and computational techniques for modeling, rendering, and animating 3-D scenes.",CS418,FALSE,TRUE,TRUE
uiuc-Fall-CS412:,CS412: Programming Languages & Compilers,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs421/fa2020/,"Structure of programming languages and their implementation. Basic language design principles; abstract data types; functional languages; type systems; object-oriented languages. Basics of lexing, parsing, syntax-directed translation, semantic analysis, and code generation.",CS412,TRUE,TRUE,FALSE
uiuc-Fall-CS424:,CS424: Real-Time Systems,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs424/fa2020/,"Supervisory control aspects of Cyber Physical Systems (CPS): fundamentals of reliability analysis, real-time scheduling, simple feedback control, software fault tolerance architecture, wireless networking and energy saving, principles of safety critical system engineering. Student groups design and demonstrate supervisory control architecture for a robot.",CS424,FALSE,TRUE,FALSE
uiuc-Fall-CS425:,CS425: Distributed Systems,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs425/fa2020/,"Protocols, specification techniques, global states and their determination, reliable broadcast, transactions and commitment, security, and real-time systems.",CS425,FALSE,TRUE,TRUE
uiuc-Fall-CS426:,CS426: Compiler Construction,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs426/fa2020/,"Compiler structure, syntax analysis, syntax-directed translation, automatically constructed recognizers, semantic analysis, code generation, intermediate language, optimization techniques",CS426,FALSE,TRUE,FALSE
uiuc-Fall-CS433:,CS433: Computer System Organization,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs433/fa2020/,"Computer hardware design and analysis and interface with software. Advanced processor design, including superscalar, out-of-order issue, branch prediction, and speculation. Memory hierarchy design, including advanced cache optimizations, main memory, and virtual memory. Principles of multiprocessor design, including shared-memory, cache coherence, synchronization, and consistency. Other advanced topics depending on time; e.g., GPUs and accelerators, warehouse computers and data centers, security.",CS433,FALSE,TRUE,TRUE
uiuc-Fall-CS438:,CS438: Communication Networks,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs438/fa2020/,"Layered architectures and the OSI Reference Model; design issues and protocols in the transport, network, and data link layers; architectures and control algorithms of local-area, point-to-point, and satellite networks; standards in networks access protocols; models of network interconnection; overview of networking and communication software.",CS438,TRUE,TRUE,FALSE
uiuc-Fall-CS439:,CS439: Wireless Networks,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs439/fa2020/,"Overview of wireless network architectures including cellular networks, local area networks, multi-hop wireless networks such as ad hoc networks, mesh networks, and sensor networks; capacity of wireless networks; medium access control, routing protocols, and transport protocols for wireless networks; mechanisms to improve performance and security in wireless networks; energy-efficient protocols for sensor networks.",CS439,FALSE,TRUE,FALSE
uiuc-Fall-CS440:,CS440: Artificial Intelligence,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs440/fa2020/,"Major topics in and directions of research in artificial intelligence: basic problem solving techniques, knowledge representation and computer inference, machine learning, natural language understanding, computer vision, robotics, and societal impacts.",CS440,TRUE,TRUE,TRUE
uiuc-Fall-CSS445:,CSS445: Computational Photography,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs445/fa2020/,"Computer vision techniques to enhance, manipulate, and create media from photo collections, such as panoramic stitching, face morphing, texture synthesis, blending, and 3D reconstruction.",CSS445,FALSE,TRUE,FALSE
uiuc-Fall-CS446:,CS446: Machine Learning,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs446/fa2020/,"Principles and applications of machine learning. Main paradigms and techniques, including discriminative and generative methods, reinforcement learning: linear regression, logistic regression, support vector machines, deep nets, structured methods, dimensionality reduction, k-means, Gaussian mixtures, expectation maximization, Markov decision processes, and Q-learning. Application areas such as natural language and text understanding, speech recognition, computer vision, data mining, and adaptive computer systems, among others.",CS446,FALSE,TRUE,TRUE
uiuc-Fall-CS447:,CS447: Natural Language Processing,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs447/fa2020/,"Part-of-speech tagging, parsing, semantic analysis and machine translation. Relevant linguistics concepts from morphology (word formation) and lexical semantics (the meaning of words) to syntax (sentence structure) and compositional semantics (the meaning of sentences).",CS447,FALSE,TRUE,FALSE
uiuc-Fall-CS450:,CS450: Numerical Analysis,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs450/fa2020/,"Linear system solvers, optimization techniques, interpolation and approximation of functions, solving systems of nonlinear equations, eigenvalue problems, least squares, and quadrature; numerical handling of ordinary and partial differential equations.",CS450,FALSE,TRUE,FALSE
uiuc-Fall-CS461:,CS461: Computer Security I,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs461/fa2020/,"Fundamental principles of computer and communications security and information assurance: ethics, privacy, notions of threat, vulnerabilities, and risk in systems, information warfare, malicious software, data secrecy and integrity issues, network security, trusted computing, mandatory and discretionary access controls, certification and accreditation of systems against security standards. Security mechanisms: authentication, auditing, intrusion detection, access control, cryptography, security protocols, key distribution.",CS461,FALSE,TRUE,FALSE
uiuc-Fall-CS466:,CS466: Introduction to Bioinformatics,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs466/fa2020/,"Algorithmic approaches in bioinformatics: (i) biological problems that can be solved computationally (e.g., discovering genes, and interactions among different genes and proteins); (ii) algorithmic techniques with wide applicability in solving these problems (e.g., dynamic programming and probabilistic methods); (iii) practical issues in translating the basic algorithmic ideas into accurate and efficient tools that biologists may use.",CS466,FALSE,TRUE,FALSE
uiuc-Fall-CS473:,CS473: Algorithms,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs473/fa2020/,"Design and analysis techniques, approximation algorithms, randomized algorithms and amortized analysis, and advanced topics such as network flow, linear programming, and dynamic data structures, among others.",CS473,FALSE,TRUE,TRUE
uiuc-Fall-CS483:,CS483: Applied Parallel Programming,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs483/fa2020/,"The aim of this course is to provide knowledge and hands-on experience in developing software for processors with massively parallel computing resources. In general, we refer to a processor as massively parallel if it has the hardware ability to allow more than 64 threads to make simultaneous progress.",CS483,FALSE,TRUE,TRUE
uiuc-Fall-CS419:,CS419: Scientific Visualization,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs519/fa2020/,"Visualization techniques useful in analysis of engineering and scientific data. Physical models; methods of computational science; two- and three-dimensional data types; visual representation schemes for scalar, vector, and tensor data; isosurface and volume visualization methods; visual monitoring; interactive steering",CS419,TRUE,TRUE,TRUE
uiuc-Fall-CS523:,CS523: Advanced Operating Systems,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs523/fa2020/,"Advanced concepts in operating system design and coverage of recent research directions. Resource management for parallel and distributed systems. Interaction between operating system design and computer architectures. Process management, virtual memory, interprocess communication, context switching, parallel and distributed file system designs, persistent objects, process and data migration, load balancing, security, protection.",CS523,FALSE,TRUE,TRUE
uiuc-Fall-CS524:,CS524: Concurrent Programming Languages,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs524/fa2020/,"Theory of concurrency and concurrent programming languages. Formal models of concurrent computation such as process algebras, nets, and actors; high level concurrent programming languages and their operational semantics; methods for reasoning about correctness and complexity of concurrent programs.",CS524,FALSE,TRUE,FALSE
uiuc-Fall-CS527:,CS527: Advanced Compiler Construction,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs527/fa2020/,"Incremental and interactive compiling, error correction, code optimization, models of code generators.",CS527,FALSE,TRUE,TRUE
uiuc-Fall-CS556:,CS556: Iterative & Multigrid Methods,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs556/fa2020/,"Comprehensive treatment of algebraic and multigrid iterative methods to solve systems of equations, primarily linear equations arising from discretization of partial differential equations.",CS556,FALSE,TRUE,FALSE
uiuc-Fall-CS563:,CS563: Advanced Computer Security,UIUC,Fall 2020,https://courses.physics.illinois.edu/cs563/fa2020/,"Current research trends in computer and network security. Privacy, tamper-resistance, unwanted traffic, monitoring and surveillance, and critical infrastructure protection. Subtopics will vary depending upon current research trends. Students work in teams in close coordination with the course instructor to develop one of the topics in depth by carrying out background research and an exploratory project.",CS563,FALSE,TRUE,FALSE
penn-Spring-CIS106,CIS106: Visualizing the Past,Penn,Spring 2021,https://www.seas.upenn.edu/~cis106,"Most people's information about the Past is drawn from coffee table picture books, popular movies, video games, documentaries about discoveries of ""ancient, mysterious, and lost"" civilizations, and tours often lead by guides of limited or even dubious credentials. How are these ideas presented, formed, and circulated? Who creates and selects the information presented in this diverse media? Are these presentations accurate? Do they promote or hurt scientific explanations? Can the artistic, aesthetic, and scientific realms be bridged to effectively promote and interpret the past? How can modern technologies be applied to do a better job at presenting what is difficult to experience firsthand? This class will focus on case studies, c and methods of how archaeology and the past are created, presented and used in movies, museums, games, the internet, and art.",CIS106,FALSE,FALSE,TRUE
penn-Spring-CIS110,CIS110: Introduction to Computer Programming,Penn,Spring 2021,https://www.seas.upenn.edu/~cis110,"Introduction to Computer Programming is the first course in our series introducing students to computer science. In this class you will learn the fundamentals of computer programming in Java, with emphasis on applications in science and engineering. You will also learn about the broader field of computer science and algorithmic thinking, the fundamental approach that computer scientists take to solving problems.",CIS110,FALSE,TRUE,TRUE
penn-Spring-CIS120,CIS120: Programming Languages and Techniques I,Penn,Spring 2021,https://www.seas.upenn.edu/~cis120,"A fast-paced introduction to the fundamental concepts of programming and software design. This course assumes some previous programming experience, at the level of a high school computer science class or CIS110.",CIS120,FALSE,TRUE,TRUE
penn-Spring-CIS189,CIS189: Solving Hard Problems in Practice,Penn,Spring 2021,https://www.seas.upenn.edu/~cis189,"What does Sudoku have in common with debugging, scheduling exams, and routing shipments? All of these problems are provably hard -- no one has a fast algorithm to solve them. But in reality, people are quickly solving these problems on a huge scale with clever systems and heuristics! In this course, we'll explore how researchers and organizations like Microsoft, Google, and NASA are solving these hard problems, and we'll get to use some of the tools they've built!",CIS189,FALSE,TRUE,TRUE
penn-Spring-CIS190,CIS190: C++ Programming,Penn,Spring 2021,https://www.seas.upenn.edu/~cis190,"This course will provide an introduction to programming in C++ and is intended for students who already have some exposure to programming in another language such as Java, C++ provides the programmer with a greater level of control over machine resources and are commonly used in situations where low level access or performance are important. This course will illuminate the issues associated with programming at this level and will cover issues such as explicit memory management, pointers, the compilation process and debugging.",CIS190,FALSE,TRUE,FALSE
penn-Spring-CIS192,CIS192: Python Programming,Penn,Spring 2021,https://cis192.github.io/,"Python is an elegant, concise, and powerful language that is useful for tasks large and small. Python has quickly become a popular language for getting things done efficiently in many in all domains: scripting, systems programming, research tools, and web development. This course will provide an introduction to this modern high-level language using hands-on experience through programming assignments and a collaborative final application development project.",CIS192,FALSE,TRUE,TRUE
penn-Spring-CIS193,CIS193: C# Programming,Penn,Spring 2021,https://www.seas.upenn.edu/~cis193,"C# is the premier programming language for the .NET framework. Over the last decade, the language has evolved to meet the needs of a variety of programming styles while supporting the ever-growing capabilities of the the .NET runtime and libraries. This course provides a thorough introduction to the C# language and the .NET framework, building on the skills gained in the introductory programming courses",CIS193,FALSE,TRUE,TRUE
penn-Spring-CIS194,CIS194: Haskell,Penn,Spring 2021,https://www.seas.upenn.edu/~cis194,"Haskell is a high-level, purely functional programming language with a strong static type system and elegant mathematical underpinnings. It is being increasingly used in industry by organizations such as Facebook, AT&T, and NASA, along with several financial firms. We will explore the joys of function programming, using Haskell as a vehicle. The aim of the course will be to allo you to use Haskell to easily and conveniently write practical programs.",CIS194,FALSE,TRUE,TRUE
penn-Spring-CIS195,CIS195: Mobile App Development,Penn,Spring 2021,https://www.seas.upenn.edu/~cis195/201617_tutorials.html,"This project-oriented course is centered around application development on current mobile platforms like iOS and Android. The first half of the course will involve fundamentals of mobile app development, where students learn about mobile app lifecycles, event-based programming, efficient resource management, and how to interact with the range of sensors available on modern mobile devices. In the second half of the course, students work in teams to conceptualize and develop a significant mobile application",CIS195,FALSE,TRUE,TRUE
penn-Spring-CIS196,CIS196: Ruby on Rails Web Development,Penn,Spring 2021,https://www.seas.upenn.edu/~cis196,"This course will teach the fundamentals of developing web applications using Ruby on Rails, a rapid-development web framework developed by Basecamp, and adopted by companies like Airbnb, GitHub, Bloomberg, CrunchBase, and Shopify. The first part of the course will focus on Ruby, the language that powers Rails. Along the way, students will also pick up essential skills such as git, bash, HTML and CSS. The second part will focus on Rails, the web framework and will include all topics required to develop and deploy production-ready modern web applications with Rails.",CIS196,FALSE,TRUE,FALSE
penn-Spring-CIS197,CIS197: JavaScript,Penn,Spring 2021,https://www.seas.upenn.edu/~cis197,"This course provides an introduction to modern web development frameworks, techniques, and practices used to deliver robust client side applications on the web. The emphasis will be on developing JavaScript programs that run in the browser. Topics covered include the JavaScript language, web browser internals, the Document Object Model (DOM), HTML5, client-side app architecture and compile-to-JS languages like (Coffeescript, TypeScript, etc.). This course is most useful for students who have some programming and web development experience and want to develop moderate JavaScript skills to be able to build complex, interactive applications in the browser.",CIS197,FALSE,TRUE,TRUE
penn-Spring-CIS262,"CIS262: Automata, Computability, and Complexity",Penn,Spring 2021,https://www.seas.upenn.edu/~cis262,"This course explores questions fundamental to computer science such as which problems cannot be solved by computers, can we formalize computing as a mathematical concept without relying upon the specifics of programming languages and computing platforms, and which problems can be solved efficiently. The topics include finite automata and regular languages, context-free grammars and pushdown automata, Turing machines and undecidability, tractability and NP-completeness.",CIS262,FALSE,TRUE,TRUE
penn-Spring-CIS277,CIS277: Introduction to Computer Graphics,Penn,Spring 2016,https://www.seas.upenn.edu/~cis277/current/,"This course covers the technical aspects of 3D Modeling including viewing transformations, polygon and mesh data structures, keyframe animation, and interactive manipulation. You will write a series program assignments in C++ that build up to a 3D game final project.",CIS277,FALSE,TRUE,FALSE
penn-Spring-CIS331,CIS331: Introduction to Networks and Security,Penn,Spring 2021,https://www.seas.upenn.edu/~cis331,"This course introduces principles and practices of computer and network security. We will cover basic concepts, threat models, and the security mindset; an introduction to cryptography and cryptographic protocols including encryption, authentication, message authentication codes, hash functions, public-key cryptography, and secure channels; an introduction to networks and network security including IP, TCP, routing, network protcols, web architecture, attacks, firewalls, and intrusion detection systems; an introduction to software security including defensive programming, memory protection, buffer overflows, and malware; and discuss broader issues and case studies such as privacy, security and the law, digital rights management, denial of service, and ethics.",CIS331,FALSE,TRUE,TRUE
penn-Spring-CIS341,CIS341: Compilers and Interpreters,Penn,Spring 2021,https://www.seas.upenn.edu/~cis341,"You know how to program, but do you know how to implement a programming language? In CIS341 you'll learn how to build a compiler. Topics covered include: lexical analysis, grammars and parsing, intermediate representations, syntax-directed translation, code generation, type checking, simple dataflow and control-flow analyses, and optimizations. Along the way, we study objects and inheritance, first-class functions (closures), data representation and runtime-support issues such as garbage collection.",CIS341,FALSE,TRUE,TRUE
penn-Spring-CIS371,CIS371: Computer Organization and Design,Penn,Spring 2021,https://www.seas.upenn.edu/~cis371,"This is the second computer organization course and focuses on computer hardware design. Topics covered are: (1) basic digital system design including finite state machines, (2) instruction set design and simple RISC assembly programming, (3) quantitative evaluation of computer performance, (4) circuits for integer and floating-point arithmatic, (5) datapath and control, (6) micro-programming, (7) pipeling, (8) storage hierarchy and virtual memory, (9) input/output, (10) different forms of parallelism including instruction level parallelism, data-level parallelism using both vectors and message-passing multi-processors, and thread-level parallelism using shared memory multiprocessors. Basic cache coherence and synchronization.",CIS371,FALSE,TRUE,FALSE
penn-Spring-CIS391,CIS391: Artificial Intelligence,Penn,Fall 2015,https://www.seas.upenn.edu/~cis391/,"Artificial Intelligence is considered from the point of view of a resource-limited knowledge-based agent who must reason and act in the world. Topics include search, knowledge representation and reasoning, probabilistic reasoning, machine learning, logic, automatic theorem proving, and natural language processing. Programming assignments in Python.",CIS391,FALSE,TRUE,TRUE
penn-Spring-CIS399,CIS399: The Science of Data Ethics,Penn,Spring 2021,https://www.seas.upenn.edu/~cis399,"This course is about the social and human problems that can arise from algorithms, AI and machine learning, and how we might design these technologies to be ""better behaved"" in the first place. It is first and foremost a science or engineering course, since we will be developing algorithm design principles. You can get a broad sense of course themes and topics by visiting the websites for the 2020 and 2019 offerings.",CIS399,FALSE,TRUE,TRUE
penn-Spring-CIS455,CIS455: Internet and Web Systems,Penn,Spring 2021,https://www.seas.upenn.edu/~cis455,"This course focuses on the challenges encountered in building Internet and web systems: scalability, interoperability (of data and code), security and fault tolerance, consistency models, and location of resources, services, and data.",CIS455,FALSE,TRUE,TRUE
penn-Spring-CIS460,CIS460: Interactive Computer Graphics,Penn,Spring 2021,https://www.seas.upenn.edu/~cis460,"This course focuses on programming the essential mathematical and geometric concepts underlying modern computer graphics. Using 3D interactive implementations, it covers fundamental topics such as mesh data structures, transformation sequences, rendering algorithms, and curve interpolation for animation.",CIS460,FALSE,TRUE,FALSE
penn-Spring-CIS471,CIS471: Computer Organization and Design,Penn,Spring 2021,https://www.seas.upenn.edu/~cis471,"This is the second computer organization course and focuses on computer hardware design. Topics covered are: (1) basic digital system design including finite state machines, (2) instruction set design and simple RISC assembly programming, (3) quantitative evaluation of computer performance, (4) circuits for integer and floating-point arithmatic, (5) datapath and control, (6) micro-programming, (7) pipeling, (8) storage hierarchy and virtual memory, (9) input/output, (10) different forms of parallelism including instruction level parallelism, data-level parallelism using both vectors and message-passing multi-processors, and thread-level parallelism using shared memory multiprocessors. Basic cache coherence and synchronization.",CIS471,FALSE,TRUE,FALSE
penn-Spring-CIS497,CIS497: Senior Capstone Project,Penn,Spring 2021,https://www.seas.upenn.edu/~cis497,"The goal of this course is to provide an opportunity to define, design, and execute a project of your own choosing. Evaluation is based on your ability to select an interesting topic, communicate your objectives in writing and presentations, to accurately gauge what resources are required to complete your chosen task, and your ability to execute your plan.",CIS497,FALSE,TRUE,FALSE
penn-Spring-CIS500,CIS500: Software Foundations,Penn,Spring 2021,https://www.seas.upenn.edu/~cis500,"This course introduces basic concepts and techniques in the foundational study of programming languages. The central theme is the view of programs and programming languages as mathematical objects for which precise claims may be made and proved. Particular topics include operational techniques for formal definition of language features, type systems and type safety properties, polymorphism, constructive logic, and the Coq proof assistant.",CIS500,FALSE,TRUE,TRUE
penn-Spring-CIS501,CIS501: Computer Architecture,Penn,Spring 2021,https://www.seas.upenn.edu/~cis501,"This course is an introductory graduate course on computer architecture with an emphasis on a quantitative approach to cost/performance design tradeoffs. The course covers the fundamentals of classical and modern uniprocessor design: performance and cost issues, instruction sets, pipelining, superscalar, out-of-order, and speculative execution mechanisms, caches, physical memory, virtual memory, and I/O. Other topics include: static scheduling, VLIW and EPIC, software speculation, long (SIMD) and short (multimedia) vector execution, multithreading, and an introduction to shared memory multiprocessors.",CIS501,FALSE,TRUE,FALSE
penn-Spring-CIS505,CIS505: Software Systems,Penn,Spring 2021,https://www.seas.upenn.edu/~cis505,"This course provides an introduction to fundamental concepts of distributed systems, and the design principles for building large scale computational systems. Topics covered include communication, concurrency, programming paradigms, naming, managing shared state, caching, synchronization, reaching agreement, fault tolerance, security, middleware, and distributed applications.",CIS505,FALSE,TRUE,FALSE
penn-Spring-CIS511,CIS511: Theory of Computation,Penn,Spring 2021,https://www.seas.upenn.edu/~cis511,"Review of regular and context-free languages and machine models. Turing machines and RAM models, Decidability, Halting problem, Reductions, Recursively enumerable sets, Universal TMs, Church/Turing thesis. Time and space complexity, hierarchy theorems, the complexity classes P, NP, PSPACE, L, NL, and co-NL",CIS511,FALSE,TRUE,TRUE
penn-Spring-CIS515,CIS515: Fundamentals of Linear Algebra & Computation,Penn,Spring 2021,https://www.seas.upenn.edu/~cis515,This course provides firm foundations in linear algebra and basic optimization techniques. Emphasis is placed on teaching methods and tools that are widely used in various areas of computer science. Both theoretical and algorithmic aspects will be discussed.,CIS515,FALSE,TRUE,TRUE
penn-Spring-CIS519,CIS519: Applied Machine Learning,Penn,Spring 2021,https://www.seas.upenn.edu/~cis519,"Machine learning has been essential to the success of many recent technologies, including autonomous vehicles, search engines, genomics, automated medical diagnosis, image recognition, and social network analysis, among many others. This course will introduce the fundamental concepts and algorithms that enable computers to learn from experience, with an emphasis on their practical application to real problems. This course will introduce supervised learning (decision trees, logistic regression, support vector machines, Bayesian methods, neural networks and deep learning), unsupervised learning (clustering, dimensionality reduction), and reinforcement learning. Additionally, the course will discuss evaluation methodology and recent applications of machine learning, including large scale learning for big data and network analysis.",CIS519,FALSE,TRUE,TRUE
penn-Spring-CIS520,CIS520: Machine Learning,Penn,Spring 2021,https://alliance.seas.upenn.edu/~cis520/dynamic/2020/wiki/index.php?n=Main.HomePage,"This course covers the foundations of statistical machine learning. The focus is on probabilistic and statistical methods for prediction and clustering in high dimensions. Topics covered include linear and logistic regression, SVMs, PCA and dimensionality reduction, EM and HMMs, and deep learning. Elementary probability, calculus, and linear algebra. Basic programming experience.",CIS520,FALSE,TRUE,TRUE
penn-Spring-CIS521,CIS521: Artificial Intelligence,Penn,Spring 2021,http://artificial-intelligence-class.org/lectures.html#now,"This course investigates algorithms to implement resource-limited knowledge-based agents which sense and act in the world. Topics include, search, machine learning, probabilistic reasoning, natural language processing, knowledge representation and logic. After a brief introduction to the language, programming assignments wil l be in Python.",CIS521,TRUE,TRUE,FALSE
penn-Spring-CIS522,CIS522: Deep Learning for Data Science,Penn,Spring 2021,https://www.seas.upenn.edu/~cis522,"Deep learning techniques now touch on data systems of all varieties. Sometimes, deep learning is a product; sometimes, deep learning optimizes a pipeline; sometimes, deep learning provides critical insights; sometimes, deep learning sheds light on neuroscience or vice versa. The purpose of this course is to deconstruct the hype by teaching deep learning theories, models, skills, and applications that are useful for applications.",CIS522,FALSE,TRUE,FALSE
penn-Spring-CIS545,CIS545: Big Data Analytics,Penn,Spring 2021,https://www.seas.upenn.edu/~cis545,"In the new era of big data, we are increasingly faced with the challenges of processing vast volumes of data. Given the limits of individual machines (compute power, memory, bandwidth), increasingly the solution is to process the data in parallel on many machines. This course focuses on the fundamentals of scaling computation to handle common data analytics tasks.",CIS545,TRUE,TRUE,TRUE
penn-Spring-CIS552,CIS552: Advanced Programming,Penn,Spring 2021,https://www.seas.upenn.edu/~cis552,"The goals of this course are twofold: (1) to take good programmers and turn them into excellent ones, and (2) to introduce them to a range of modern software engineering practices, in particular those embodied in advanced functional programming languages. Four courses involving significant programming and a discrete mathematics or modern algebra course.",CIS552,FALSE,TRUE,TRUE
penn-Spring-CIS553,CIS553: Networked Systems,Penn,Spring 2021,https://www.seas.upenn.edu/~cis553,"This course provides an introduction to fundamental concepts in the design and implementation of networked systems, their protocols, and applications. Topics to be covered include: Internet architecture, network applications, addressing, routing, transport protocols, network security, and peer-to-peer networks. The course will involve written assignments, examinations, and programming assignments.. Students will work in teams to design and implement networked systems in layers, from routing protocols, transport protocols, to peer-to-peer networks.",CIS553,FALSE,TRUE,TRUE
penn-Spring-CIS555,CIS555: Internet and Web Systems,Penn,Spring 2021,https://www.seas.upenn.edu/~cis555,"This course focuses on the challenges encountered in building Internet and web systems: scalability, interoperability (of data and code), security and fault tolerance, consistency models, and location of resources, services, and data.",CIS555,TRUE,TRUE,TRUE
penn-Spring-CIS556,CIS556: Cryptography,Penn,Spring 2021,https://www.seas.upenn.edu/~cis556,"This course is an introduction to cryptography, both theory and applications, intended for advanced undergraduates and graduate students. Topics covered include symmetric cryptography, message authentication, public-key cryptography, digital signatures, cryptanalysis, cryptographic security, and secure channels, as well as a selection of more advanced topics such as zero-knowledge proofs, secure multiparty computation, privacy-enhancing technologies, or lattice-based cryptography.",CIS556,FALSE,FALSE,TRUE
penn-Spring-CIS565,CIS565: GPU Programming and Architecture,Penn,Spring 2021,https://www.seas.upenn.edu/~cis565,"This course examines the architecture and capabilities of modern GPUs. The graphics processing unit (GPU) has grown in power over recent years, to the point where many computations can be performed faster on the GPU than on a traditional CPU. GPUs have also become programmable, allowing them to be used for a diverse set of applications far removed from traditional graphics settings.",CIS565,FALSE,TRUE,FALSE
penn-Spring-CIS568,CIS568: Game Design Practicum,Penn,Spring 2021,https://www.seas.upenn.edu/~cis568,The objective of the game design practicum is to provide students with hands on experience designing and developing 3D computer games.,CIS568,FALSE,FALSE,TRUE
penn-Spring-CIS571,CIS571: Computer Organization and Design,Penn,Spring 2021,https://www.seas.upenn.edu/~cis571,"This is the second computer organization course and focuses on computer hardware design. Topics covered are: (1) basic digital system design including finite state machines, (2) instruction set design and simple RISC assembly programming, (3) quantitative evaluation of computer performance, (4) circuits for integer and floating-point arithmatic, (5) datapath and control, (6) micro-programming, (7) pipeling, (8) storage hierarchy and virtual memory, (9) input/output, (10) different forms of parallelism including instruction level parallelism, data-level parallelism using both vectors and message-passing multi-processors, and thread-level parallelism using shared memory multiprocessors. Basic cache coherence and synchronization.",CIS571,FALSE,TRUE,FALSE
penn-Spring-CIS610,CIS610: Advanced Geometric Methods in Computer Science,Penn,Spring 2021,https://www.seas.upenn.edu/~cis610,"The purpose of this course is to present some of the advanced geometric methods used in geometric modeling, computer graphics, computer vision, etc.",CIS610,FALSE,TRUE,FALSE
penn-Spring-CIS620,CIS620: Advanced Topics in Machine Learning,Penn,Spring 2021,https://www.seas.upenn.edu/~cis620,"This course covers a variety of advanced topics in machine learning, such as the following: statistical learning theory (statistical consistency properties of surrogate loss minimizing algorithms); approximate inference in probabilistic graphical models (variational inference methods and sampling-based inference methods); structured prediction (algorithms and theory for supervised learning problems involving complex/structured labels); and online learning in complex/structured domains.",CIS620,FALSE,FALSE,TRUE
tufts-Spring-COMP,COMP7 - Bioinformatics,Tufts,Fall 2019,http://www.cs.tufts.edu/comp/7,"This course is designed to introduce future biological scientists and physicians to bioinformatics tools, analysis methods, ""systems thinking,"" and simple computer scripting. Upon completion of the course, students should be more comfortable working with the vast amounts of biomedical information that will be relevant to their work in the coming decades.",COMP,FALSE,FALSE,TRUE
tufts-Spring-COMP,COMP9 - Exploring Computer Science,Tufts,Spring 2011,http://www.cs.tufts.edu/comp/9,The goals of this course are: to have students gain an appreciation of the areas that make up modern computer science; to understand that computers have limitations; to have a working command of the Ruby programming language such that they could approach a repetitive task programmatically rather than tediously; to develop problem-solving skills and computational thinking.,COMP,FALSE,TRUE,TRUE
tufts-Spring-COMP15,COMP15: Data Structures,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/15,"A second course in computer science. Data structures and algorithms are studied through major programming projects in the C++ programming language. Topics include linked lists, trees, graphs, dynamic storage allocation, and recursion.",COMP15,TRUE,TRUE,TRUE
tufts-Spring-COMP23,COMP23: Game Design,Tufts,Spring 2021,http://tuftsdev.github.io/GameDevelopment/,"Principles, design, and development of games. Game structure, engineering, physics, testing, 2D and 3D rendering, user interfaces, sound, and animation. Security of online games. Applications of Economics, Music, and Psychology in crafting games. Projects include writing game design documents, developing an interactive fiction game, and building a functional game in a team.",COMP23,FALSE,TRUE,FALSE
tufts-Spring-COMP40,COMP40: Machine Structure & Asssembly-Language Programming,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/40,"In COMP 40, you will learn about both high-level programming design principles and the low-level structure of computing machines. Design strategies will focus on modularity, abstraction, and separation of interface from implementation. The following topics on machine structure are covered: memory, caches, registers, machine arithmetic, and bitwise operations. We will also investigate the structure of assembly code, relocatable object code, binary machine code, and the translations between them. You will gain a deep understanding of all of these concepts via large-scale, realistic programming projects.",COMP40,FALSE,TRUE,FALSE
tufts-Spring-COMP50,COMP50: Problem Solving by Computer,Tufts,Fall 2013,http://www.cs.tufts.edu/comp/50,"COMP 50 is a course in problem-solving by computer, where you will learn to solve problems ``starting from a blank page.'' The course is open to any student who is motivated to work hard, regardless of background. ``Starting from a blank page'' means that you have some opportunity to design a solution from scratch, as opposed to starting with a design or incomplete software prepared by the course staff.",COMP50,FALSE,TRUE,TRUE
tufts-Spring-COMP61,COMP61: Discrete Mathematics,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/61,"Sets, relations and functions, logic and methods of proof, combinatorics, graphs and digraphs.",COMP61,FALSE,TRUE,FALSE
tufts-Spring-COMP103,COMP103: Introduction to VLSI Design,Tufts,Fall 2003,http://www.cs.tufts.edu/comp/103,"This course focuses on the basics of designing VLSI circuits and modules.  The topics covered are:  characteristics of NMOS and PMOS transistors and CMOS inverters, designing combinational and sequential logic in CMOS, basic design principals that consider timing and interconnect, memory and array structures and overviews of current design practices.",COMP103,FALSE,TRUE,TRUE
tufts-Spring-COMP112,COMP112: Networks and Protocols,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/112,"Design and implementation of computer communication networks, protocols, and applications, with an emphasis on the Internet protocol suite. Network architectures and programming interfaces. Data link, transport, and routing protocols. Congestion sources and remedies. Addressing and naming in local area and wide area networks. Network security and network management.",COMP112,FALSE,TRUE,FALSE
tufts-Spring-COMP115,COMP115: Database Systems,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/115,"Fundamental concepts of database management systems. Topics include: data models (relational, object-oriented, and others); the SQL query language; implementation techniques of database management systems (storage and index structures, concurrency control, recovery, and query processing); management of unstructured and semistructured data; and scientific data collections.",COMP115,FALSE,TRUE,TRUE
tufts-Spring-COMP116,COMP116: Computer System Security,Tufts,Spring 2021,https://comp116.org/,A systems perspective on host-based and network-based computer security. Current vulnerabilities and measures for protecting hosts and networks. Firewalls and intrusion detection systems. Principles illustrated through hands-on programming projects.,COMP116,FALSE,TRUE,TRUE
tufts-Spring-COMP117,COMP117: Internet-scale Distributed Systems,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/117,"We will introduce and draw comparisons with more traditional distributed system designs, including distributed objects, client/server, pub/sub, reliable queuing, etc. We will also study a few (easily understood) research papers and some of the core specifications of the Web. Specific topics to be covered include: global uniform naming; location-independence; layering and leaky abstractions; end-to-end arguments and decentralized innovation; Metcalfe's law and network effects; extensibility and evolution of distributed systems; declarative vs. procedural languages; Postel's law; caching; and HTML/XML/JSON document-based computing vs. RPC.",COMP117,FALSE,TRUE,TRUE
tufts-Spring-COMP118,COMP118: Cloud Computing,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/118,"Cloud computing fundamentals, including cloud architecture, scalability, elasticity, and metrics of cloud performance including service-level objectives (SLOs) and service-level agreements (SLAs). Cloud programming models and abstractions including Map/Reduce. Persistent storage mechanisms, including key/value stores and cold storage. Geo-distributed cloud systems. Cloud networking, including data center architecture, software defined networking, and middleboxes. Cloud security.",COMP118,FALSE,TRUE,FALSE
tufts-Spring-COMP120,COMP120: Web Programming and Engineering,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/120,"Web applications as complex systems that deliver a plethora of functionality to a large number of users, and exhibit unique behaviors and demands in terms of performance, scalability, usability, and security. How the web works, limitations of client-side and server-side technologies including frameworks and APIs, content optimization, and data persistence and storage. Projects will involve search, using the cloud infrastructure, location-based services, mobile web development, and using tools to assess the security and privacy of web applications.",COMP120,FALSE,TRUE,TRUE
tufts-Spring-COMP121,COMP121: Software Engineering,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/121,"Software engineering is an engineered discipline in which the aim is the production of software products, delivered on time and within a set budget, that satisfies the client’s needs. It covers all aspects of software production ranging from the early stage of product concept to design and implementation to post-delivery maintenance.",COMP121,FALSE,TRUE,TRUE
tufts-Spring-COMP131,COMP131: Artificial Intelligence,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/131,"History, theory, and computational methods of artificial intelligence. Basic concepts include representation of knowledge and computational methods for reasoning. One or two application areas will be studied, to be selected from expert systems, robotics, computer vision, natural language understanding, and planning.",COMP131,FALSE,TRUE,FALSE
tufts-Spring-COMP135,COMP135: Introduction to Machine Learning,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/135,"An overview of methods whereby computers can learn from data or experience and make decisions accordingly. Topics include supervised learning, unsupervised learning, reinforcement learning, and knowledge extraction from large databases with applications to science, engineering, and medicine.",COMP135,FALSE,TRUE,TRUE
tufts-Spring-COMP136,COMP136: Statistical Pattern Recognition,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/136,"This course provides the theoretical and computational foundations for probabilistic machine learning. The focus is on probabilistic models, which are especially useful for any application where observed data could be noisy, sometimes missing, or not available in large quantities. We emphasize representing uncertainty with formal distributions and trying to average over these distributions when making decisions (as done in the Bayesian approach).",COMP136,FALSE,TRUE,TRUE
tufts-Spring-COMP139,"COMP139: Ethics for AI, Robotics, and Human-Robot Interaction",Tufts,Spring 2021,http://www.cs.tufts.edu/comp/139,"This course will provide an overview of the ethical problems and challenges prompted by current and future technological advances in AI, robotics, and human-robot interaction. It will start by reviewing the philosophical foundations of the main ethical theories (virtue ethics, deontology, utilitarianism) and link them to different algorithmic approaches in artificial agents (rule-based, utility-based, behavior-based, etc.).  Explicating and contrasting the assumptions underlying each algorithmic approach (e.g., policy-based decision-making vs. rule-based reasoning), functional tradeoffs and implications for autonomous robots and AI systems will be discussed.",COMP139,FALSE,TRUE,FALSE
tufts-Spring-COMP140,COMP140: Advanced Computer Architecture,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/140,"Fundamentals of Computer Architecture, and the Current State of Computer, Hardware, The Processor: Instruction Set Principles, The Processor: Building a Data Path, Instruction Pipelining: Data and Control Hazards, Exploiting Memory Hierarchy: Caches, Virtual Memory, Data-Level Parallelism (Vector, SIMD, and GPU architectures), and Building a MIPS simulator.",COMP140,FALSE,TRUE,TRUE
tufts-Spring-COMP160,COMP160: Algorithms,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/160,"Introduction to the study of algorithms. Strategies such as divide-and-conquer, greedy methods, and dynamic programming. Graph algorithms, sorting, searching, integer arithmetic, hashing, and NP-complete problems.",COMP160,FALSE,TRUE,FALSE
tufts-Spring-COMP163,COMP163: Computational Geography,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/163,"Design and analysis of algorithms for geometric problems. Topics include proof of lower bounds, convex hulls, searching and point location, plane sweep and arrangements of lines, Voronoi diagrams, intersection problems, decomposition and partitioning, farthest-pairs and closest-pairs, rectilinear computational geometry.",COMP163,FALSE,TRUE,TRUE
tufts-Spring-COMP167,COMP167: Introduction to Computational Biology,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/167,"Comprehend the biological background, nature, and relevance of computational problems in molecular biology. Assess the efficiency of computational methods for handling data-rich problems in the field. Understand computational techniques and probabilistic models for working effectively with large data sets. Discuss and evaluate tradeoffs involved in choosing how to tackle hard computational problems.",COMP167,FALSE,TRUE,FALSE
tufts-Spring-COMP170,COMP170: Computation Theory,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/170,"Models of computation: Turing machines, pushdown automata, and finite automata. Grammars and formal languages including context-free languages and regular sets. Important problems including the halting problem and language equivalence theorems.",COMP170,FALSE,FALSE,TRUE
tufts-Spring-COMP175,COMP175: Graphics,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/175,"This course explores the fundamentals of computer graphics, including 3D rendering via ray casting, ray tracing and radiosity, viewing transformations, 3D shape representation, and an introduction to modeling and computer animation. Assignments and projects require a good working knowledge of linear algebra and the C and C++ programming languages.",COMP175,FALSE,TRUE,TRUE
tufts-Spring-COMP177,COMP177: Data Visualization,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/177,N/A,COMP177,FALSE,TRUE,TRUE
tufts-Spring-COMP189,COMP189: The Engineering Method of Technical Writing,Tufts,Spring 2021,http://www.cs.tufts.edu/comp/189,"The techniques taught in this class have been developed through many years' research, primarily at the University of Chicago and at Stony Brook University. With these techniques, you will produce texts that readers like better, and you will produce them more quickly, more consistently, and with less effort than you do now. And by the end of the class, you will be ready to make your own decisions about what further techniques you wish to master in the future.",COMP189,FALSE,FALSE,TRUE
cornell-Spring-CS1100,CS1100: Introduction to Computing Using Python,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs1110/2021sp/schedule/,"Programming and problem solving using Python. Emphasizes principles of software development, style, and testing. Topics include procedures and functions, iteration, recusion, arrays and vectors, strings, an operational model of procedure and function calls, algorithms, exceptions, object-oriented programming, and GUIs (graphical user interfaces). Weekly labs provide guided practice on the computer, with staff present to help. Assignments use graphics and GUIs to help develop fluency and understanding.",CS1100,FALSE,TRUE,TRUE
cornell-Spring-CS1112,CS1112: Introduction to Computing Using MATLAB,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs1112,"Programming and problem solving using MATLAB. Emphasizes the systematic development of algorithms and programs. Topics include iteration, functions, arrays, recursion, object-oriented programming, and MATLAB graphics. Assignments are designed to build an appreciation for complexity, dimension, fuzzy data, inexact arithmetic, randomness, simulation, and the role of approximation.",CS1112,FALSE,TRUE,TRUE
cornell-Spring-CS1114,CS1114: Introduction to Computing using Matlab and Robotics,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs1114,This is an honors course that teaches basic programming concepts to students using two robot platforms: the Sony Aibo and the Wowwee Rovio.,CS1114,FALSE,TRUE,TRUE
cornell-Spring-CS/INF,CS/INFO 1305: Computation & Culture in the Digital Age,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs1305,"Computing and information science is relevant to many aspects of our lives, from explorations in science and medicine, the arts, to commerce and entertainment. This course explores some ideas and technologies of computing and information science as well as their role in society from the ethical, legal, historical, and cultural perspectives. Students are introduced to the user-centered development life cycle for web site design with a focus on critique and usability testing.",CS/INF,FALSE,TRUE,TRUE
cornell-Spring-CS1340,CS1340: Choices and Consequences in Computing,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs1340,"As this is an area in which the pace of technological development raises new challenges on a regular basis, the broader goal of the course is to enable students to develop their own analyses of new situations as they emerge at the interface of computing and societal interests.",CS1340,FALSE,TRUE,FALSE
cornell-Spring-CS1380,CS1380: Data Science for All,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs1380,"This course provides an introduction to data science. Given data from economics, medicine, biology, or physics, collected from internet denizens, survey respondents, or wireless sensors, how can one understand the phenomenon generating the data, make predictions, and improve decisions?",CS1380,FALSE,TRUE,FALSE
cornell-Spring-CS2022,CS2022: Introduction to C,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs2022,"This course provides a brief introduction to the C programming language and standard libraries for students with programming experience at the CS1110 level. We will cover basic syntax, programming paradigm, standard libraries, and debugging for C on the GNU/Linux platform.",CS2022,FALSE,TRUE,TRUE
cornell-Spring-CS2026,CS2026: Introduction to C#,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs2026,"The primary goal of this course is to introduce the C# programming language. Some of the C# features are already found in existing languages, while others are unique to C#. We will focus mainly on the new features in C# with respect to C++ and Java.",CS2026,FALSE,TRUE,TRUE
cornell-Spring-CS2042,CS2042: Unix Tools,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs2042,"An introduction to Unix, emphasizing tools for file management, communication, process control, managing your Unix environment, and rudimentary shell scripts. Knowledge of at least one programming lanugauge is encouraged. Assignments assume no previous knowledge of Unix or expertise in any particular language..",CS2042,FALSE,TRUE,TRUE
cornell-Spring-CS2044,CS2044: Advanced Unix Tools,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs2044,"A focus on GNU Linux/Unix as a programming environment for people with a basic knowledge of Linux/Unix and experience programming in at least one language. Projects cover advanced shell scripts (bash) Makefiles, and more modern scripting languages such as Perl and Python. Students with little or no experience with Unix should take CS 2042 first.",CS2044,FALSE,FALSE,TRUE
cornell-Spring-CS2046,CS2046: Introduction to Mobile Application Development,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs2046,"A rapid introduction to developing applications for mobile platforms, using the Android platform. Covers mobile user interface design, methods for storing and retrieving information, Internet communication, multimedia and mobile security. Aimed at students with moderate Java experience, at least at the level of CS 2110.",CS2046,FALSE,TRUE,TRUE
cornell-Spring-CS2049,CS2049: Intermediate iPhone Development,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs2049,"The course covers intermediate topics in iOS development with a hands-on approach. During each lecture students develop an application along with the lecturer. Covered topic include AVFoundation (audio and video framework, including video capture), SpriteKit, CoreMotion, Auto-Layout, and multi-threaded application development.",CS2049,FALSE,TRUE,FALSE
cornell-Spring-CS2112,CS2112: Object-Oriented Design and Data Structures (Honors),Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs2112,"Topics are similar to those in CS 2110 but are covered in greater depth, with more challenging assignments. Topics include object-oriented programming, program structure and organization, program reasoning using specifications and invariants, recursion, design patterns, concurrent programming, graphical user interfaces, data structures as in CS 2110, sorting and graph algorithms, asymptotic complexity, and simple algorithm analysis. Java is the principal programming language.",CS2112,FALSE,TRUE,TRUE
cornell-Spring-CS2802,CS2802: Discrete Structures (Honors),Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs2802,"Covers the mathematics that underlies most of computer science. Topics include mathematical induction; logical proof; propositional and predicate calculus; combinatorics and discrete mathematics; some basic elements of basic probability theory; basic number theory; sets, functions, and relations; graphs; and finite-state machines. These topics are discussed in the context of applications to many areas of computer science, such as the RSA cryptosystem and web searching.",CS2802,FALSE,TRUE,TRUE
cornell-Spring-CS3110,CS3110: Data Structures and Functional Programming,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs3110/2021sp/textbook/,"Advanced programming course that emphasizes functional programming techniques and data structures. Programming topics include recursive and higher-order procedures, models of programming language evaluation and compilation, type systems, and polymorphism. Data structures and algorithms covered include graph algorithms, balanced trees, memory heaps, and garbage collection. Also covers techniques for analyzing program performance and correctness.",CS3110,FALSE,TRUE,FALSE
cornell-Spring-CS3152,CS3152: Introduction to Computer Game Architecture,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs3152,"A project-based course in which programmers and designers collaborate to make a computer game. This course investigates the theory and practice of developing computer games from a blend of technical, aesthetic, and cultural perspectives. Technical aspects of game architecture include software engineering, artificial intelligence, game physics, computer graphics, and networking. Aesthetic and cultural include art and modeling, sound and music, game balance, and player experience.",CS3152,FALSE,TRUE,TRUE
cornell-Spring-CS3220,CS3220: Computational Mathematics for Computer Science,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs3220,"Introduction to computational mathematics covering topics in (numerical) linear algebra, statistics, and optimization. Topics included are those of particular relevance to upper-division computer science courses in machine learning, numerical analysis, graphics, vision, robotics, and more. An emphasis is placed both on understanding core mathematical concepts and introducing associated computational methodologies.",CS3220,FALSE,FALSE,TRUE
cornell-Spring-CS3420,CS3420: Embedded Systems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs3420,"An introduction to the design of embedded systems, with an emphasis on understanding the interaction between hardware, software, and the physical world. Topics covered include assembly language programming, interrupts, I/O, concurrency management, scheduling, resource management, and real-time constraints.",CS3420,FALSE,TRUE,FALSE
cornell-Spring-CS3810,CS3810: Introduction to Theory of Computing,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs3810,"CS 3810 is an introduction to the modern theory of computing: Automata theory, formal languages, and effective computability.",CS3810,FALSE,TRUE,TRUE
cornell-Spring-CS4110,CS4110: Programming Languages and Logics,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4110,"An introduction to the theory, design, and implementation of programming languages. Topics include operational semantics, type systems, higher-order functions, scope, lambda calculus, laziness, exceptions, side effects, continuations, objects, and modules. Also discussed are logic programming, concurrency, and distributed programming.",CS4110,FALSE,TRUE,FALSE
cornell-Spring-CS4120,CS4120: Introduction to Compilers,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4120,"An introduction to the specification and implementation of modern compilers. Topics covered include lexical scanning, parsing, type checking, code generation and translation, an introduction to program analysis and optimization, and compile-time and run-time support for modern programming languages. As part of the course, students will build a working compiler for an object-oriented language.",CS4120,FALSE,TRUE,TRUE
cornell-Spring-CS4121,CS4121: Practicum in Compilers,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4121,Students will build a working compiler for an object-oriented language.,CS4121,FALSE,TRUE,TRUE
cornell-Spring-CS4152,CS4152: Advanced Topics in Computer Game Architecture,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4152,"Project-based follow-up course to CS 3152. Students work in a multidisciplinary team to develop a game that incorporates innovative game technology. Advanced topics include 3D game development, mobile platforms, multiplayer gaming, and nontraditional input devices. There is a special emphasis on developing games that can be submitted to festivals and competitions.",CS4152,FALSE,TRUE,TRUE
cornell-Spring-CS4160,CS4160: Formal Verification,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4160,"An introduction to formal verification, focusing on correctness of functional and imperative programs relative to mathematical specifications. Topics include computer-assisted theorem proving, logic, programming language semantics, and verification of algorithms and data structures. Assignments involve extensive use of a proof assistant to develop and check proofs.",CS4160,FALSE,TRUE,TRUE
cornell-Spring-CS4220,CS4220: Numerical Analysis: Linear and Nonlinear Problems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4220,"Introduction to the fundamentals of numerical analysis: error analysis, approximation, interpolation, numerical integration. In the second half of the course, the above are used to build approximate solvers for ordinary and partial differential equations. Strong emphasis is placed on understanding the advantages, disadvantages, and limits of applicability for all the covered techniques. Computer programming is required to test the theoretical concepts throughout the course.",CS4220,FALSE,TRUE,FALSE
cornell-Spring-CS4320,CS4320: Introduction to Database Systems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4320,"Introduction to modern database and data storage systems. Concepts covered include data models, query languages, database designs, storage structures, access methods, query processing and optimization, transaction management, and recovery in both relational and nonrelation data storage systems.",CS4320,TRUE,TRUE,FALSE
cornell-Spring-CS4321,CS4321: Practicum in Database Systems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4321,Students build part of a database system in Java.,CS4321,FALSE,TRUE,FALSE
cornell-Spring-CS4410,CS4410: Operating Systems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4410,"Introduction to the design of systems programs, with emphasis on multiprogrammed operating systems. Topics include concurrency, synchronization, deadlocks, memory management, protection, input-output methods, networking, file systems and security. The impact of network and distributed computing environments on operating systems is also discussed.",CS4410,FALSE,TRUE,TRUE
cornell-Spring-CS4411,CS4411: Practicum in Operating Systems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4411,"Studies the practical aspects of operating systems through the design and implementation of an operating system kernel that supports multiprogramming, virtual memory, and various input-output devices. All the programming for the project is in a high-level language.",CS4411,FALSE,TRUE,FALSE
cornell-Spring-CS4414,CS4414: Systems Programming,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4414,"CS 4414 exposes students to programming applications at the systems level and to the operating-systems abstractions that these applications depend on. Students learn to make design choices guided by performance, hardware, security and other systems properties. Operating systems abstractions covered include process and memory management, file systems and storage, networking, threads and multiprocess concurrency along with synchronization abstractions including locks and condition variables, and security abstractions for isolation and authorization.",CS4414,FALSE,TRUE,TRUE
cornell-Spring-CS4420,CS4420: Computer Architecture,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4420,This course aims to provide a strong foundation for students to understand modern computer system architecture and to apply these insights and principles to future computer designs,CS4420,FALSE,TRUE,FALSE
cornell-Spring-CS4450,CS4450: Introduction to Computer Networks,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4450,"This course introduces the basic architectural and design principles of computer networking including the design of communication protocols, congestion control, routing and switching, Internet, data center networks and wireless networks.",CS4450,FALSE,TRUE,FALSE
cornell-Spring-CS4620,CS4620: Introduction to Computer Graphics,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4620,"Introduction to the principles of computer graphics in two and three dimensions.  Topics include digital images, filtering and antialiasing, 2-D and 3-D affine geometry, ray tracing, perspective and 3-D viewing, the graphics pipeline, curves and surfaces, and human visual perception. This course emphasizes fundamental techniques in graphics, with both written and practical assignments.  May be taken with or without concurrent enrollment in CS 4621.",CS4620,FALSE,TRUE,TRUE
cornell-Spring-CS4564,CS4564: Design in Virtual Reality,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4654,"This class has been organized as a design studio with collaboration between architectural designers and computer graphics majors. A significant amount of reading in multiple disciplines (visual perception, digital photography, modeling, geometry capture, color science, display technology & computer graphics) will be required.",CS4564,FALSE,TRUE,FALSE
cornell-Spring-CS4701,CS4701: Practicum in Artificial Intelligence,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4701,"Topics include knowledge representation systems, search procedures, game-playing, automated reasoning, concept learning, reinforcement learning, neural nets, genetics algorithms, planning, and truth maintenance.",CS4701,FALSE,FALSE,TRUE
cornell-Spring-CS4732,CS4732: Ethical and Social Issues in AI,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4732,"We will consider social and ethical issues in AI, including some subset the following: potential job losses in AI; the ethics of computer making decisions on our behalf (perhaps using machine learning)' ethical issues involving robots, autonomous cars, and drones; and privacy and surveillance.  The course will run for 7-8 weeks.  Most weeks, there will be an initial one-hour lecture (typically offered by a specialist in some area), followed by a discussion session with the speaker.",CS4732,FALSE,TRUE,FALSE
cornell-Spring-CS4750,CS4750: Foundations of Robotics,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4750,Robotics is interdisciplinary and draws inspiration from many different fields towards solving a variety of tasks in real-world environments using physical systems. This course is a challenging introduction to basic computational concepts used broadly in robotics.,CS4750,FALSE,TRUE,FALSE
cornell-Spring-CS4758/6758,CS4758/6758: Robot Learning,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4758,"We study the problem of how a robot can learn to perceive its world well enough to act in it, to make reliable plans, and to learn from its own experience. The focus will be on algorithms and machine learning techniques for autonomous operation of robots.",CS4758/6758,FALSE,TRUE,TRUE
cornell-Spring-CS4786,CS4786: Machine Learning for Data Science,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4786,"An introduction to machine learning for data-science applications. Topics include dimensionality-reduction (such as principal components analysis, canonical correlation analysis, and random projection); clustering (such as k-means and single-link); probabilistic modeling (such as mixture models and the EM algorithm).",CS4786,TRUE,TRUE,FALSE
cornell-Spring-CS4787,CS4787: Principles of Large-Scale Machine Learning Systems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4787,"An introduction to the mathematical and algorithms design principles and tradeoffs that underlie large-scale machine learning on big training sets. Topics include: stochastic gradient descent and other scalable optimization methods, mini-batch training, accelerated methods, adaptive learning rates, parallel and distributed training, and quantization and model compression.",CS4787,FALSE,TRUE,FALSE
cornell-Spring-CS4810,CS4810: Introduction to Theory of Computing,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4810,"Introduction to the modern theory of computing: automata theory, formal languages, and effective computability.",CS4810,FALSE,FALSE,TRUE
cornell-Spring-CSS4812,CSS4812: Quantum Information Processing,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4812,"This course is intended for physicists, unfamiliar with computational complexity theory or cryptography, and for computer scientists and mathematicians with prior exposure to quantum mechanics. Topics include: simple quantum algorithms, error correction, cryptography, teleportation, and uses of quantum computing devices either currently available or to be available in the near future.",CSS4812,FALSE,TRUE,FALSE
cornell-Spring-CS4814,CS4814: Introduction to Computational Complexity,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4814,"Explores the power and limitations of efficient computation. Understanding how the notion of efficient computation changes with respect to resources such as time, space, randomness, advice, and interaction. Concrete computational models that we will study will include Turing machines, Boolean circuits, Decision trees, and Branching Programs. Advanced topics may include error-correcting codes, probabilistic checkable proofs, and circuit lower bounds.",CS4814,FALSE,TRUE,FALSE
cornell-Spring-CSS4820,CSS4820: Introduction to Analysis of Algorithms,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4820,"Develops techniques used in the design and analysis of algorithms, with an emphasis on problems arising in computing applications. Example applications are drawn from systems and networks, artificial intelligence, computer vision, data mining, and computational biology.",CSS4820,FALSE,TRUE,FALSE
cornell-Spring-CS4860,CS4860: Applied Logic,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs4860,"Topics chosen from the following: Propositional Logic, First-Order Logic, and Higher Order logic, both classical and intuitionistic versions, including completeness, incompleteness and compactness results. Natural deduction and tableaux style logics and connection to  the lambda calculus and programming languages and logics, and program verification.",CS4860,FALSE,TRUE,FALSE
cornell-Spring-CS5120,CS5120: Introduction to Compilers,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5120,"An introduction to the specification and implementation of modern compilers. Topics covered include lexical scanning, parsing, type checking, code generation and translation, an introduction to program analysis and optimization, and compile-time and run-time support for modern programming languages. As part of the course, students will build a working compiler for an object-oriented language.",CS5120,FALSE,TRUE,TRUE
cornell-Spring-CS5121,CS5121: Practicum in Compilers,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5121,Students will build a working compiler for an object-oriented language.,CS5121,FALSE,TRUE,TRUE
cornell-Spring-CS5142,CS5142: Scripting Languages,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5142,"Perl, PHP, JavaScript, VisualBasic -- they are often-requested skills for employment, but most of us do not have the time to find out what they are all about. In this course, you learn how to use scripting languages for rapid prototyping, web programming, data processing, and application extension. Besides covering traditional programming languages concepts as they apply to scripting (e.g., dynamic typing and scoping), this course looks at new concepts rarely found in traditional languages (e.g., string interpolation, hashes, and polylingual code). Through a series of small projects, you use different languages to achieve programming tasks that highlight the strengths and weaknesses of scripting. As a side effect, you practice teaching yourself new languages.",CS5142,FALSE,TRUE,TRUE
cornell-Spring-CS5150,CS5150: Software Engineering,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5150,"Introduction to the practical problems of specifying, designing, building, testing, and delivering reliable software systems. Special topics include professionalism, project management, and the legal framework for software development. As a central part of the course, student teams carry out projects for real clients, using concepts of agile software development. Each project includes all aspects of software development from a feasibility study to final delivery.”",CS5150,TRUE,TRUE,FALSE
cornell-Spring-CS5152,CS5152: Open-Source Software Engineering,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5152,"Students will collaborate with mentors from industry to learn how to become a part of the open-source community and contribute to open-source projects, with students actively committing to open-source projects throughout the semester. Lectures, in addition to discussing open-source processes and tools, will teach students how to be proactive members of larger systems, such as teams, projects, companies, and society at large, by delving into topics from psychology, sociology, business, economics, gender studies, ethnic studies, writing, speaking, and ethics.",CS5152,FALSE,TRUE,FALSE
cornell-Spring-CS5154,CS5154: Software Testing,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5154,"Software testing is a widely used approach for detecting flaws in software. Systematic and organized approaches to software testing will be covered, including test adequacy criteria, manual and automatic generation of test inputs, regression testing, debugging, and dynamic analyses for detecting known classes of software errors.",CS5154,FALSE,TRUE,FALSE
cornell-Spring-CS5220,CS5220: Applications of Parallel Computers,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5220,"Models for parallel programming and survey of parallel machines. Existing parallel programming languages, vectorizing compilers, and parallel libraries and toolboxes.",CS5220,FALSE,TRUE,TRUE
cornell-Spring-CS5223,CS5223: Numerical Analysis: Linear and Nonlinear Problems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5223,"Scientists, engineers, mathematicians, and computer scientists use models to describe everything from the ringing of bells to the evolution of animal populations to the relationships between web pages. We turn to computers to help us analyze all but the simplest such models; but how can an inherently discrete device such as a computer solve continuous problems quickly and reliably? This is the fundamental question we address in CS 4220: Numerical Analysis: Linear and Nonlinear Problems.",CS5223,FALSE,TRUE,TRUE
cornell-Spring-CS5320,CS5320: Introduction to Database Systems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5320,"Introduction to modern database and data storage systems. Concepts covered include data models, query languages, database design, storage structures, access methods, query processing and optimization, transaction management, and recovery in both relational and nonrelational data storage systems.",CS5320,TRUE,TRUE,FALSE
cornell-Spring-CS5321,CS5321: Practicum in Database Systems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5321,Students build part of a real database system in C++ Java.,CS5321,FALSE,TRUE,FALSE
cornell-Spring-CS5356,CS5356: Building Startup Systems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5356,"This course aims to bridge the gap between academic studies of computer science and production software engineering. The course provides a fast-paced introduction to key tools and techniques that can facilitate the building of prototypes and of actual working systems. It introduces technologies for building Web applications and mobile applications, systems for effective storage of data, and tools that support and ease code writing, such as distributed version-control systems, editors and debuggers.",CS5356,FALSE,TRUE,TRUE
cornell-Spring-CS5412,CS5412: Cloud Computing,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5412,"Focuses on cloud computing, large-scale Internet applications, and other practical issues in designing and implementing trustworthy, scalable distributed software.",CS5412,FALSE,TRUE,FALSE
cornell-Spring-CS5413,CS5413: High Performance Systems and Networking,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5413,This is a graduate-level course targeting Masters and PhD students. This course broadly examines high performance systems and networks. It especially covers systems and networks built from low cost commodity components like modern datacenters that provide platforms for cloud and other online services.,CS5413,FALSE,TRUE,TRUE
cornell-Spring-CS5430,CS5430: System Security,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5430,"Discusses security and survivability for computers and communications networks. Includes discussions of policy issues (e.g., the national debates on cryptography policy) as well as discussions of the technical alternatives for implementing the properties that comprise “trustworthiness” in a computing system. Covers mechanisms for authorization and authentication as well as cryptographic protocols.",CS5430,FALSE,TRUE,FALSE
cornell-Spring-CS5432,CS5432: Advanced System Security,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5432,"This course is concerned with system security solutions that build on ideas from logic, programming languages, and distributed systems. Topics include: information-flow policies and enforcement (static and dynamic), authorization logics, measured principals, distributed trust, and moving-target defenses. Some homework assignments could involve programming.",CS5432,FALSE,TRUE,TRUE
cornell-Spring-CS5434,CS5434: Defending Computer Networks,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5434,"In this course, we discuss attacks on operational computer networks, with a focus on how to prevent them or detect them if we fail to prevent them.",CS5434,FALSE,TRUE,TRUE
cornell-Spring-CS5437,CS5437: Principals and Practice of Cryptocurrencies,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5437,"An introduction to the theoretical concepts and practical concerns of cybercurrencies. Topics include hashing, cryptographic signatures, peer to peer networks, distributed consensus with proof of work, and the security and privacy of cyber-currencies. Also discussed are Bitcoin’s use and ecosystem, digital currency history, economy and legal aspects.",CS5437,FALSE,TRUE,FALSE
cornell-Spring-CS5438,CS5438: Security and Privacy: Practice and Case Studies,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5438,"This course surveys computer security and digital privacy from a practical perspective. Topics include computer attacks and defenses, current practices and policies in industry and government, security and privacy entrepreneurship, laws and regulations, ""cyberwarfare,"" surveillance, and economics of security.",CS5438,FALSE,TRUE,FALSE
cornell-Spring-CS5620,CS5620: Introduction to Computer Graphics,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5620,"Introduction to the principles of computer graphics in two and three dimensions. Topics include digital images, filtering and antialiasing, 2-D and 3-D affine geometry, ray tracing, perspective and 3-D viewing, the graphics pipeline, curves and surfaces, and human visual perception. Homework assignments require some Java programming.",CS5620,FALSE,TRUE,TRUE
cornell-Spring-CS5621,CS5621: Computer Graphics Practicum,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5621,Provides CS 4620 students with hands-on experience in computer graphics programming on modern graphics hardware. This course emphasizes effective use of graphics APIs and the architecture of graphics applications.  A final project involves building a substantial interactive graphics system.  The course uses Javascript and WebGL for code development.,CS5621,FALSE,TRUE,TRUE
cornell-Spring-CS5643,CS5643: Physically Based Animation for Computer Graphics,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5643,"Modern computer animation and interactive digital entertainment are making increasingly sophisticated use of tools from scientific and engineering computing. This course introduces students to common physically based modeling techniques for animation of virtual characters, fluids and gases, rigid and deformable solids, and other systems. Aspects of interactive simulation and multi-sensory feedback will also be discussed.  A hands-on programming approach will be taken, with an emphasis on small interactive computer programs.",CS5643,FALSE,TRUE,FALSE
cornell-Spring-CS5650,CS5650: Virtual and Augmented Reality,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5650,Offered in New York City at Cornell Tech. Intermediate programming ability in C# or other object-oriented lagnuages. Familiarity with 3D game engines or strong desire to learn basic linear algebra.,CS5650,FALSE,FALSE,TRUE
cornell-Spring-CS5670,CS5670: Introduction to Computer Vision,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5670,"An in-depth introduction to computer vision. The goal of computer vision is to compute properties of our world-the 3D shape of an environment, the motion of objects, the names of people or things-through analysis of digital images or videos.  The course covers a range of topics, including 3D reconstruction, image segmentation, object recognition, and vision algorithms from the Internet, as well as key algorithmic, optimization, and machine learning techniques, such as graph cuts, non-linear least squares, and deep learning.",CS5670,FALSE,TRUE,TRUE
cornell-Spring-CS5678,CS5678: Topics in Mixed Reality,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5678,"Head-worn mixed reality devices require real-time computer vision for multiple purposes, such as motion tracking, scene understanding, and interaction input. This course presents a hands-on overview of these computer vision techniques for mixed reality, from monocular pose estimation to stereo-view hand tracking, and scene reconstruction with depth sensors and multiple cameras.",CS5678,FALSE,FALSE,TRUE
cornell-Spring-CS5740,CS5740: Natural Language Processing,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5740,"This course constitutes an introduction to natural language processing (NLP), the goal of which is to enable computers to use human languages as input, output, or both. NLP is at the heart of many of today’s most exciting technological achievements, including machine translation, automatic conversational assistants and Internet search.",CS5740,FALSE,TRUE,FALSE
cornell-Spring-CS5831,CS5831: Security Protocols and Privacy,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5831,"This course covers advanced security and privacy protocols. Topics include basic key-exchange protocols, Internet Security Protocols (e.g., SSL/TLS), Oblivious RAM, Secure Two-party Computation, Voting protocols, and methods for data sanitization (i.e., how to ensure that publicly released data does not violate individuals’ privacy).",CS5831,FALSE,TRUE,FALSE
cornell-Spring-CS5846,CS5846: Decision Theory I,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs5846,"Research on decision theory resides in a variety of disciplines including computer science, economics, game theory, philosophy, and psychology. This course attempts to integrate these various approaches. The course is taught jointly by faculty from Game Theory and Computer Science.",CS5846,TRUE,TRUE,TRUE
cornell-Spring-CS6112,CS6112: Foundations of Concurrency,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6112,"CS 6112 provides an introduction to the theoretical foundations of languages for concurrent programming. It presents general models (e.g., CSP, CCS, pi-calculus), their associated reasoning techniques, and topics such as coordination, fault-tolerance, mobility, security, and scalability. The course material will draw on both classic and recent papers. Although it is primarily aimed at graduate students in Computer Science, students from other fields and well-prepared undergraduates are welcome with the permission of the instructor.",CS6112,FALSE,TRUE,FALSE
cornell-Spring-CS6113,CS6113: Language-Based Security,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6113,"An exploration of methods for using programming languages and language semantics to enforce security. We will read recent papers on a variety of topics, including language-based authorization, enforcement of both confidentiality and integrity using type systems for controlling information flow, quantitative security measures, secure distributed computing, and methods for incorporating and checking uses of cryptography.",CS6113,FALSE,TRUE,FALSE
cornell-Spring-CS6115,CS6115: Certified Software Systems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6115,"In recent years, it has become practical to build large software systems using formal proof assistants. Examples of such certified systems include the seL4 microkernel, the CompCert C compiler, the Vellvm LLVM compiler, and the Bedrock library. This course provides a hands-on introduction to programming using the Coq proof assistant. Assessment is based on participation and a substantial course project.",CS6115,FALSE,TRUE,TRUE
cornell-Spring-CS6117,CS6117: Category Theory for Computer Sciences,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6117,"An introduction to category theory, with a focus on material with established applications to computer science and programming languages, in particular. The course emphasizes developing comfort with abstraction and instantiation.",CS6117,FALSE,TRUE,TRUE
cornell-Spring-CS6118,CS6118: Types and Semantics,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6118,"Types and Semantics is about designing and understand programming languages, whether they be domain specific or general purpose. The goal of this class is to provide a variety of tools for designing custom (programming) languages for whatever task is at hand. Part of that will be a variety of insights on how languages work along with experiences from working with academics and industry on creating new languages such as Ceylon and Kotlin. The class focuses on types and semantics and the interplay between them.",CS6118,FALSE,TRUE,FALSE
cornell-Spring-CS6120,CS6120: Advanced Compilers,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6120,"This is a hands-on course about implementing programming languages. It covers intermediate representations, classic optimization, runtime systems, and more advanced techniques such as parallelization, just-in-time compilation, and garbage collection. Course work consists of reading and discussing both classic and modern research papers and implementation projects based on the LLVM compiler infrastructure.",CS6120,TRUE,TRUE,TRUE
cornell-Spring-CS6156,CS6156: Runtime Verification,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6156,"Runtime Verification (RV) is a lightweight formal method for checking program executions against specifications. Foundations, algorithms, and tools for major approaches to RV will be covered, including monitor synthesis, specification languages, parametric monitoring, monitorability, instrumentation, and static analysis for reducing RV overhead. Students will become familiar with recent research results and challenges in RV, gain experience with RV tools, and conduct a research project.",CS6156,FALSE,TRUE,TRUE
cornell-Spring-CS6180,CS6180: Introduction to Constructive Type Theory,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6180,"Constructive type theory is the mathematical foundation for modern proof assistants, which are software systems used to help verify the correctness of programs and mathematical proofs. Proof assistants are also used in teaching advanced programming and are essential tools in the study of formal methods.",CS6180,FALSE,TRUE,FALSE
cornell-Spring-CS6210,CS6210: Matrix Computations,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6210,"Stable and efficient algorithms for linear equations, least squares, and eigenvalue problems. Direct and iterative methods are considered. Numerical programming is used extensively.",CS6210,FALSE,TRUE,TRUE
cornell-Spring-CS6241,CS6241: Numerical Methods for Data Science,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6241,"A discussion of numerical methods in the context of data analysis, machine learning, and network science problems. The course will focus on matrix and tensor decompositions, numerical algorithms for graph data, least squares, regression, and iterative methods.",CS6241,FALSE,TRUE,FALSE
cornell-Spring-CS6410,CS6410: Advanced Systems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6410,"Advanced course in systems, emphasizing contemporary research in distributed systems. Topics may include communication protocols, consistency in distributed systems, faulttolerance, knowledge and knowledge-based protocols, performance, scheduling, concurrency control, and authentication and security issues.",CS6410,FALSE,TRUE,TRUE
cornell-Spring-CS6411,CS6411: Systems Principles,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6411,"The design of computer systems is driven by a small number of principles that are leveraged to achieve both functionality and performance. These principles, and the key techniques used to instantiate them, are the subject of this course. We will study them both in isolation and in the context of systems in which they have been applied.",CS6411,FALSE,TRUE,FALSE
cornell-Spring-CS6432,CS6432: Distributed Consensus and Blockchains,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6432,"Distributed consensus protocols have been widely adopted in replicated databases and decentralized cryptocurrencies. In this course, we will explore how to design formally secure protocols that allow nodes to reach consensus in a distributed system. Both classical consensus and modern blockchains will be discussed.",CS6432,FALSE,TRUE,FALSE
cornell-Spring-CS6450,CS6450: Advanced Computer Networking,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6450,"This course explores state-of-the-art network architectures and protocols through a review of recent research literature, discussions during lectures and class projects. Students will complete a semester-long research project based on one of the topics covered in the class.",CS6450,FALSE,TRUE,FALSE
cornell-Spring-CS6453,CS6453: Big Data Systems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6453,"This course introduces the critical technology trends, the state-of-the-art systems, and the key challenges that make the big data era exciting, both from academic and industrial perspective. The course will focus on providing both breadth and depth in big data systems.",CS6453,FALSE,TRUE,FALSE
cornell-Spring-CS6464,CS6464: Advanced Distributed Storage Systems,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6464,"This course broadly examines distributed storage systems in its many manifestations. It explores how to harness and maintain the collective storage capabilities in storage systems from global-scale enterprises and cloud computing to peer-to-peer, ad hoc, and home networks. It teaches abstractions, design and implementation techniques that allow students to build the kind of scalable high performance distributed systems that can deal with real-world workload.",CS6464,FALSE,TRUE,TRUE
cornell-Spring-CS6465,CS6465: Emerging Cloud Technologies and Systems Challenges,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6465,"This course explores new trends in cloud computing systems, with a focus on understanding the research challenges that will arise as we use cloud computing to solve challenging new problems. The class will center on a mix of readings, discussion, and individualized research activities.",CS6465,FALSE,TRUE,FALSE
cornell-Spring-CS6480,CS6480: Systems Software and Formal Methods,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6480,"This is a graduate course on systems software and formal methods. The increasing complexity and scale of software systems has led to significant challenges for their reliability, performance, manageability, and security. Examples of such systems include entire operating systems, file systems, databases, networks, distributed systems, device drivers, and so on.",CS6480,FALSE,TRUE,FALSE
cornell-Spring-CS6630,CS6630: Realistic Image Synthesis,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6630,"CS6630 is an introduction to physics-based rendering at the graduate level. Starting from the fundamentals of light transport we will look at formulations of the Rendering Equation, and a series of Monte Carlo methods, from sequential sampling to multiple importance sampling to Markov Chains, for solving the equation to make pictures. We'll look at light reflection from surfaces and scattering in volumes, illumination from luminaires and environments, and diffusion models for translucent materials. We will build working implementations of many of the algorithms we study, and learn how to make sure they are actually working correctly. It's fun to watch integrals and probability distributions transform into photographs of a slightly too perfect synthetic world.",CS6630,FALSE,TRUE,TRUE
cornell-Spring-CS6640,CS6640: Computational Photography,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6640,"From Courses of Study: A course on the emerging applications of computation in photography. Likely topics include digital photography, unconventional cameras and optics, light field cameras, image processing for photography, techniques for combining multiple images, advanced image editing algorithms, and projector-camera systems. Course work includes implementing several algorithms and a final project.",CS6640,FALSE,TRUE,TRUE
cornell-Spring-CS6650,CS6650: Computational Motion,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6650,"Covers computational aspects of motion, broadly construed. Topics include the computer representation, modeling, analysis, and simulation of motion, and its relationship to various areas, including computational geometry, mesh generation, physical simulation, computer animation, robotics, biology, computer vision, acoustics, and spatio-temporal databases. Students implement several of the algorithms covered in the course and complete a final project.  This offering will also explore the special role of motion processing in physically based sound rendering.",CS6650,FALSE,TRUE,FALSE
cornell-Spring-CS6670,CS6670: Computer Vision,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6670,"This course will introduce the core problems of computer vision and discuss both classical approaches based on the geometry and physics of image formation as well as current approaches based on recent advances in deep learning. Topics include stereopsis and 3D reconstruction, optical flow, image segmentation, object recognition, feature representations of images and patches, and convolutional networks.",CS6670,FALSE,TRUE,TRUE
cornell-Spring-CS6700,CS6700: Advanced Artificial Intelligence,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6700,"Covers a variety of areas in AI, including knowledge representation, automated reasoning, learning, game-playing, and planning, with an emphasis on computational issues.",CS6700,FALSE,TRUE,FALSE
cornell-Spring-CS6702,CS6702: Topics in Computational Sustainability,Cornell,Spring 2021,https://www.cs.cornell.edu/courses/cs6702,The main goal of the course is to identify interesting computational research questions concerning sustainability problems and more generally we hope the course will provide additional insights towards the understanding of the boundaries and central methodologies in Computational Sustainability.,CS6702,FALSE,TRUE,FALSE
waterloo-Spring-CS100,CS100: Introduction to Computing through Applications,Waterloo,Spring 2021,https://student.cs.uwaterloo.ca/~cs100,"Using personal computers as effective problem solving tools for the present and the future. Effective use of spreadsheets to process, manipulate, and visualize numeric and textual information. Introduction to computer and network organization, digital information, HTML, and CSS. Algorithms underlying the functional components of web search engines and their influence on data access.",CS100,TRUE,TRUE,FALSE
waterloo-Winter-CS106,CS106: Introduction to Computer Science 2,Waterloo,Winter 2021,https://student.cs.uwaterloo.ca/~cs106,"The course explores the use of graphics in art, design and visualization contexts. It is a required course for students in the Global Business and Digital Arts program.",CS106,FALSE,TRUE,TRUE
waterloo-Fall-CS133,CS133: Developing Programming Principles,Waterloo,Fall 2007,https://student.cs.uwaterloo.ca/~cs133/,"Fundamental concepts of computer programming and computer science, how to write small object-oriented programs in Java, and an introduction to graphical user interface (GUI) components.",CS133,FALSE,TRUE,FALSE
waterloo-Spring-CS135,CS135: Designing Functional Programs,Waterloo,Spring 2021,https://student.cs.uwaterloo.ca/~cs135,"CS 135 is for students who would prefer a more conceptual treatment of introductory computer science in a simple language that is educationally effective but not commercially relevant. While the course is designed to be taken by those with no prior programming experience, students with prior experience will also find it relevant, due to its unusual focus. It is suitable for both CS majors and non-majors.",CS135,FALSE,TRUE,FALSE
waterloo-Spring-CS136,CS136: Elementary Algorithm Design and Data Abstraction,Waterloo,Spring 2021,https://student.cs.uwaterloo.ca/~cs136/,"This course builds on the techniques and patterns learned in CS 135 while making the transition to use of an imperative language. It introduces the design and analysis of algorithms, the management of information, and the programming mechanisms and methodologies required in implementations.",CS136,FALSE,TRUE,FALSE
waterloo-Spring-CS200,CS200: Concepts for Advanced Computer Usage,Waterloo,Spring 2021,https://student.cs.uwaterloo.ca/~cs200,Important concepts underlying major personal computer application categories; methodologies for learning and evaluating software; operating system and hardware design from the user's point of view with implications for maintaining a personal computer. Students are encouraged to use their own personal computer for assignments.,CS200,FALSE,TRUE,FALSE
waterloo-Spring-CS240,CS240: Data Structures and Data Management,Waterloo,Spring 2021,https://student.cs.uwaterloo.ca/~cs240,"The course introduces widely used and effective methods of data organization, focusing on data structures, algorithms, and the performance of these algorithms. Specific topics include priority queues, sorting, dictionaries, data structures for text processing.",CS240,FALSE,TRUE,TRUE
waterloo-Spring-CS247,CS247: Software Engineering Principles,Waterloo,Spring 2021,https://student.cs.uwaterloo.ca/~cs247,"This course introduces systematic methods for designing, coding, testing, and documenting medium-sized programs. Major topics include abstraction, modularity, software modeling, object-oriented programming and design, generic programming, and testing and debugging.",CS247,TRUE,TRUE,TRUE
waterloo-Spring-CS341,CS341: Algorithms,Waterloo,Spring 2021,https://student.cs.uwaterloo.ca/~cs341,"The main focus is to learn basic techniques to the design and analysis of efficient algorithms through the study of various classical algorithms. Towards the end, we will also study the notion of NP-completeness and prove that many natural problems are ""hard"" using polynomial time reductions. The specific topics include:",CS341,FALSE,TRUE,TRUE
waterloo-Spring-CS349,CS349: User Interfaces,Waterloo,Spring 2021,https://student.cs.uwaterloo.ca/~cs349,"This course teaches the principles of creating user interfaces (UIs) including underlying UI architecture and algorithms, how to implement UIs from scratch and using UI frameworks, theories and methods for UI design, and an introduction to the field of human-computer interaction.",CS349,FALSE,TRUE,TRUE
waterloo-Spring-CS350,CS350: Operating Systems,Waterloo,Spring 2021,https://student.cs.uwaterloo.ca/~cs350,"An introduction to the fundamentals of operating system function, design, and implementation. Topics include concurrency, synchronization, processes, threads, scheduling, memory management, file systems, device management, and security.",CS350,FALSE,TRUE,TRUE
waterloo-Winter-CS431,CS431: Data-Intensive Distributed Computing,Waterloo,Winter 2021,https://student.cs.uwaterloo.ca/~cs431,"This course provides an introduction to data-intensive distributed computing. Our focus is algorithm design and ""thinking at scale"": we will cover data mining and machine learning techniques as applied to text, graphs, and relational data. Most of the course will be taught in a combination of MapReduce and Spark, two representative dataflow abstractions for large-scale data analysis, although we will introduce alternative abstractions such as bulk-synchronous parallel and streaming models as well.",CS431,FALSE,TRUE,TRUE
waterloo-Winter-CS442,CS442: Principles of Programming Languages,Waterloo,Winter 2021,https://student.cs.uwaterloo.ca/~cs442,"CS442 is rightly named: The principles of programming languages. This course covers the ideas underpinning programming languages, by covering the formal, mathematical model behind programming languages as calculi, and then discussing many programming language paradigms, and how these paradigms affect both the formal semantics and the implementation of language interpreters, compilers, and virtual machines.",CS442,TRUE,TRUE,TRUE
waterloo-Winter-CS446,CS446: Software Design and Architecture,Waterloo,Winter 2017,https://student.cs.uwaterloo.ca/~cs446/1171/,"SE2: Software Design and Architecture is the second course of the three software engineering capstone project courses, offered jointly by the David R. Cheriton School of Computer Science and the Department of Electrical and Computer Engineering at the University of Waterloo.",CS446,FALSE,TRUE,TRUE
waterloo-Winter-CS448,CS448: Database Systems Implementation,Waterloo,Winter 2012,https://student.cs.uwaterloo.ca/~cs448,"This is a second course on databases that focuses on DBMS internals. It is a project-oriented course that will provide the students, upon successful completion, with an appreciation of the intricacies and complexities of a DBMS and enable them to be able to design and implement the major components of it. The course objective will be achieved by focusing on three fundamental sub-objectives:",CS448,FALSE,TRUE,TRUE
waterloo-Spring-CS449,CS449: Human-Computer Interaction,Waterloo,Spring 2019,https://student.cs.uwaterloo.ca/~cs449,Human-Computer Interaction teaches the fundamental issues that underlie the creation and evaluation of usable and useful computational artifacts.,CS449,FALSE,TRUE,TRUE
waterloo-Winter-CS452,CS452: Real-time Programming,Waterloo,Winter 2020,https://student.cs.uwaterloo.ca/~cs452,"The course presents tools and techniques for real-time programming, including system support for real-time applications and calibrating interfaces to hardware. One part of the course is writing a small, real-time-capable operating system that runs on stand-alone computers and provides a low-level interface to control electric trains. The other part is concerned with implementing a control application for the trains.",CS452,FALSE,TRUE,TRUE
waterloo-Fall-CS466,CS466: Design and Analysis of Algorithms,Waterloo,Fall 2019,https://student.cs.uwaterloo.ca/~cs466,"Advanced design and analysis of algorithms. Topics include: amortized analysis, randomized algorithms, lower bounds, approximation algorithms, and on-line algorithms.",CS466,FALSE,TRUE,TRUE
waterloo-Fall-CS472,CS472: Numerical Solution of Large Sparse Systems of Equations,Waterloo,Fall 2007,https://student.cs.uwaterloo.ca/~cs472,"In many domains, large linear systems must routinely be solved.  For instance, in many branches of engineering and physics, partial differential equations are often approximated by large linear systems;  in machine learning, least square linear regression also leads to large linear systems; in computational vision, image denoising can also be formulated as a linear system; in decision-theoretic planning, policy iteration algorithms for Markov decision processes require the solution of a series of linear systems.",CS472,FALSE,TRUE,TRUE
waterloo-Spring-CS475,CS475: Computational Linear Algebra,Waterloo,Spring 2016,https://student.cs.uwaterloo.ca/~cs475,"Numerical linear algebra is a basic part of many problems in scientific computation. This course provides an overview of algorithms and numerical linear algebra techniques to solve common problems that arise in many areas such as image processing, search engines, natural language processing, computational finance, aircraft design and artificial intelligence. The course is structured around four major topics:",CS475,FALSE,TRUE,TRUE
waterloo-Winter-CS485,CS485: Machine Learning,Waterloo,Winter 2016,https://student.cs.uwaterloo.ca/~cs485,"Computers are traditionally programmed by listing a set of instructions that dictate the operation of the machine step by step.  As a result, machines tend to have a predetermined and rigid behaviour.  However, in many situations it would be desirable to endow machines with the ability to adapt and learn.  This course provides an introduction to the field of machine learning, which studies the principles and algorithms that allow a computer to learn new concepts from some examples.  The course will cover both the theoretical foundations of machine learning as well as the design of algorithms for machine learning.",CS485,FALSE,TRUE,TRUE
waterloo-Spring-CS488,CS488: Introduction to Computer Graphics,Waterloo,Spring 2021,https://student.cs.uwaterloo.ca/~cs488,"Welcome to the home page for CS488/688, the introductory computer graphics course in the School of Computer Science at the University of Waterloo. This course focuses on 3D graphics, although it does discuss some aspects of user interface design.",CS488,FALSE,FALSE,TRUE
waterloo-Winter-CS489,CS489: Big Data Infrastructure,Waterloo,Winter 2016,http://lintool.github.io/bigdata-2016w/index.html,"This course provides an introduction to big data infrastructure for analytics. The focus is algorithm design and ""thinking at scale"": we will cover data mining and machine learning techniques as applied to text, graphs, and relational data. Most of the course will be taught in a combination of MapReduce and Spark, two representative dataflow abstractions for large-scale data analysis, although we will introduce alternative abstractions such as bulk-synchronous parallel and streaming models as well.",CS489,FALSE,TRUE,TRUE
waterloo-Winter-CS492,CS492: Social Implications of Computing,Waterloo,Winter 2021,https://student.cs.uwaterloo.ca/~cs492,"Technology Change and Social Impact, The Internet and how it changes communication, Personal identity, security and computer technology, The impact of computers on work environments, and Electronic Commerce.",CS492,FALSE,TRUE,FALSE
waterloo-Fall-CS497,CS497: Frontiers in Computer Science,Waterloo,Fall 2007,https://student.cs.uwaterloo.ca/~cs497,"CS 497 is a course that is temporarily offered to CS major students. In some cases, a course might only be available one time, for example, to take advantage of a visiting professor's expertise. At other times, a course will be offered experimentally until it is determined whether the course should become part of the regular course offerings.",CS497,FALSE,TRUE,TRUE
waterloo-Winter-CS682,CS682: Computational Techniques in Biological Sequence Analysis,Waterloo,Winter 2020,https://student.cs.uwaterloo.ca/~cs682,"Computer science principles and algorithms in biological sequence analysis. Topics include algorithms for sequence comparison, for large-scale database search in biological databases, for evolutionary tree reconstruction, for identifying important features in DNA and RNA sequences, for protein sequence identification and underlying computational techniques.",CS682,FALSE,TRUE,TRUE
waterloo-Fall-CS745,CS745: Computer-Aided Verification,Waterloo,Fall 2009,https://student.cs.uwaterloo.ca/~cs745,"This course introduces the theory and practice of computer-aided verification for the design and analysis of digital systems (i.e., hardware and software systems). It emphasizes formal methods techniques, i.e., techniques based on logical reasoning and mathematical modelling, which are gradually being incorporated into CASE and CAD tools. These techniques have been used to find subtle, critical logic and safety errors in industrial hardware and software systems.",CS745,FALSE,TRUE,FALSE
waterloo-Fall-CS774,CS774: Advanced Computational Finance,Waterloo,Fall 2009,https://student.cs.uwaterloo.ca/~cs774,"This course will cover such topics as: Monte Carlo methods, lattice methods, and numerical PDE (Partial Differential Equation) techniques for pricing and hedging options. Methods for valuing exotic options (Asian, Parisian, barrier, and shout) will be presented. Particular attention will be paid to models which more accurately represent real markets: jump processes, regime switching, the effect of trading price impact and transaction costs, and optimal decision making. This will lead us to a discussion of algorithms for partial integro differential equations, and optimal stochastic control (dynamic programming, Hamilton Jacobi Bellman equations).",CS774,FALSE,TRUE,FALSE
waterloo-Fall-CS798,CS798: Software Foundations,Waterloo,Fall 2018,https://student.cs.uwaterloo.ca/~cs798,"The goal of this book, and our goal, is to study topics in functional programming, logic, semantics, and type theory using the proof assistant Coq.",CS798,FALSE,TRUE,TRUE
yale-Spring-CS112,CS112: Introduction to Computer Programming,Yale,Spring 2020,https://cs112.cs.yale.edu/2020A/,"CS 112: Introduction to Computer Programming is the first course in our series introducing students to computer science. In this class you will learn the fundamentals of computer programming in Java, with emphasis on applications in science and engineering. You will also learn about the broader field of computer science and algorithmic thinking, the fundamental approach that computer scientists take to solving problems.",CS112,FALSE,TRUE,FALSE
yale-Spring-CS421,CS421: Compilers and Interpreters,Yale,Spring 2021,http://www.cs.yale.edu/homes/soule/cpsc421/,"This course focuses on the design and implementation of compilers. Topics covered include the structure of one-pass and multiple-pass compilers; symbol table management; lexical analysis; traditional and automated parsing techniques; syntax-directed translation and semantic analysis; run-time storage management; intermediate code generation; introduction to optimization; and code generation. This course requires a substantial, semester-long programming project implementing a functional compiler that includes lexical and syntactic analyzers, a type checker, and a code generator.",CS421,FALSE,FALSE,TRUE
yale-Fall-CS430,CS430: Formal Semantics,Yale,Fall 2013,http://flint.cs.yale.edu/cs430/,"CS 430/530 teaches the formal semantics of programming languages. That is, a mathematically rigorous description of what a computer program means. The course should be useful to anyone who is serious about programming, and is essential for anyone planning either to do research in programming languages or to design a programming language. The course is intended to accomplish two things:",CS430,FALSE,TRUE,TRUE
yale-Fall-CS469,CS469: Randomized Algorithms,Yale,Fall 2020,http://www.cs.yale.edu/homes/aspnes/classes/469/notes.pdf,"A study of randomized algorithms from several areas: graph algorithms, algorithms in algebra, approximate counting, probabilistically checkable proofs, and matrix algorithms. Topics include an introduction to tools from probability theory, including some inequalities such as Chernoff bounds.",CS469,FALSE,TRUE,FALSE
yale-Fall-CS610,CS610: Topics in Computer Science and Law,Yale,Fall 2019,http://www.cs.yale.edu/homes/jf/CPSC610-Fall2019.html,"CPSC 610 is a graduate seminar that focuses on socio-technical problems in computing, i.e., problems that cannot be solved through technological progress alone but rather require legal, political, or cultural progress as well. Examples include but are not limited to computer security, intellectual property protection, cyber crime, cyber war, surveillance, and online privacy.",CS610,FALSE,TRUE,FALSE
yale-Fall-CS462,CS462: Spectral Graph Theory,Yale,Fall 2019,http://www.cs.yale.edu/homes/spielman/462/syllabus.html,"The main purpose of this course is to explore what eigenvalues and eigenvectors of graphs can tell us about their structure, and to exploit this knowledge for algorithmic purposes. It will also include some related content that is not strictly linear algebraic, and some that does not have much to do with graphs, but which I include because it is worth knowing.",CS462,FALSE,TRUE,FALSE
yale-Fall-CS462,CS462: Graphs and Networks,Yale,Fall 2013,https://sites.google.com/a/yale.edu/462-562-graphs-and-networks/,"The purpose of this class is to introduce many types of graphs that are studied in the sciences and engineering, to examine some elementary processes that take place on those graphs, and to introduce standard analyses of graphs. “Network” is just another word for “graph”.",CS462,FALSE,TRUE,TRUE
yale-Spring-CS745,CS745: Advanced Topics in Machine Learning and Data Mining,Yale,Spring 2018,http://cpsc745.guywolf.org/,"Modern data analysis methods are expected to handle massive amounts of data that are being collected in a variety of domains, including the biological/biomedical, social, economic, artistic, and cultural domains. This seminar will provide an overview of the advances that have been made in the last decade in machine-learning and automatic data-mining approaches for dealing with the challenges that arise in such settings. This year, the seminar will focus on a broad scope of data analysis tasks, with emphasis on deep learning approaches towards them. Additional approaches, such as kernel methods and dictionary learning, will be included as well to provide a wide perspective on the field.",CS745,FALSE,TRUE,FALSE
caltech-Spring-CS179,CS179: GPU Programming,Caltech,Spring 2021,http://courses.cms.caltech.edu/cs179/,"The use of Graphics Processing Units for rendering is well known, but their power for general parallel computation has only recently been explored. Parallel algorithms running on GPUs can often achieve up to 100x speedup over similar CPU algorithms, with many existing applications for physics simulations, signal processing, financial modeling, neural networks, and countless other fields.",CS179,FALSE,FALSE,TRUE
nyu-Spring-CSCI0202,CSCI0202: Operating Systems,NYU,Spring 2015,http://www.cs.nyu.edu/~mwalfish/classes/15sp/index.html,"We hope you learn three sets of interrelated things. The first thing is how computers work. Students graduating with CS degrees should believe ""there is no magic"": they should be able to describe the chain of events that occurs when they hit a key and cause a letter to appear on the screen from the register level (or logical gate level or transistor level) to the system architecture level to the operating system level to the application level. This is philosophically important, but it is also of practical interest to developers who need to figure out how to make a system do what they want it to do.",CSCI0202,FALSE,TRUE,TRUE
hunter-Fall-CSCI360,CSCI360: Computer Architecture 3,Hunter,Fall 2014,http://compsci.hunter.cuny.edu/~sweiss/course_materials/csci360/csci360_f14.php,Appreciate the use of buffers to control data-flow. Identify the memory technologies found in a computer and be aware of the way in which memory technology is changing. Describe the various ways of organizing cache memory and appreciate the cost-performance trade-offs for each arrangement. Appreciate the need for cache coherency in multiprocessor systems.,CSCI360,FALSE,TRUE,TRUE
hunter-Spring-CSCI493.75,CSCI493.75: Parallel Computing,Hunter,Spring 2014,http://compsci.hunter.cuny.edu/~sweiss/course_materials/csci493.65/csci493.65_spr14.php,Learn how to write a correct and scalable parallel algorithm using both a message-passing based paradigm (MPI) and a shared-memory based paradigm (OpenMP). Read and analyze a program using MPI and/or OpenMPI.,CSCI493.75,FALSE,TRUE,TRUE
mit-Spring-6.828,6.828: Operating Systems,MIT,Spring 2014,https://pdos.csail.mit.edu/6.828/2014/schedule.html,"Design and implementation of operating systems, and their use as a foundation for systems programming. Topics include virtual memory; file systems; threads; context switches; kernels; interrupts; system calls; interprocess communication; coordination, and interaction between software and hardware. A multi-processor operating system for RISC-V, xv6, is used to illustrate these topics. Individual laboratory assignments involve extending the xv6 operating system, for example to support sophisticated virtual memory features and networking.",6.828,FALSE,TRUE,TRUE
chicago-Winter-CS223,CS223: Purely Functional Data Structures In Elm,Chicago,Winter 2016,https://www.classes.cs.uchicago.edu/archive/2016/winter/22300-1/,"The course project is an opportunity to design and implement something of your choosing. Generally the idea is to work in groups of one or two and build something fun and interesting in Elm that makes use of web programming and data structures in some way. Bite off as much as you can chew. The project will be split into several milestones, culminating in demos at the end of the quarter.",CS223,FALSE,TRUE,TRUE
mit-Spring-6.945,6.945: Adventures in Advanced Symbolic Programming,MIT,Spring 2021,https://groups.csail.mit.edu/mac/users/gjs/6.945/index.html,"Concepts and techniques for the design and implementation of large software systems that can be adapted to uses not anticipated by the designer. Applications include compilers, computer-algebra systems, deductive systems, and some artificial intelligence applications. Means for decoupling goals from strategy. Mechanisms for implementing additive data-directed invocation. Working with partially-specified entities. Managing multiple viewpoints. Topics include combinators, generic operations, pattern matching, pattern-directed invocation, rule systems, backtracking, dependencies, indeterminacy, memoization, constraint propagation, and incremental refinement. Substantial weekly programming assignments are an integral part of the subject.",6.945,FALSE,TRUE,FALSE
harvard-Fall-CS224,CS224: Advanced Algorithms,Harvard,Fall 2014,http://people.seas.harvard.edu/~minilek/cs224/fall14/index.html,"An algorithm is a well-defined procedure for carrying out some computational task. Typically the task is given, and the job of the algorithmist is to find such a procedure which is efficient, for example in terms of processing time and/or memory consumption. CS 224 is an advanced course in algorithm design, and topics we will cover include the word RAM model, data structures, amortization, online algorithms, linear programming, semidefinite programming, approximation algorithms, hashing, randomized algorithms, fast exponential time algorithms, graph algorithms, and computational geometry.",CS224,TRUE,TRUE,TRUE
hunter-Spring-CSCI135,CSCI135: Software Design and Analysis I,Hunter,Spring 2013,http://compsci.hunter.cuny.edu/~sweiss/course_materials/csci135/csci135_36_fall12.php,"This course is an intensive introduction to problem solving and programming. It is not specifically a course in the C++ programming language. It uses C++ to implement the concepts presented in class since one cannot learn how to program without learning a programming language! The details of C++ will sometimes be a distraction from learning important concepts, but the only way to learn programming is to program.",CSCI135,FALSE,TRUE,TRUE
hunter-Spring-CSCI235,CSCI235: Software Design and Analysis II,Hunter,Spring 2018,http://compsci.hunter.cuny.edu/~sweiss/courses/csci235.php,"This course is a sequel to CSci 135 Software Design and Analysis I. It introduces the concept of abstract data types, called ADTs for short, as well as specific ADTS such as queues, stacks, lists, and binary trees. It also introduces algorithms for a few common problems such as sorting. Practically speaking, it furthers the students' programming skills with topics such as recursion, pointers, and exception handling, and provides a chance to improve software engineering skills and to give the students practical experience for more productive programming.",CSCI235,FALSE,TRUE,FALSE
hunter-Spring-CSCI335,CSCI335: Software Design and Analysis III,Hunter,Spring 2020,http://compsci.hunter.cuny.edu/~sweiss/courses/csci335.php,"This course is a sequel to CSCI 235 Software Design and Analysis II. Its principal objective is to expand on topics in the design and analysis of algorithms and data structures. This includes the introduction of hashes, heaps, various forms of trees, and graphs. It also revisits recursion and the sorting problem from a higher perspective than was presented in the prequels. On top of this, it is intended to introduce methods of algorithmic analysis.",CSCI335,FALSE,TRUE,TRUE
davis-Fall-ECS122A,ECS122A: Algorithm Design and Analysis,Davis,Fall 2010,http://web.cs.ucdavis.edu/~gusfield/cs122f10/,"The purpose of the course is to introduce fundamental techniques and viewpoints for the design and the analysis of efficient algorithms, and to study important specific algorithms. The course relies heavily on mathematics and mathematical thinking in two ways. First as a way of proving properties about particular algorithms such as termination, and correctness. Second, as a way of establishing bounds on the worst case (or average case) use of some resource, usually time, by a specific algorithm.",ECS122A,TRUE,TRUE,FALSE
davis-Winter-ECS222A,ECS222A: Graduate Level Algorithm Design and Analysis,Davis,Winter 2011,http://web.cs.ucdavis.edu/~gusfield/cs222w11/,"In some ways, this course examines the same issues as the undergraduate course (cs 122A here), but chooses more advanced and complex algorithms, examines some issues more deeply, and requires .more difficult and interesting homework",ECS222A,TRUE,TRUE,TRUE
mit-Fall-6.006,6.006: Introduction to Algorithms,MIT,Fall 2011,https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/index.htm,"This course provides an introduction to mathematical modeling of computational problems. It covers the common algorithms, algorithmic paradigms, and data structures used to solve these problems. The course emphasizes the relationship between algorithms and programming, and introduces basic performance measures and analysis techniques for these problems.",6.006,TRUE,TRUE,TRUE
mit-Spring-6.046J,6.046J: Design and Analysis of Algorithms,MIT,Spring 2015,http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2015/index.htm,"This is an intermediate algorithms course with an emphasis on teaching techniques for the design and analysis of efficient algorithms, emphasizing methods of application. Topics include divide-and-conquer, randomization, dynamic programming, greedy algorithms, incremental improvement, complexity, and cryptography.",6.046J,TRUE,TRUE,TRUE
mit-Spring-6.851,6.851: Advanced Data Structures,MIT,Spring 2014,http://courses.csail.mit.edu/6.851/spring14/index.html,"Data structures play a central role in modern computer science. You interact with data structures even more often than with algorithms (think Google, your mail server, and even your network routers). In addition, data structures are essential building blocks in obtaining efficient algorithms. This course covers major results and current research directions in data structures:",6.851,TRUE,TRUE,TRUE
mit-Fall-6.854,6.854: Advanced Algorithms,MIT,Fall 2020,http://courses.csail.mit.edu/6.854/current/,This course is designed to be a capstone course in algorithms that surveys some of the most powerful algorithmic techniques and key computational models. It aims to bring the students up to the level where they can read and understand research papers.,6.854,TRUE,TRUE,TRUE
fayetteville-Spring-CSCE3193,CSCE3193: Programming Paradigms,Fayetteville,Spring 2011,http://www.csce.uark.edu/~sgauch/3193/S11/index.html,"Programming in different paradigms with emphasis on object oriented programming, network programming and functional programming. Survey of programming languages, event driven programming, concurrency, software validation.",CSCE3193,FALSE,TRUE,TRUE
mit-Spring-6.045,6.045: Great Ideas in Theoretical Computer Science,MIT,Spring 2015,https://stellar.mit.edu/S/course/6/sp15/6.045/index.html,"This course provides a challenging introduction to some of the central ideas of theoretical computer science. Beginning in antiquity, the course will progress through finite automata, circuits and decision trees, Turing machines and computability, efficient algorithms and reducibility, the P versus NP problem, NP-completeness, the power of randomness, cryptography and one-way functions, computational learning theory, and quantum computing. It examines the classes of problems that can and cannot be solved by various kinds of machines. It tries to explain the key differences between computational models that affect their power.",6.045,FALSE,TRUE,FALSE
utah-Fall-CS1410-2,CS1410-2: Computer Science I for Hackers,Utah,Fall 2011,http://www.eng.utah.edu/~cs1410-20/,This course will teach you how to begin with a problem statement and then systematically design a computer program that solves the problem.,CS1410-2,FALSE,TRUE,TRUE
utah-Spring-CS2420-20,CS2420-20: Computer Science II for Hackers,Utah,Spring 2012,http://www.eng.utah.edu/~cs2420-20/,"Section 20 of CS 2420 specifically builds on section 20 of CS 1410. Section 20 will cover the same programing concepts as other sections of CS 2420, but with additional concepts and through a different approach that is particularly targeted to students who are interested in “systems.”",CS2420-20,FALSE,TRUE,TRUE
fayetteville-Spring-CSCE2004,CSCE2004: Programming Foundations I,Fayetteville,Spring 2014,http://www.csce.uark.edu/~sgauch/2004/S14/index.html,"Introductory course for students majoring in computer science or computer engineering. Software development process: problem specification, program design, implementation, testing and documentation. Programming topics: data representation, conditional and iterative statements, functions, arrays, strings, file I/O, and classes. Using C++ in a UNIX environment. Prerequisite: MATH 2554 (Calculus I) with a C or better.",CSCE2004,FALSE,TRUE,FALSE
mit-Spring-6.001,6.001: Structure and Interpretation of Computer Programs,MIT,Spring 2005,http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/index.htm,"This course features projects and supporting documentation. This course has virtually all of its course materials online. 6.001 is the first course in the core of departmental subjects which is required for all undergraduates in Electrical Engineering and Computer Science. It offers an online version of the textbook for the course, Structure and Interpretation of Computer Programs, 2nd ed., by Abelson, Sussman, and Sussman.",6.001,TRUE,TRUE,TRUE
mit-Fall-6.005,6.005: Software Construction,MIT,Fall 2016,http://web.mit.edu/6.005/www/fa16/,"6.005 Software Construction introduces fundamental principles and techniques of software development, i.e., how to write software that is safe from bugs, easy to understand, and ready for change. The course includes problem sets and a final project. Important topics include specifications and invariants; testing; abstract data types; design patterns for object-oriented programming; concurrent programming and concurrency; and functional programming.",6.005,FALSE,TRUE,TRUE
caltech-Spring-CS156,CS156: Learning from Data,Caltech,Spring 2012,https://work.caltech.edu/telecourse.html,"This is an introductory course in machine learning (ML) that covers the basic theory, algorithms, and applications. ML is a key technology in Big Data, and in many financial, medical, commercial, and scientific applications.",CS156,TRUE,TRUE,TRUE
harvard-Fall-CS229r,CS229r: Algorithms for Big Data,Harvard,Fall 2015,http://people.seas.harvard.edu/~minilek/cs229r/fall15/index.html,"Big data is data so large that it does not fit in the main memory of a single machine, and the need to process big data by efficient algorithms arises in Internet search, network traffic monitoring, machine learning, scientific computing, signal processing, and several other areas. This course will cover mathematically rigorous models for developing such algorithms, as well as some provable limitations of algorithms operating in those models.",CS229r,TRUE,TRUE,TRUE
nyu-Spring-DS-GA1008,DS-GA1008: Deep Learning,NYU,Spring 2014,http://cilvr.cs.nyu.edu/doku.php?id=deeplearning2015:schedule,"The CILVR Lab (Computational Intelligence, Learning, Vision, and Robotics) regroups faculty members, research scientists, postdocs, and students working on AI, machine learning, and a wide variety of applications, notably computer perception, natural language understanding, robotics, and health care.",DS-GA1008,TRUE,TRUE,FALSE
columbia-Spring-EECSE6894,EECSE6894: Deep Learning for Computer Vision and Natural Language Processing,Columbia,Spring 2015,http://llcao.net/cu-deeplearning15/index.html,"This graduate level research class focuses on deep learning techniques for vision and natural language processing problems. It gives an overview of the various deep learning models and techniques, and surveys recent advances in the related fields. This course uses Theano as the main programminging tool. GPU programming experiences are preferred although not required. Frequent paper presentations and a heavy programming workload are expected.",EECSE6894,FALSE,TRUE,FALSE
rpi-Spring-CSCI4968,CSCI4968: Modern Binary Exploitation,RPI,Spring 2015,https://github.com/RPISEC/MBE,"This repository contains the materials as developed and used by RPISEC to teach Modern Binary Exploitation at Rensselaer Polytechnic Institute in Spring 2015. This was a university course developed and run solely by students to teach skills in vulnerability research, reverse engineering, and binary exploitation.",CSCI4968,FALSE,TRUE,TRUE
rpi-Fall-CSCI4976,CSCI4976: Malware Analysis,RPI,Fall 2015,https://github.com/RPISEC/Malware,"This repository contains the materials as developed and used by RPISEC to teach Malware Analysis at Rensselaer Polytechnic Institute in Fall 2015. This was a university course developed and run soley by students, primarily using the Practical Malware Analysis book by Michael Sikorski and Andrew Honig, to teach skills in reverse engineering, malicious behaviour, malware, and anti-analysis techniques.",CSCI4976,FALSE,TRUE,TRUE
michigan-Fall-EECS588,EECS588: Computer & Network Security,Michigan,Fall 2021,https://www.eecs.umich.edu/courses/eecs588/,"This intensive research seminar covers foundational work and current topics in computer systems security. We will read research papers and discuss attacks and defenses against operating systems, client-side software, web applications, and IP networks. Students will be prepared for research in computer security and for security-related research in other subareas, and they will gain hands-on experience designing and evaluating secure systems.",EECS588,FALSE,TRUE,FALSE
mit-Spring-6.857,6.857: Computer and Network Security,MIT,Spring 2015,http://courses.csail.mit.edu/6.857/2015/,"6.857 Network and Computer Security is an upper-level undergraduate, first-year graduate course on network and computer security. It fits within the Computer Systems and Architecture Engineering concentration.",6.857,FALSE,TRUE,TRUE
mit-Fall-6.858,6.858: Computer Systems Security,MIT,Fall 2014,http://css.csail.mit.edu/6.858/2014/,"Design and implementation of secure computer systems. Lectures cover threat models, attacks that compromise security, and techniques for achieving security, based on recent research papers. Topics include operating system (OS) security, capabilities, information flow control, language security, network protocols, hardware security, and security in web applications. Assignments include labs that involve implementing and compromising a secure web server and web application, and a group final project.",6.858,TRUE,TRUE,TRUE
utexas-Fall-CS378,CS378: 3D Reconstruction with Computer Vision,UTexas,Fall 2014,https://github.com/ut-cs378-vision-2014fall/course-info,"Projects like Photosynth, Kinect, and Tango have shown the incredible potential of using computer vision to construct immersive 3D environments from easily acquired imagery. In this lab-based class, we'll dive into practical applications of 3D reconstruction, combining hardware and software to build our own 3D environments from scratch.",CS378,FALSE,TRUE,TRUE
nyu-Fall-CSCI-GA.2270-001,CSCI-GA.2270-001: Graduate Computer Graphics,NYU,Fall 2015,https://mrl.nyu.edu/~perlin/courses/fall2015/,"There are many courses that can teach you how to use commercial computer graphics packages and APIs. This course, in contrast, will teach you how to build 3D computer graphics from the ground up. This will include 3D modeling, animation, and rendering. At the end of the semester you will have built your own complete working real-time 3D computer graphics systems that runs in web browsers.",CSCI-GA.2270-001,FALSE,TRUE,TRUE
harvard-Fall-AM207,AM207: Monte Carlo Methods and Stochastic Optimization,Harvard,Fall 2016,http://am207.github.io/2016/index.html,"This course introduces important principles of Monte Carlo techniques and demonstrates the power of these techniques with simple (but very useful) applications. Starting from the basic ideas of Bayesian analysis and Markov chain Monte Carlo samplers, we move to more recent developments such as slice sampling, multi-grid Monte Carlo, Hamiltonian Monte Carlo, parallel tempering and multi-nested methods. We complete our investigation of Monte Carlo samplers with streaming methods such as particle filters/sequential Monte Carlo. Throughout the course we delve into related topics in stochastic optimization and inference such as genetic algorithms, simulated annealing, probabilistic Gaussian models, and Gaussian processes.",AM207,TRUE,TRUE,FALSE
riverside-Fall-CS100,CS100: Open Source Software Construction,Riverside,Fall 2015,https://github.com/mikeizbicki/ucr-cs100,"This is a course on how to be a hacker. Being a hacker means a lot of things. It means: wanting to know how and why computers work, being efficient / never repeating yourself, using and contributing to open source software, understanding the edge cases of your software, using tools in creative and unexpected ways, and (occasionally) we combine all these together and break stuff",CS100,FALSE,TRUE,TRUE
GT-CS6310-Spring,CS 6310: Software Architecture and Design,Georgia Tech,Spring 2021,https://omscs.gatech.edu/cs-6310-software-architecture-design,Software Architecture and Design will provide students with the principles and concepts involved in the analysis and design of large software systems.,CS6310,TRUE,FALSE,FALSE
GT-CS4803-Fall,CS 4803 / 7643 Deep Learning,Georgia Tech,Fall 2019,https://www.cc.gatech.edu/classes/AY2020/cs7643_fall/#schedule,"This course will introduce students to the basics of Neural Networks (NNs) and expose them to some cutting-edge research. It is structured in modules (background, Convolutional NNs, Recurrent NNs, Deep Reinforcement Learning, Deep Structured Prediction). Modules will be presented via instructor lectures and reinforced with homeworks that teach theoretical and practical aspects. The course will also include a project which will allow students to explore an area of Deep Learning that interests them in more depth.",CS4803,TRUE,TRUE,FALSE
GT-CS7260-Spring,CS7260: Internetworking Architectures and Protocols,Georgia Tech,Spring 2019,https://www.cc.gatech.edu/classes/AY2019/cs7260_spring/,"In this semester, the syllabus will put a major emphasis on so-called network algorithmics (a.k.a. router/switch architectures and algorithms). We will study algorithms and protocols used by modern routers/switches to perform data plane functions including forwarding, address/prefix lookups, switching, scheduling, counting, flow classification, flow monitoring and measurement, IP traceback and other security functions.  In other words, we will study almost everything about a router/switch except routing, which is a control plane function and out of the scope of this course.",CS7260,FALSE,TRUE,TRUE
GT-CS7497-Spring,CS7497 Virtual Environments,Georgia Tech,Spring 2013,https://github.blairmacintyre.me/site-archive/cs7497s13/,"This course is an introduction to virtual environments, including virtual reality, augmented reality and multi-user online virtual worlds. Issues covered will include VR/AR technology, software design, 3D human-computer interaction, and application issues. The course is intended for graduate students in the CS program at Georgia Tech, especially PhD students.",CS7497,FALSE,TRUE,TRUE
GT-CS7616-Spring,CS7616 Pattern Recognition,Georgia Tech,Spring 2016,https://www.cc.gatech.edu/~hic/CS7616/index.html,This is a graduate level for those interested in pattern recognition in general and for some elements as applied to computer vision. It is not going to be a comprehensive Machine Learning course.,CS7616,FALSE,TRUE,FALSE
GT-CS7510-Fall,CS7510 Graph Algorithms,Georgia Tech,Fall 2019,https://www.cc.gatech.edu/~rpeng/CS7510_F19/,"This course aims to explore graph algorithms an efficiency-driven perspective. Emphasis will be on path finding / contraction based algoirthms for computing distances and cuts, with a focus on obtaining provably efficient algorithms. Recent developments in network science, graph decomposition, and numerical algorithms, as well as more classical topics such as planarity and coloring will also be addressed.",CS7510,FALSE,TRUE,FALSE
GT-CS7540-Spring,CS7540 Spectral Algorithms,Georgia Tech,Spring 2017,https://www.cc.gatech.edu/~rpeng/CS7540_S17/,"Spectral methods combine mathematical and algorithmic insights. This course will discuss on this connection through graphs and their spectrum, or eigenvalues. Topics of focus are random walks, clustering/graph partitioning, numerical algorithms for big data, and recent advances in graph theoretic algorithms. Presentation will assume some familiarity with graph theory (paths, cuts), probability (expectation, Markov inequality), and linear algebra (vectors, matrices, norms).",CS7540,FALSE,TRUE,TRUE
GT-CS6550-Spring,CS6550 Design and Analysis of Algorithms,Georgia Tech,Spring 2021,https://www.cc.gatech.edu/~rpeng/CS6550_S21/,"This course will discuss recent developments in algorithms, but without the burden of modern technology and ideas. It's designed as an introduction for theory-oriened graduate students to conducting research on algorithms. Presentations will be entirely proof oriented, and revolve around mindsets motivated by algebra and number theory, via",CS6550,FALSE,TRUE,TRUE
GT-CS4540-Fall,CS4540 Advanced Algorithms,Georgia Tech,Fall 2020,https://www.cc.gatech.edu/~rpeng/CS4540_F20/,"This course will cover advanced topics in algorithm design from the perspective of provable efficiency. It is heavily problem-solving oriented, and most of the topics will be presented from the perspective of dynamic programming. Tentative topics are:",CS4540,FALSE,TRUE,TRUE
GT-CS8803-Fall,CS8803 - Sampling Algorithms,Georgia Tech,Fall 2015,https://www.cc.gatech.edu/~rpeng/CS8803SA_F15/,"Sampling, or picking a subset of the data, is a process central to statistics and randomization. Recent algorithmic frameworks relying on sampling graphs and matrices highlighted several connections between combinatorial, randomized, and optimization algorithms. This course aims to discuss some of these connections, as well as explore algorithmic frameworks built around sampling. The exact choice of topics will depend on student interest. A tentative and probably overly ambitious list of topics include:",CS8803,FALSE,TRUE,TRUE
GT-CS3510-Spring,CS3510-A,Georgia Tech,Spring 2021,https://www.youtube.com/playlist?list=PLIKvXrUJFnsI7zKRyqjWhgpVDtJKeJqdR,"The course covers basic techniques (such as divide-and-conquer, dynamic programming, greedy algorithms, local search) for the design and analysis of efficient algorithms for standard computational problems (related to graphs, hashing, sorting, optimization, etc). It also provides an introduction to the theory of NP-Completeness.",CS3510,FALSE,TRUE,FALSE
GT-CS8803-Fall,CS8803 Topics in Program Analysis,Georgia Tech,Fall 2019,https://www.cc.gatech.edu/~qzhang414/course/cs8803-19/index.html,"CS 8803 is a graduate course on static program analysis. Static analysis provides a way to reason about programs without actually running them on specific inputs. In general, static analysis model program behavior for all possible inputs.",CS8803,TRUE,FALSE,FALSE
GT-CS6291-Fall,CS 6291: Embedded Systems Optimization,Georgia Tech,Fall 2020,https://omscs.gatech.edu/cs-8803-special-topics-embedded-software,"The goal of this course is to take a holistic view of the embedded system stack with a focus on processor architectures, instruction sets, and the associated advanced compiler optimizations that take advantage of the same. Following are the segments that will be covered in the course:",CS6291,FALSE,TRUE,FALSE
GT-CS1301-Spring,CS 1301: Introduction to Computing,Georgia Tech,Spring 2016,https://www.cc.gatech.edu/classes/AY2016/cs1301_spring/,To understand the basic concepts of computer programming in a high-level language.,CS1301,TRUE,FALSE,FALSE
GT-CS2200-Spring,CS 2200 An Introduction to Computer Systems and Networks,Georgia Tech,Spring 2009,https://www.cc.gatech.edu/~rama/CS2200-External/,Provide a broad exposure to computer system structure and networking including software abstractions in operating systems for orchestrating the usage of the computing resources,CS2200,FALSE,TRUE,TRUE
GT-CS2316-Spring,CS 2316: Data Manipulation for Science and Industry,Georgia Tech,Spring 2016,https://www.cc.gatech.edu/classes/AY2016/cs2316_spring/,"Students will be able to program Python programs using subset of data types and using assignment, method calls, while loops, for loops, and conditionals.",CS2316,FALSE,TRUE,TRUE
GT-CS2340-Fall,CS 2340: Objects and Design,Georgia Tech,Fall 2019,https://cs2340.gitlab.io/,"CS2340 takes students who know an object-oriented language and basic object-oriented programming principles, and builds on that knowledge with more advanced design principles and techniques.",CS2340,FALSE,TRUE,TRUE
GT-CS3210-Fall,CS 3210: Design of Operating Systems,Georgia Tech,Fall 2017,https://cs3210.cc.gatech.edu/cal.html,"CS-3210 is primarily intended for senior students (motivated junior students) and graduate students who want to concentrate on systems. To benefit from the course, low-level programming skills (e.g., C or ASM programming) and preliminary knowledge on computer system (e.g., CS 2200) and architecture (e.g., CS 2110). You will be asked to design and implement core components of an operating system through labs, assignments and a final project.",CS3210,FALSE,TRUE,TRUE
GT-CS3451-Fall,CS 3451: Introduction to Computer Graphics,Georgia Tech,Fall 2019,https://cs3451.github.io/cs3451-f19/,"This course is designed to be a first course in computer graphics, and as such, no previous experience in graphics is assumed. If you have had any prior course in computer graphics, this course may be too basic for you. The only knowledge that you need coming into this course is basic linear algebra and strong programming skills.",CS3451,FALSE,TRUE,TRUE
GT-CS3600-Fall,CS 3600: Introduction to Artificial Intelligence,Georgia Tech,Fall 2016,https://www.cc.gatech.edu/~riedl/classes/2016/cs3600/index.html,"Introduction to Artificial Intelligence is a three-credit undergraduate course emphasizing the building of agents, environments, and systems that can be considered as acting intelligently. In particular, you will learn about the methods and tools that will allow you to build complete systems that can interact intelligently with their environment by learning and reasoning about the world.",CS3600,FALSE,TRUE,TRUE
GT-CS4420-Spring,CS 4420: Database System Implementation,Georgia Tech,Spring 2019,https://www.cc.gatech.edu/~jarulraj/courses/4420-s19/,The course is a combination of lectures and programming projects in which we will study the internals of modern database management systems. It will cover the core concepts and fundamentals of the components that are used in both high-performance transaction processing systems (OLTP) and large-scale analytical systems (OLAP). The class will stress both efficiency and correctness of the implementation of these ideas. The course is appropriate for graduate students in software systems and for advanced undergraduates with dirty systems programming skills.,CS4420,FALSE,FALSE,TRUE
GT-CS4470-Fall,CS 4470: Introduction to User Interface Software,Georgia Tech,Fall 2015,http://kedwards.com/classes/AY2016/cs4470_fall/,Understanding of the architectural and algorithmic principles behind the development of the 2-dimensional graphical user interface,CS4470,FALSE,TRUE,TRUE
GT-CS4472-Spring,CS 4472: Design of Online Communities,Georgia Tech,Spring 2021,https://www.cc.gatech.edu/~asb/teaching/oc/21/schedule.html,"Online communities are becoming an increasing part of how we work, play, and learn. But how are they designed? What are they really good for? Why are some communities more successful than others? What are the key issues in this field of research?",CS4472,FALSE,TRUE,TRUE
GT-CS4476-Fall,CS 4476: Introduction to Computer Vision,Georgia Tech,Fall 2018,https://samyak-268.github.io/F18CS4476/,"In this introductory Computer Vision course, we will learn how to ""teach machines to see"". We will explore several fundamental concepts including image formation, feature detection, segmentation, multiple view geometry, recognition, and video processing. We will use these concepts to build applications that aid machines to see the world around them.",CS4476,FALSE,TRUE,FALSE
GT-CS4510-Fall,CS 4510: Automata and Complexity,Georgia Tech,Fall 2018,https://www.cc.gatech.edu/~rpeng/CS4510_F18/,"This course provides an introduction to the theory of computation. It will cover computational machine models and their corresponding language classes,",CS4510,FALSE,TRUE,TRUE
GT-CS4540-Fall,CS 4540: Advanced Algorithms,Georgia Tech,Fall 2019,https://cs4540-f19.github.io/,"This is an advanced course on algorithms. That is quite a broad topic, and in particular this semester’s course will focus heavily on algorithms for machine learning.",CS4540,FALSE,TRUE,TRUE
GT-CS7637-Fall,CS 7637: Knowledge-Based Artificial Intelligence - Cognitive Systems,Georgia Tech,Fall 2019,https://omscs.gatech.edu/cs-7637-knowledge-based-artificial-intelligence-cognitive-systems,The twin goals of knowledge-based artificial intelligence (AI) are to build AI agents capable of human-level intelligence and gain insights into human cognition.,CS7637,FALSE,TRUE,TRUE
GT-CS7646-Summer,CS 7646: Machine Learning for Trading,Georgia Tech,Summer 2021,http://lucylabs.gatech.edu/ml4t/,"This course introduces students to the real-world challenges of implementing machine learning-based trading strategies including the algorithmic steps from information gathering to market orders. The focus is on how to apply probabilistic machine learning approaches to trading decisions. We consider statistical approaches like linear regression, Q-Learning, KNN, and regression trees and how to apply them to actual stock trading situations.",CS7646,TRUE,TRUE,FALSE
GT-CS4649-Fall,CS 4649: Robot Intelligence - Planning,Georgia Tech,Fall 2014,https://joosm.github.io/RIP2014/,"This course covers the introductory material of the robot intelligence, especially from the planning perspective. We discuss algorithms for robots and other complex systems that make intelligent decisions in high dimensional or continuous spaces of options. Intelligent decisions take into account both present and future constraints on the system. The course will cover methods for planning with symbolic, numerical, geometric and physical constraints. Topics will range from classical and stochastic planning to continuous robot domains and hybrid control of dynamic systems.",CS4649,TRUE,FALSE,FALSE
GT-CS4650-Spring,CS 4650: Natural Language Processing,Georgia Tech,Spring 2021,https://www.cc.gatech.edu/classes/AY2021/cs4650_spring/#info,"This undergraduate-level course provides an introduction to modern natural language processing using machine learning approaches. Content includes linguistics fundamentals (syntax, semantics, distributional properties of language), machine learning models (classifiers, sequence taggers, deep learning models), key algorithms for inference, and applications to a range of problems. In-person attendance is not required for the course.",CS4650,FALSE,TRUE,FALSE
GT-CS4731-Fall,CS 4731: Game AI,Georgia Tech,Fall 2019,https://www.cc.gatech.edu/~surban6/2019fa-gameAI/,"The purpose of this course is for undergraduate and graduate students in Computing and related fields to gain a breadth of understanding of the toolbox of AI approaches employed in digital games. This involves learning some basic topics covered in other AI courses, but with a focus on applied knowledge within the context of digital games.",CS4731,FALSE,TRUE,TRUE
GT-CS6263-Summer,CS 6263: Intro to Cyber Physical Systems Security,Georgia Tech,Summer 2021,https://omscs.gatech.edu/cs-8803-special-topics-cyber-physical-systems,This course (formerly CS 8803 O07 Special Topics) provides an introduction to security issues relating to various cyber-physical systems including industrial control systems and those considered critical infrastructure systems.,CS6263,FALSE,TRUE,FALSE
GT-CS6290-Summer,CS 6290: High Performance Computer Architecture,Georgia Tech,Summer 2021,https://omscs.gatech.edu/cs-6290-high-performance-computer-architecture,"This course covers modern computer architecture, including branch prediction, out-of-order instruction execution, cache optimizations, multi-level caches, memory and storage, cache coherence and consistency, and multi- and many-core processors.",CS6290,TRUE,FALSE,FALSE
GT-CS6210-Spring,CS 6210: Advanced Operating Systems,Georgia Tech,Spring 2021,https://omscs.gatech.edu/cs-6210-advanced-operating-systems,Advanced Operating Systems is a graduate-level course that addresses a broad range of topics in operating system design and implementation.,CS6210,TRUE,FALSE,FALSE
GT-CS8803-Spring,CS 8803: Adaptive Control and Reinforcement Learning,Georgia Tech,Spring 2019,https://www.cc.gatech.edu/~bboots3/ACRL-Spring2019/,"This course is directed to graduate students interested in developing adaptive software that interacts with the world. Although much of the material will be driven by applications within robotics, anyone interested in applications of learning to planning and control techniques or an interest in building complex adaptive systems is welcome.",CS8803,FALSE,TRUE,FALSE
GT-CS7450-Fall,CS 7450: Information Visualization,Georgia Tech,Fall 2019,https://www.cc.gatech.edu/~stasko/7450/index.html,"Computer-based information visualization centers around helping people explore or explain data through interactive software that exploits the capabilities of the human perceptual system. A key challenge in information visualization is designing a cognitively useful spatial mapping of a dataset that is not inherently spatial and accompanying the mapping by interaction techniques that allow people to intuitively explore the dataset. Information visualization draws on the intellectual history of several traditions, including computer graphics, human-computer interaction, cognitive psychology, semiotics, graphic design, statistical graphics, cartography, and art. The synthesis of relevant ideas from these fields with new methodologies and techniques made possible by interactive computation are critical for helping people keep pace with the torrents of data confronting them.",CS7450,TRUE,FALSE,FALSE
UPitt-CS2750-Spring,CS2750 Machine Learning,UPITT,Spring 2020,https://people.cs.pitt.edu/~milos/courses/cs2750-Spring2020/,"The goal of the field of machine learning is to build computer systems that learn from experience and that are capable to adapt to their environments. Learning techniques and methods developed by researchers in this field have been successfully applied to a variety of learning tasks in a broad range of areas, including, for example, text classification, gene discovery, financial forecasting, credit card fraud detection, collaborative filtering, design of adaptive web agents and others.",CS2750,FALSE,TRUE,FALSE
UPitt-CS2710-Fall,CS2710 Foundations of Artificial Intelligence,UPITT,Fall 2019,https://people.cs.pitt.edu/~milos/courses/cs2710-Fall2019/,"This course will provide an introduction to the fundamental concepts and techniques underlying the construction of intelligent computer systems. Topics covered in the course include: problem solving and search, logic and knowledge representation, planning, reasoning and decision-making in the presence of uncertainty, and machine learning.",CS2710,FALSE,TRUE,TRUE
UPitt-CS441-Spring,CS441 Discrete Mathematics for Computer Science,UPITT,Spring 2013,http://people.cs.pitt.edu/~milos/courses/cs441/index.html#Abstract,"The purpose of this course is to understand and use (abstract) discrete structures that are backbones of computer science. In particular, this class is meant to introduce logic, proofs, sets, relations, functions, counting, and probability, with an emphasis on applications in computer science.",CS441,FALSE,TRUE,TRUE
UPitt-CS3750-Spring,CS 3750  Advanced Topics in Machine Learning,UPITT,Spring 2020,https://people.cs.pitt.edu/~milos/courses/cs3750-Spring2020/,"The objective of the Advances Machine Learning course is to expand on the material covered in the introductory Machine Learning course (CS2750). It focuses on special topics in ML such as exact and approximate inference in graphical models, dimensionality reduction and component analysis methods, latent variable models, models of documents and words, time series models, selected topic from deep neural networks and reinforcement learning. The course will consist of (student-lead) presentations and discussions. Students will be evaluated based on their participation in discussions, presentations and projects.",CS3750,FALSE,TRUE,TRUE
MIT-18.434-Spring,18.434: Seminar in Theoretical Computer Science,MIT,Spring 2014,https://www.cc.gatech.edu/~rpeng/18434_S15/index.html,"This is an undergraduate seminar in theoretical computer science. It carries CIM credit for the math department. As with all CIM subjects, the emphasis is on communication, both oral and written. Enrollment is limited by the department.",18.434,FALSE,TRUE,TRUE
UCI-CS134-Fall,CS 134: Computer and Network Security,"University of California, Irvine",Fall 2020,https://www.ics.uci.edu/~alfchen/teaching/cs134-2020-Fall/index.html,"This course introduces basic concepts in cryptography and computer security and discusses both their theoretical foundations and practical applications. Various threats, attacks and countermeasures including cryptosystems, cryptographic protocols and secure systems/networks will be addressed. See the list of lectures for additional details. Please get in touch if you have questions or suggestions.",CS134,FALSE,TRUE,TRUE
CMU-15-451-Fall,CMU 15-451/651,Carnegie Mellon,Fall 2012,https://www.cs.cmu.edu/~avrim/451f12/,"This course is about designing algorithms for computational problems, and how to think clearly about analyzing correctness and running time. The main goal of this course is to provide the intellectual tools needed for designing and analyzing your own algorithms for new problems you need to solve in the future. We will also discuss a bit of Complexity Theory (which looks at the intrinsic difficulty of computational problems) as well as some Algorithmic Game Theory, Computational Geometry, and Machine Learning.",15-451,FALSE,FALSE,FALSE
CMU-CSM2020-Spring,CSM2020,Carnegie Mellon,Spring 2020,https://sites.google.com/site/cellandsystemsmodeling/home?authuser=0,"This course will introduce students to the theory and practice of modeling biological systems from the molecular to the population level with an emphasis on intracellular processes. Topics covered include kinetic and equilibrium descriptions of biological processes, systematic approaches to model building and parameter estimation, analysis of biochemical circuits modeled as differential equations, modeling the effects of noise using stochastic methods. A range of biological models and applications will be considered including gene regulatory networks cell signaling, molecular motors, and developmental biology. Weekly recitations will introduce computational skills and provide students hands-on experience with methods and models presented in class. Course requirements include weekly homework assignments, a final project, and a take-home exam.",CSM2020,FALSE,TRUE,TRUE
CMU-15-354-Spring,15-354 Computational Discrete Mathematics,Carnegie Mellon,Spring 2021,https://www.cs.cmu.edu/~cdm/index.html,"This course is about the computational aspects of some of the standard concepts of discrete mathematics (relations, functions, logic, graphs, algebra, automata), with emphasis on efficient algorithms. We begin with a brief introduction to computability and computational complexity. Other topics include: iteration, orbits and fixed points, order and equivalence relations, propositional logic and satisfiability testing, finite fields and shift register sequences, finite state machines, and cellular automata. Computational support for some of the material is available in the form of a Mathematica package.",15-354,FALSE,TRUE,TRUE
CMU-15-355-Spring,15-355: Modern Computer Algebra,Carnegie Mellon,Spring 2021,http://www.andrew.cmu.edu/course/15-355/,"The goal of this course is to investigate the relationship between algebra and computation. The course is designed to expose students to algorithms used for symbolic computation, as well as to the concepts from modern algebra which are applied to the development of these algorithms. This course provides a hands-on introduction to many of the most important ideas used in symbolic mathematical computation, which involves solving system of polynomial equations, analytic integration, solving linear difference equations, and proving combinatorial identities. It is expected that students should be able to handle modest amount of programming in Mathematica.",15-355,FALSE,TRUE,TRUE
CMU-15356-Spring,15356/15856:  Introduction to Cryptography,Carnegie Mellon,Spring 2021,https://www.cs.cmu.edu/~goyal/15356/,This is an introduction to cryptography course. The course is open to graduate and undergraduate students. It is cross-listed with 15-856. This is the website for both the course sections. The course does not assume any prior background in cryptography or computer security,15356,FALSE,TRUE,TRUE
CMU-15-110-Spring,15-110: Principles of Computing,Carnegie Mellon,Spring 2021,https://cs-cmuq.github.io/110-www/#main,"The course will take the student along the way that starts from a complex, possibly large problem to solve, and then move step by step to its abstraction, to its formalization into an algorithmic recipe, to the encoding of the algorithm using the constructs of the python language, to the run-time execution and error correction of the programming code, to the efficiency analysis of the developed algorithm and code.",15-110,TRUE,TRUE,TRUE
CMU-15-288-Spring,15-288: Machine Learning in a Nutshell,Carnegie Mellon,Spring 2021,https://web2.qatar.cmu.edu/~gdicaro/15288/,This course is about the application of machine learning (ML) concepts and models to solve challenging real-world problems.,15-288,FALSE,TRUE,FALSE
CMU-15-281-Fall,15-281: Artificial Intelligence: Representation and Problem Solving,Carnegie Mellon,Fall 2020,https://web2.qatar.cmu.edu/~gdicaro/15281/,"In this course, this is issue is somehow narrowed down to the concept of rationality : the notion of Artificial Intelligence is treated as equivalent to that of Computational Rationality. Given well defined preferences, a rational agent always selects the actions whose outcomes result in the maximization of the expected utility.",15-281,FALSE,TRUE,FALSE
CMU-15-382-Spring,15-382: Collective Intelligence,Carnegie Mellon,Spring 2019,https://web2.qatar.cmu.edu/~gdicaro/15382/,"This course is about modeling and control of systems involving a large number of autonomous components that interact with each other, dynamically adapting to their changing environment as a result of mutual, possibly non-linear, interactions.",15-382,FALSE,TRUE,FALSE
CMU-16-385-Spring,16-385: Computer Vision,Carnegie Mellon,Spring 2020,https://www.cs.cmu.edu/~16385/,"This course provides a comprehensive introduction to computer vision. Major topics include image processing, detection and recognition, geometry-based and physics-based vision and video analysis. Students will learn basic concepts of computer vision as well as hands on experience to solve real-life vision problems.",16-385,FALSE,TRUE,FALSE
CMU-15-386-Spring,15-386/686: Neural Computation,Carnegie Mellon,Spring 2021,https://www.cnbc.cmu.edu/~tai/nc21.html,"This course explores computational principles at multiple levels, from individual neurons to circuits and systems, with a view to bridging brain science and machine learning.",15-386,FALSE,TRUE,TRUE
CMU-15-388-Spring,15-388: Practical Data Science,Carnegie Mellon,Spring 2021,http://www.datasciencecourse.org/lectures/,"Topics covered include: collecting and processing data using relational methods, time series approaches, graph and network models, free text analysis, and spatial geographic methods; analyzing the data using a variety of statistical and machine learning methods include linear and non-linear regression and classification, unsupervised learning and anomaly detection, plus advanced machine learning methods like kernel approaches, boosting, or deep learning; visualizing and presenting data, particularly focusing the case of high-dimensional data;",15-388,FALSE,TRUE,FALSE
CMU-15-394-Spring,15-394:  Intermediate Rapid Prototyping,Carnegie Mellon,Spring 2017,https://www.cs.cmu.edu/afs/cs/academic/class/15394u-s17/schedule.html,"This course covers additional topics in rapid prototyping beyond the content of 15-294. Example topics include mechanism design, procedural shape generation using Grasshopper, 3D scanning and mesh manipulation, and advanced SolidWorks concepts.",15-394,FALSE,TRUE,TRUE
CMU-15-440-Spring,15-440: Distributed Systems,Carnegie Mellon,Spring 2014,https://www.cs.cmu.edu/~dga/15-440/S14/index.html,"15-440 is an introductory course in distributed systems. The emphasis will be on the techniques for creating functional, usable, and high-performance distributed systems. To make the issues more concrete, the class includes several multi-week projects requiring significant design and implementation.",15-440,FALSE,TRUE,TRUE
CMU-15-441-Fall,15-441: Compiler Design,Carnegie Mellon,Fall 2017,https://www.cs.cmu.edu/~janh/courses/411/17/index.html,"This course covers the design and implementation of compiler and run-time systems for high-level languages, and examines the interaction between language design, compiler design, and run-time organization. Topics covered include syntactic and lexical analysis, handling of user-defined types and type-checking, context analysis, code generation and optimization, and memory management and run-time organization.",15-441,FALSE,TRUE,TRUE
CMU-15-414-Spring,15-414: Bug Catching: Automated Programming Verification,Carnegie Mellon,Spring 2021,https://www.cs.cmu.edu/~15414/index.html,"High-profile bugs continue to plague the software industry, leading to major problems in the reliability, safety, and security of systems. This course teaches students how to write bug-free code through the process of software verification, which aims to prove the correctness of a program with respect to a mathematical specification.",15-414,FALSE,TRUE,TRUE
CMU-15-415-Fall,15-415: Database Applications,Carnegie Mellon,Fall 2016,https://15415.courses.cs.cmu.edu/fall2016/syllabus.html,"This course covers the fundamental topics for Database Management Systems: Database System Architectural Principles (ACID properties; data abstraction; external, conceptual, and internal schemata; data independence; data definition and data manipulation languages), Data models (entity-relationship and relational data models; data structures, integrity constraints, and operations for each data model; relational query languages: SQL, algebra, calculus), Theory of database design (functional dependencies; normal forms; dependency preservation; information loss), Query Optimization (equivalence of expressions, algebraic manipulation; optimization of selections and joins), Storage Strategies (indices, B-trees, hashing), Query Processing (execution of sort, join, and aggregation operators), and Transaction Processing (recovery and concurrency control).",15-415,FALSE,TRUE,TRUE
CMU-15-417-Spring,15-417: HOT Compilation,Carnegie Mellon,Spring 2020,https://www.cs.cmu.edu/~crary/hotc/,"The course covers the implementation of compilers for higher-order typed languages such as ML. Topics include type checking, type directed compilation, elaboration, phase splitting, CPS conversion, closure conversion, allocation, and garbage collection. The course is disjoint from the standard compilers course (15-411); thus, topics such as parsing and code generation are not covered. Students will implement an ML compiler and runtime system as a term project.",15-417,FALSE,TRUE,TRUE
CMU-15-418-Spring,15-418: Parallel Computer Architecture and Programming,Carnegie Mellon,Spring 2021,https://www.cs.cmu.edu/~418/index.html,"From smart phones, to multi-core CPUs and GPUs, to the world's largest supercomputers, parallel processing is ubiquitous in modern computing. The goal of this course is to provide a deep understanding of the fundamental principles and engineering trade-offs involved in designing modern parallel computing systems as well as to teach parallel programming techniques necessary to effectively utilize these machines. Because writing good parallel programs requires an understanding of key machine performance characteristics, this course will cover hardware design and how that affects software design.",15-418,FALSE,FALSE,TRUE
CMU-17-214-Spring,17-214: Principles of Software Construction,Carnegie Mellon,Spring 2020,https://www.cs.cmu.edu/~charlie/courses/17-214/2020-spring/,"In this course, students engage with concepts related to the construction of software systems at scale, building on their understanding of the basic building blocks of data structures, algorithms, program structures, and computer structures. The course covers technical topics in four areas: (1) concepts of design for complex systems, (2) object oriented programming, (3) techniques for robustness, including testing and static and dynamic analysis for programs, and (4) concurrent software.",17-214,FALSE,TRUE,TRUE
CMU-15-445-Fall,15-445: Database Systems,Carnegie Mellon,Fall 2020,https://15445.courses.cs.cmu.edu/fall2020/,"This course is on the design and implementation of database management systems. Topics include data models (relational, document, key/value), storage models (n-ary, decomposition), query languages (SQL, stored procedures), storage architectures (heaps, log-structured), indexing (order preserving trees, hash tables), transaction processing (ACID, concurrency control), recovery (logging, checkpoints), query processing (joins, sorting, aggregation, optimization), and parallel architectures (multi-core, distributed). Case studies on open-source and commercial database systems are used to illustrate these techniques and trade-offs. The course is appropriate for students that are prepared to flex their strong systems programming skills.",15-445,FALSE,TRUE,FALSE
CMU-15-453-Spring,"15-453: Formal Languages, Automata, and Computability",Carnegie Mellon,Spring 2015,http://www.contrib.andrew.cmu.edu/~okahn/flac-s15/index.html,"This course provides an introduction to formal languages, automata, computability, and complexity. The course consists of a traditional lecture component supported by weekly homework assignments and quizzes and a course project. There are two midterms and a final examination.",15-453,TRUE,TRUE,TRUE
CMU-15-455-Fall,15-455: Undergraduate Complexity Theory,Carnegie Mellon,Fall 2019,https://www.cs.cmu.edu/~15455/index.html,"This course provides a gentle introduction into complexity theory, the theory of computations that are restricted by various resource bounds (time, space, energy, ...). We start with a brief tour of the computational universe at large and then home in on the low complexity classes that are most relevant in theoretical computer science such as NP and PSPACE. Time permitting, we may take a look some non-traditional models of computation such as cellular automata or infinite time Turing machines.",15-455,FALSE,TRUE,TRUE
CMU-15-859N-Spring,15-859N: Spectral Graph Theory with Applications to ML,Carnegie Mellon,Spring 2021,https://www.cs.cmu.edu/afs/cs/academic/class/15859n-s21/schedule.html,"This class will be a continuation of the Spectral Graph Theory class 15-859N in Spring 2020. The class will be gin with a review of material from the Spring 2020 class. Afterwards the remaining material will be topic not covered. The course will also cover high dimensional geometry topics that overlap with spectral graph theory. Student in the class will be required to pick and present a paper or topic relevant to the class. For those of you who are more inclined to the experimental side, a presentation on your experiments will be acceptable.",15-859N,FALSE,TRUE,TRUE
CMU-15-451-Fall,15-451: Algorithms,Carnegie Mellon,Fall 2020,https://www.cs.cmu.edu/~15451-f20/index.html,"This course is about the design and analysis of algorithms. We will study specific algorithms for a variety of problems, as well as powerful modelling techniques (e.g. graphs and linear programming) and design paradigms (e.g. amortized analysis, dynamic programming, and sweep-line). (The complete list of topics is on the ""Home/Schedule"" page linked above.) We will study ways to analyze the efficiency of algorithms, and give lower bounds on the complexity of a problem. The topics have been chosen for their power, beauty, and practicality.",15-451,FALSE,TRUE,TRUE
CMU-15-750-Spring,15-750: Graduate Algorithms,Carnegie Mellon,Spring 2019,https://www.cs.cmu.edu/afs/cs/academic/class/15750-s19/schedule.html,The course will cover a fairly wide range of topics in algorithm design. Some of the topics will be quite a bit older work from the 1960s to more recent work from this century. We hope to present as many different tools and algorithms as time permits.,15-750,FALSE,TRUE,TRUE
CMU-15-456-Fall,15-456: Computational Geometry,Carnegie Mellon,Fall 2017,https://www.cs.cmu.edu/afs/cs/academic/class/15456-f17/schedule.html,"Extending algorithm design from one dimension to higher dimension, approximation algorithm in higher dimension, and topological algorithms.",15-456,FALSE,TRUE,TRUE
CMU-15-458-Spring,CS 15-458/858: Discrete Differential Geometry,Carnegie Mellon,Spring 2021,https://brickisland.net/DDGSpring2021/,"This course focuses on three-dimensional geometry processing, while simultaneously providing a first course in traditional differential geometry.",15-458,FALSE,TRUE,TRUE
CMU-15-459-Fall,15-459: Quantum Computation and Information at CMU,Carnegie Mellon,Fall 2018,https://www.youtube.com/playlist?list=PLm3J0oaFux3YL5qLskC6xQ24JpMwOAeJz,"Covers the basics of quantum computing, with a little bit of quantum information theory at the end.",15-459,TRUE,TRUE,TRUE
CMU-15-455-Spring,Undergrad Complexity Theory at CMU,Carnegie Mellon,Spring 2017,https://www.youtube.com/playlist?list=PLm3J0oaFux3YL5vLXpzOyJiLtqLp6dCW2,"Corresponds roughly to ""Part III"" of Sipser's textbook. Prerequisites: basic knowledge of CS Theory (such as big-O notation and Turing Machines); e.g., CMU's 15-251, ""Great Theoretical Ideas in Computer Science"":",15-455,TRUE,FALSE,FALSE
CMU-15-855-Fall,15-855: Graduate Complexity Theory at CMU,Carnegie Mellon,Fall 2017,https://www.youtube.com/playlist?list=PLm3J0oaFux3b8Gg1DdaJOzYNsaXYLAOKH,Covers most of what I think you should know to get started in complexity theory research.,15-855,TRUE,FALSE,FALSE
CMU-15-251-Spring,15-251: Great Ideas in Theoretical Computer Science,Carnegie Mellon,Spring 2016,https://www.youtube.com/playlist?list=PLm3J0oaFux3aafQm568blS9blxtA_EWQv,"A subset of various lectures from Carnegie Mellon's 15-251: Great Ideas in Theoretical Computer Science, given in Springs of 2013, 2015, 2016 by Ryan O'Donnell.",15-251,TRUE,FALSE,FALSE
CMU-15-751-Fall,Analysis of Boolean Functions at CMU,Carnegie Mellon,Fall 2012,https://www.youtube.com/playlist?list=PLm3J0oaFux3YypJNaF6sRAf2zC1QzMuTA,"23 lectures of a graduate course on Analysis of Boolean Functions, given Fall 2012 by Ryan O'Donnell at Carnegie Mellon.",15-751,TRUE,FALSE,FALSE
CMU-15-751-Spring,15-751: CS Theory Toolkit at CMU,Carnegie Mellon,Spring 2020,https://www.youtube.com/playlist?list=PLm3J0oaFux3ZYpFLwwrlv_EHH9wtH6pnX,Covers a large number of the math/CS topics that you need to know for reading and doing research in Computer Science Theory.,15-751,TRUE,FALSE,FALSE
CMU-15-462-Spring,15-462: Computer Graphics,Carnegie Mellon,Spring 2021,http://15462.courses.cs.cmu.edu/spring2021/home,"This course provides a comprehensive introduction to computer graphics. Focuses on fundamental concepts and techniques, and their cross-cutting relationship to multiple problem domains in graphics (rendering, animation, geometry, imaging). Topics include: sampling, aliasing, interpolation, rasterization, geometric transformations, parameterization, visibility, compositing, filtering, convolution, curves & surfaces, geometric data structures, subdivision, meshing, spatial hierarchies, ray tracing, radiometry, reflectance, light fields, geometric optics, Monte Carlo rendering, importance sampling, camera models, high-performance ray tracing, differential equations, time integration, numerical differentiation, physically-based animation, optimization, numerical linear algebra, inverse kinematics, Fourier methods, data fitting, example-based synthesis.",15-462,TRUE,FALSE,FALSE
CMU-15-463-Fall,15-463: Computational Photography,Carnegie Mellon,Fall 2020,http://graphics.cs.cmu.edu/courses/15-463/2020_fall/,"This course provides an overview of the state of the art in computational photography. At the start of the course, we will study modern image processing pipelines, including those encountered on mobile phone and DSLR cameras, and advanced image and video editing algorithms. Then we will continue to learn about the physical and computational aspects of tasks such as 3D scanning, coded photography, lightfield imaging, time-of-flight imaging, VR/AR displays, and computational light transport. Near the end of the course, we will discuss active research topics, such as creating cameras that capture video at the speed of light, cameras that look around walls, or cameras that can see below skin.",15-463,FALSE,TRUE,TRUE
CMU-15-464-Spring,15-464: Technical Animation,Carnegie Mellon,Spring 2013,https://www.cs.cmu.edu/~15464-s13/,"This course introduces techniques for computer animation such as keyframing, procedural methods, motion capture, and simulation. We will focus primarily on character animation, but will also discuss animation of cloth and natural phenomena. Recent research results will be considered as well as basic techniques.",15-464,FALSE,TRUE,TRUE
CMU-15-466-Fall,15-466: Computer Game Programming,Carnegie Mellon,Fall 2019,http://graphics.cs.cmu.edu/courses/15-466-f19/,"Computer Game Programming will help you build the programming skills needed to turn ideas into games. This means we'll be covering both runtime systems and the asset pipelines to fuel them, along with some game-design exercises (with an eye to thrifty code).",15-466,FALSE,TRUE,TRUE
CMU-15-468-Spring,15-468: Physics-based Rendering,Carnegie Mellon,Spring 2021,http://graphics.cs.cmu.edu/courses/15-468/,"This course is an introduction to physics-based rendering at the advanced undergraduate and introductory graduate level. During the course, we will cover fundamentals of light transport, including topics such as the rendering and radiative transfer equation, light transport operators, path integral formulations, and approximations such as diffusion and single scattering. Additionally, we will discuss state-of-the-art models for illumination, surface and volumetric scattering, and sensors. Finally, we will use these theoretical foundations to develop Monte Carlo algorithms and sampling techniques for efficiently simulating physically-accurate images.",15-468,FALSE,TRUE,TRUE
CMU-15-483-Fall,"15-483: Truth, Justice, and Algorithms",Carnegie Mellon,Fall 2018,https://www.cs.cmu.edu/~15896/index.html,"The course's topics include: fair division algorithms for allocating divisible and indivisible goods, and approximate notions of fairness; computational social choice, e.g., voting rules that optimize welfare, and methods for dealing with manipulation in elections; online matching algorithms (competitive analysis, not dating) and kidney exchange; the design of truthful auctions, as well as other topics in mechanism design; noncooperative games, including Nash equilibrium and correlated equilibrium, their computation, connections to learning theory, and the price of anarchy in congestion and routing games; and cryptocurrencies, with an emphasis on game-theoretic issues.",15-483,FALSE,TRUE,FALSE
CMU-15-492-Fall,15-492: Speech Processing,Carnegie Mellon,Fall 2011,http://www.speech.cs.cmu.edu/15-492/,"Speech Processing offers a practical and theoretical understanding of how human speech can be processed by computers. It covers speech recognition, speech synthesis and spoken dialog systems. The course involves practicals where the student will build working speech recognition systems, build their own synthetic voice and build a complete telephone spoken dialog system. This work will be based on existing toolkits. Details of algorithms, techniques and limitations of state of the art speech systems will also be presented. This course is designed for students wishing understand how to process real data for real applications, applying statistical and machine learning techniques as well as working with limitations in the technology.",15-492,FALSE,TRUE,TRUE
CMU-15-494-Spring,15-494: Cognitive Robotics,Carnegie Mellon,Spring 2019,https://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15494-s19/,"This course explores the implementation of intelligent behavior in mobile robots, focusing on the Cozmo robot by Anki. It consistes of a series of Monday/Wednesday lectures, a parallel series of Friday hands-on labs and problem sets, and a capstone project taking up the last four weeks.",15-494,FALSE,TRUE,TRUE
CMU-15-539-Fall,15-539: Computer Science Pedagogy,Carnegie Mellon,Fall 2017,https://www.cs.cmu.edu/~539/index.html,"A broad introduction to Computer Science Pedagogy at the grade 9-12 and first-year college levels. Students will implement, test, deploy, and manage free, online, interactive, autograded CS curricular content. As the semester progresses, students may also design some original content as well",15-539,FALSE,TRUE,FALSE
CMU-15-719-Spring,15-719: Advanced Cloud Computing,Carnegie Mellon,Spring 2021,https://www.cs.cmu.edu/~15719/index.html,"Computing in the cloud has emerged as a leading paradigm for cost-effective, scalable, well-managed computing. Users pay for services provided in a broadly shared, power efficient datacenter, enabling dynamic computing needs to be met without paying for more than is needed. Actual machines may be virtualized into machine-like services, or more abstract programming platforms, or application-specific services, with the cloud computing infrastructure managing sharing, scheduling, reliability, availability, elasticity, privacy, provisioning and geographic replication.",15-719,FALSE,TRUE,TRUE
CMU-05-318-Fall,05-318: Human-AI Interaction,Carnegie Mellon,Fall 2020,https://haiicmu.github.io/,"In short, the goal of this course is to introduce students to ways of thinking about how Artificial Intelligence will and has impacted humans, and how we can design interactive intelligent systems that are usable and beneficial to humans, and respect human values. As students in this course, you will build a number of different interactive technologies powered by AI, gain practical experience with what impacts their usability for humans, understand the various places that humans exist in the data pipeline that drives machine learning, and learn to think both optimistically and critically of what AI systems can do and how they can and should be integrated into society.",05-318,FALSE,TRUE,TRUE
CMU-05-431-Spring,05-431: Software Structures for User Interfaces,Carnegie Mellon,Spring 2021,https://www.cs.cmu.edu/~bam/uicourse/05631fall2021/,"This course considers the basic and detailed concepts that go into building software to implement user interfaces (UIs). It considers factors of input, output, application interface, and related infrastructure as well as the typical patterns used to implement them.",05-431,FALSE,TRUE,TRUE
CMU-05-773-Spring,05-773: Computer Science Perspectives in HCI,Carnegie Mellon,Spring 2021,https://www.cs.cmu.edu/~bam/uicourse/csmini2021/,"This course is designed to provide new PhD candidates in Human-Computer Interaction (HCI) with an initial base of knowledge about technical research in the field.  Using a seminar-style – centered around readings and discussion – it will consider a broad introduction to the research literature, approaches, and methods from the technical side of HCI.  Students should leave the course with an appreciation of how and why technical HCI work is typically done, an ability to understand work presented in the technical HCI literature, and a knowledge of past and current work across a range of different key topics within the field.",05-773,FALSE,FALSE,TRUE
CMU-05-830-Spring,05-830: Advanced User Interface Software,Carnegie Mellon,Spring 2020,https://www.cs.cmu.edu/~bam/uicourse/830spring20/,"This course will cover the research and implementation of user interface software. The students will get a comprehensive understanding of all the approaches that have been investigated by researchers and commercial systems for user interface software. This will be of value to people planning to be user interface researchers or implementers, or people interested in learning how to provide user interface frameworks for others.",05-830,FALSE,TRUE,FALSE
CMU-05-640-Spring,05-640: Interaction Techniques,Carnegie Mellon,Spring 2019,https://www.cs.cmu.edu/~bam/uicourse/05440inter2019/,"This course will provide a comprehensive study of the many ways to interact with computers and computerized devices. An “interaction technique” starts when the user does something that causes an electronic device to respond, and includes the direct feedback from the device to the user.",05-640,FALSE,TRUE,TRUE
CMU-05-683-Fall,05-683: Introduction to Human-Computer Interaction for Technology Executives,Carnegie Mellon,Fall 2018,https://www.cs.cmu.edu/~bam/uicourse/05863fall18/index.html,"This course provides an overview and introduction to the field of human-computer interaction, with a focus on how it applies to managers, technology executives, and others who will work with HCI professionals. Particular emphasis will be placed on what HCI methods and HCI-trained specialists can bring to design and development teams. The course will provide a hands-on introduction to proven tools and techniques for creating and improving user interfaces, such as Contextual Inquiry, Rapid Prototyping, Heuristic Analysis, and Think-Aloud Usability Testing. Students at the end of the course will have learned how to perform some useful techniques and will have an understanding of systematic procedures for creating usable and useful designs and systems.",05-683,FALSE,TRUE,TRUE
CMU-05-436-Spring,05-436: Usable Privacy and Security,Carnegie Mellon,Spring 2014,http://cups.cs.cmu.edu/courses/ups-sp14/,"There is growing recognition that technology alone will not provide all of the solutions to security and privacy problems. Human factors play an important role in these areas, and it is important for security and privacy experts to have an understanding of how people will interact with the systems they develop. This course is designed to introduce students to a variety of usability and user interface problems related to privacy and security and to give them experience in designing studies aimed at helping to evaluate usability issues in security and privacy systems. The course is suitable both for students interested in privacy and security who would like to learn more about usability, as well as for students interested in usability who would like to learn more about security and privacy. Much of the course will be taught in a graduate seminar style in which all students will be expected to do a weekly reading assignment and each week different students will prepare a presentation for the class. Students will also work on a group project throughout the semester.",05-436,TRUE,TRUE,TRUE
CMU-17-355-Spring,17-355: Program Analysis,Carnegie Mellon,Spring 2021,https://cmu-program-analysis.github.io/2021/index.html,"This course covers both foundations and practical aspects of the automated analysis of programs, which is becoming increasingly critical to find software errors and assure program correctness. The theory of abstract interpretation captures the essence of a broad range of program analyses and supports reasoning about their correctness. Building on this foundation, the course will describe program representations, data flow analysis, alias analysis, interprocedural analysis, dynamic analysis, and symbolic execution. Through assignments and projects, students will design and implement practical analysis tools that find bugs and verify properties of software.",17-355,FALSE,TRUE,TRUE
CMU-17-356-Spring,17-356: Software Engineering for Startups,Carnegie Mellon,Spring 2019,https://cmu-17-356.github.io/,"In this course, we will teach you the engineering skills necessary to succeed in the highly-uncertain environment associated with a technology startup. Our focus in this class is technical; that is, we will not be spending very much time on the business side of the startup equation (though given how much business drives engineering goals, of course we will not completely ignore it!). If you are instead interested in the entrepreneurship side of the equation, we encourage you to consider 15-390, Entrepreneurship for Computer Scientists.",17-356,FALSE,TRUE,TRUE
CMU-17-396-Spring,17-396: Language Design and Prototyping,Carnegie Mellon,Spring 2020,https://www.cs.cmu.edu/~aldrich/courses/17-396/,"15-411 is all about compilers, and focuses on writing sophisticated compilers that produce good assembly code. In contrast, this class is also about design, and it focuses on writing very simple interpreters and transpilers that help you get a language running quickly so you can try it out!",17-396,FALSE,TRUE,TRUE
CMU-17-445-Summer,17-445: Machine Learning in Production/AI Engineering,Carnegie Mellon,Summer 2021,https://ckaestne.github.io/seai/,"Formerly Software Engineering for AI-Enabled Systems (SE4AI), CMU course that covers how to build, deploy, assure, and maintain applications with machine-learned models. Covers responsible AI (safety, security, fairness, explainability, …) and MLOps.*",17-445,FALSE,TRUE,TRUE
CMU-10-403-Spring,10-403: Deep Reinforcement Learning,Carnegie Mellon,Spring 2021,https://cmudeeprl.github.io/403_website/,"This course brings together many disciplines of Artificial Intelligence (including computer vision, robot control, reinforcement learning, language understanding) to show how to develop intelligent agents that can learn to sense the world and learn to act by imitating others, maximizing sparse rewards, and/or satisfying their curiosity.",10-403,FALSE,TRUE,FALSE
CMU-10-301-Spring,10-301:  Introduction to Machine Learning,Carnegie Mellon,Spring 2021,https://www.cs.cmu.edu/~mgormley/courses/10601/index.html,This course covers the theory and practical algorithms for machine learning from a variety of perspectives.,10-301,FALSE,TRUE,TRUE
CMU-11-777-Fall,11-777: MultiModal Machine Learning,Carnegie Mellon,Fall 2020,https://cmu-multicomp-lab.github.io/mmml-course/fall2020/,"Multimodal machine learning (MMML) is a vibrant multi-disciplinary research field which addresses some of the original goals of artificial intelligence by integrating and modeling multiple communicative modalities, including linguistic, acoustic, and visual messages.",11-777,TRUE,TRUE,FALSE
CMU-11-755-Fall,11-755: Machine Learning for Signal Processing,Carnegie Mellon,Fall 2010,http://mlsp.cs.cmu.edu/courses/fall2010/,"This course discusses the use of machine learning techniques to process signals. We cover a variety of topics, from data driven approaches for characterization of signals such as audio including speech, images and video, and machine learning methods for a variety of speech and image processing problems.",11-755,FALSE,TRUE,TRUE
CMU-11-731-Fall,11-731: Machine Translation and Sequence-to-sequence Models,Carnegie Mellon,Fall 2018,http://phontron.com/class/mtandseq2seq2018/index.html,"Machine Translation and Sequence-to-Sequence Models is an introductory graduate-level course (at Carnegie Mellon's Language Technology Institute) surveying the primary approaches and methods for developing systems to translate between human languages, or other sequential data. The main objective of the course is to obtain basic understanding and implementation skills for modern methods for MT and sequence transduction, including how to design models, how to learn the model parameters, how to search for the best output, and how to create training data. The course will focus on machine translation, but also briefly cover tasks such as dialog response generation, image caption generation, and others.",11-731,FALSE,TRUE,FALSE
CMU-11-830-Spring,11-830: Computational Ethics for NLP,Carnegie Mellon,Spring 2020,http://demo.clab.cs.cmu.edu/ethical_nlp2020/#summary,"As language technologies have become increasingly prevalent, there is a growing awareness that decisions we make about our data, methods, and tools are often tied up with their impact on people and societies. This course introduces students to real-world applications of language technologies and the potential ethical implications associated with them. We discuss philosophical foundations of ethical research along with advanced state-of-the art techniques.",11-830,FALSE,TRUE,TRUE
CMU-11-721-Fall,11-721: Grammars and Lexicons,Carnegie Mellon,Fall 2007,https://www.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/721/2007/www/index.html#Syllabus,"Grammars and Lexicons is an introductory graduate course on linguistic data analysis and theory, focusing on methodologies that are suitable for computational implementations. The course covers major syntactic and morphological phenomena in a variety of languages.",11-721,FALSE,TRUE,TRUE
CMU-11-711-Fall,11-711: Algorithms for NLP,Carnegie Mellon,Fall 2020,http://demo.clab.cs.cmu.edu/11711fa20/,"This course will explore foundational statistical techniques for the automatic analysis of natural (human) language text. Towards this end the course will introduce pragmatic formalisms for representing structure in natural language, and algorithms for annotating raw text with those structures. The dominant modeling paradigm is corpus-driven statistical learning, covering both supervised and unsupervised methods. Algorithms for NLP is a lab-based course. This means that instead of homeworks and exams, you will mainly be graded based on four hands-on coding projects.",11-711,FALSE,TRUE,TRUE
CMU-11-611-Fall,11-611: Language and Statistics,Carnegie Mellon,Fall 2019,http://langandstats.cs.cmu.edu/,"The goal of ""Language and Statistics"" is to ground the data-driven techniques used in language technologies in sound statistical methodology. We start by formulating various language technology problems in both an information theoretic framework (the source-channel paradigm) and a Bayesian framework (the Bayes classifier). We then discuss the statistical properties of words, sentences, documents and whole languages, and the various computational formalisms used to represent language. These discussions naturally lead to specific concepts in statistical estimation.",11-611,FALSE,TRUE,TRUE
CMU-11-492-Fall,11-492: Speech Processing,Carnegie Mellon,Fall 2020,http://tts.speech.cs.cmu.edu/courses/11492/schedule.html,"Speech Processing offers a practical and theoretical understanding of how human speech can be processed by computers. It covers speech recognition, speech synthesis and spoken dialog systems. The course involves practicals where the student will build working speech recognition systems, build their own synthetic voice and build a complete spoken dialog system. This work will be based on existing toolkits. Details of algorithms, techniques and limitations of state of the art speech systems will also be presented. This course is designed for students wishing understand how to process real data for real applications, applying statistical and machine learning techniques as well as working with limitations in the technology.",11-492,TRUE,TRUE,FALSE
CMU-11-411-Spring,11-411: Natural Language Processing,Carnegie Mellon,Spring 2021,http://demo.clab.cs.cmu.edu/NLP/#overview,"This course is about a variety of ways to represent human languages (like English and Chinese) as computational systems, and how to exploit those representations to write programs that do neat stuff with text and speech data.",11-411,FALSE,TRUE,FALSE
CMU-18-734-Fall,ECE 18-734: Foundations of Privacy,Carnegie Mellon,Fall 2019,http://course.ece.cmu.edu/~ece734/index.html,"We will study privacy in a few settings where rigorous definitions and enforcement mechanisms are being developed - statistical disclosure limitation (as may be used by the census bureau in releasing statistics), semantics and logical specification of privacy policies that constrain information flow and use (e.g., by privacy regulations such as the HIPAA Privacy Rule and the Gramm-Leach-Bliley Act), principled audit and accountability mechanisms for enforcing privacy policies, anonymous communication protocols - and other settings in which privacy concerns have prompted much research, such as in social networks, location privacy and Web privacy (in particular, online tracking & targeted advertising).",18-734,FALSE,TRUE,FALSE
CMU-17-645-Fall,17-645: Software Engineering for AI-Enabled Systems,Carnegie Mellon,Fall 2019,https://ckaestne.github.io/seai/F2019/,"The course takes a software engineering perspective on building software systems with a significant machine learning or AI component. It discusses how to take an idea and a model developed by a data scientist (e.g., scripts and Jupyter notebook) and deploy it as part of scalable and maintainable system (e.g., mobile apps, web applications, IoT devices). Rather than focusing on modeling and learning itself, this course assumes a working relationship with a data scientist and focuses on issues of design, implementation, operation, and assurance and how those interact with the data scientist's modeling.",17-645,FALSE,TRUE,TRUE
CMU-17-450-Spring,17-450: Crafting Software,Carnegie Mellon,Spring 2021,https://cmu-crafting-software.github.io//,"In this course, students are expected to have been exposed to some basic programming concepts, such as variables, if-statements, loops, and arrays. However, students are not expected to have extensive programming experience. This course is not appropriate for students that have completed more than two courses involving programming. We expect students in this class to have diverse backgrounds and experience.",17-450,FALSE,FALSE,TRUE
CMU-17-337-Spring,17-337: Artificial Intelligence Methods for Social Good,Carnegie Mellon,Spring 2021,https://feifang.info/artificial-intelligence-methods-for-social-good-spring-2021/,The rapid advance in artificial intelligence (AI) has opened up new possibilities of using AI to tackle the most challenging societal problems today. This course brings together a set of advanced AI methods that allow us to address such challenges and promote social good.,17-337,FALSE,TRUE,FALSE
CMU-17-562-Fall,17-562: Law of Computer Technology,Carnegie Mellon,Fall 2020,http://euro.ecom.cmu.edu/program/law/17-762/,This course is both a survey of computer law and an examination of how courts and administrative agencies make decisions on issues involving computer technology.,17-562,FALSE,TRUE,FALSE
CMU-17-599-Fall,17-599: Advanced Topics in Machine Learning and Game Theory,Carnegie Mellon,Fall 2020,https://feifang.info/advanced-topics-in-machine-learning-and-game-theory-fall-2020/,This course is designed to be a graduate-level course covering the topics at the intersection of machine learning and game theory.,17-599,FALSE,TRUE,FALSE
CMU-10-417-Fall,10-417: Intermediate Deep Learning,Carnegie Mellon,Fall 2020,https://andrejristeski.github.io/10417-20/,"The goal of this course is to introduce students to both the foundational ideas and the recent advances in deep learning. The first part of the course will focus on supervised learning, including neural networks, back-propagation algorithm, convolutional models, recurrent neural networks, and their extensions with applications to image recognition, video analysis, and language modelling. The second part of the course will cover unsupervised learning, including variational autoencoders, sparse-coding, Boltzmann machines, and generative adversarial networks.",10-417,FALSE,TRUE,FALSE
CMU-10-418-Fall,10-418: Machine Learning for Structured Data,Carnegie Mellon,Fall 2019,https://www.cs.cmu.edu/~mgormley/courses/10418/index.html,"In this course, we will study modern approaches to structured prediction building on probabilistic graphical models, deep learning, and search. The course will focus on three key aspects: models, inference, and learning. The models we consider will focus on both generative and discriminative models such as Bayesian networks, Markov random fields (MRFs), conditional random fields (CRFs), and deep neural networks including convolutional neural networks (CNNs) and recurrent neural networks (RNNs) – as well as hybrids of graphical models and neural networks. The course will explore approaches to exact and approximate inference: junction tree algorithm, approximate marginal inference by Markov chain Monte Carlo (MCMC) and variational methods, approximate MAP inference by integer linear programming (ILP) and search.",10-418,TRUE,TRUE,FALSE
CMU-10-606-Fall,10-606: Mathematical/Computational Foundations for Machine Learning,Carnegie Mellon,Fall 2018,https://www.cs.cmu.edu/~mgormley/courses/606-607-f18/index.html,"This course provides a place for students to practice the necessary mathematical background for further study in machine learning. Topics covered include probability (random variables, modeling with continuous and discrete distributions), linear algebra (inner product spaces, linear operators), and multivariate differential calculus (partial derivatives, matrix differentials). The course assumes some background in each of the above, but will review and give practice in each. (It does not provide from-scratch coverage of all of the above, which would be impossible in a course of this length.) Some coding will be required: the course will provide practice with translating the above mathematical concepts into concrete programs.",10-606,FALSE,TRUE,FALSE
CMU-36-708-Spring,36-708: Statistical Methods for Machine Learning,Carnegie Mellon,Spring 2019,http://www.stat.cmu.edu/~larry/=sml/,This course is an advanced course focusing on the intsersection of Statistics and Machine Learning. The goal is to study modern methods and the underlying theory for those methods.,36-708,FALSE,TRUE,FALSE
CMU-10-707-Spring,10-707: Advanced Deep Learning,Carnegie Mellon,Spring 2020,https://andrejristeski.github.io/10707-S20/,"Models that are capable of extracting complex, hierarchical representations from high-dimensional data lie at the core of solving many ML and AI domains, such as visual object recognition, information retrieval, natural language processing, and speech perception. While the usefulness of such deep learning techniques is undisputed, our understanding of them is still in many ways nascent. The goal of this course is to introduce students to recent and exciting developments (both theoretical and practical) in these methods.",10-707,FALSE,TRUE,FALSE
CMU-10-708-Spring,10-708: Probabilistic Graph Models,Carnegie Mellon,Spring 2019,https://sailinglab.github.io/pgm-spring-2019/,"Many of the problems in artificial intelligence, statistics, computer systems, computer vision, natural language processing, and computational biology, among many other fields, can be viewed as the search for a coherent global conclusion from local information. The probabilistic graphical models framework provides an unified view for this wide range of problems, enables efficient inference, decision-making and learning in problems with a very large number of attributes and huge datasets. This graduate-level course will provide you with a strong foundation for both applying graphical models to complex problems and for addressing core research topics in graphical models.",10-708,TRUE,TRUE,TRUE
CMU-10-725-Fall,10-725: Convex Optimization,Carnegie Mellon,Fall 2019,http://www.stat.cmu.edu/~ryantibs/convexopt/#homework,"This course is designed to give a graduate-level student a thorough grounding in these properties and their role in optimization, and a broad comprehension of algorithms tailored to exploit such properties. The focus will be on convex optimization problems (though we also may touch upon nonconvex optimization problems at some points). We will visit and revisit important applications in machine learning and statistics.",10-725,FALSE,TRUE,TRUE
CMU-36-350-Fall,36-350: Statistical Computing,Carnegie Mellon,Fall 2019,https://www.stat.cmu.edu/~ryantibs/statcomp/,"Students will learn the core of ideas of programming—data structures, functions, iteration, debugging, logical design, and abstraction—through writing code to assist in statistical analyses. Students will learn how to write maintainable code, as well as debug and test code for correctness. They will learn how to set up and run stochastic simulations, how to fit basic statistical models and assess the results, and how to work with and filter large data sets. Since code is an important form of communication among scientists, students will also learn how to comment and organize code.",36-350,FALSE,TRUE,FALSE
CMU-10-737-Fall,10-737: Creative AI,Carnegie Mellon,Fall 2019,http://kangeunsu.com/creativeai19f/#schedule,This course is where we explore these questions through seminars and projects. Our goal is to design computational models that present the very possibility of the creative AI.,10-737,FALSE,TRUE,FALSE
CMU-10-405-Spring,10-405: Machine Learning with Large Data Sets,Carnegie Mellon,Spring 2021,https://10605.github.io/,"Large datasets pose difficulties across the machine learning pipeline. They are difficult to visualize and introduce computational, storage, and communication bottlenecks during data preprocessing and model training. Moreover, high capacity models often used in conjunction with large datasets introduce additional computational and storage hurdles during model training and inference. This course is intended to provide a student with the mathematical, algorithmic, and practical knowledge of issues involving learning with large datasets. Among the topics considered are: data cleaning, visualization, and pre-processing at scale; principles of parallel and distributed computing for machine learning; techniques for scalable deep learning; analysis of programs in terms of memory, computation, and (for parallel methods) communication complexity; and methods for low-latency inference.",10-405,FALSE,TRUE,TRUE
CMU-10-831-Spring,10-831: Machine Learning in Policy,Carnegie Mellon,Spring 2018,https://www.andrew.cmu.edu/user/jweiss2/mlp/index.html,"Machine learning, a field derived primarily from computer science and statistics, has matured and gained wide adoption. Alongside exponential increases in data measurement and availability, the ability to develop appropriate and tailored analyses is in demand. As practitioners in the social sciences consider machine learning methods, however, limitations and externalities of the applications of machine learning techniques are being identified, such as overconfidence in settings with concept drift, lack of generalizability due to selection bias, and magnification of inequities. Machine Learning in Policy seeks to (1) demonstrate motivations and successes of machine learning, to (2) contrast them with more classical methods, and to (3) investigate the promise and cautions of machine learning for public policy.",10-831,FALSE,TRUE,TRUE
CMU-16-311-Spring,16-311: Introduction to Robotics,Carnegie Mellon,Spring 2021,https://www.cs.cmu.edu/~16311/current/,"This course presents an overview of robotics in practice and research with topics including vision, motion planning, mobile mechanisms, kinematics, inverse kinematics, and sensors.",16-311,FALSE,TRUE,TRUE
CMU-16-350-Spring,16-350: Planning Techniques for Robotics,Carnegie Mellon,Spring 2021,https://www.cs.cmu.edu/~maxim/classes/robotplanning/,"Planning is one of the core components that enable robots to be autonomous. Robot planning is responsible for deciding in real-time what the robot should do next, how to do it, where the robot should move next and how to move there. This class does an in-depth study of popular planning techniques in robotics and examines their use in ground and aerial robots, humanoids, mobile manipulation platforms and multi-robot systems. The students learn the theory of these methods and also implement them in a series of programming-based projects.",16-350,FALSE,TRUE,TRUE
CMU-16-432-Spring,16-432: Designing Computer Vision Apps,Carnegie Mellon,Spring 2017,http://ci2cv.net/16432/,"Topics will include using conventional computer vision software tools (OpenCV, MATLAB toolboxes, VLFeat, TensorFlow, etc.), and development on iOS devices using mobile vision libraries such as GPUImage and fast math libraries like Armadillo and Eigen. For consistency, all app development will be in iOS and it is expected that all students participating in the class have access to an Intel-based MAC running OS X El Capitan or later. Although the coursework will be focused on a single operating system, the knowledge gained from this class will easily generalize to other mobile platforms such as Android etc.",16-432,FALSE,TRUE,TRUE
CMU-16-425-Spring,16-425: Methods in Bio(Medical) Image Analysis,Carnegie Mellon,Spring 2020,https://www.cs.cmu.edu/~galeotti/methods_course/,"Students will gain theoretical and practical skills in 2D, 3D, and 4D biomedical image analysis, including skills relevant to general image analysis. The fundamentals of computational medical image analysis will be explored, leading to current research in applying geometry and statistics to segmentation, registration, visualization, and image understanding. Additional and related covered topics include de-noising/restoration, morphology, level sets, and shape/feature analysis.",16-425,TRUE,TRUE,TRUE
CMU-16-623-Fall,16-623: Advanced Computer Vision Apps,Carnegie Mellon,Fall 2016,http://16623.courses.cs.cmu.edu/,"This course is aimed at covering advanced concepts associated with the emerging topic of applying computer vision to app development on smart devices and embedded devices. Computer vision is a discipline that attempts to extract information from images and videos. Nearly every smart device on the planet has a camera, and people are increasingly interested in how to develop apps that use computer vision to perform an ever expanding list of things including: 3D mapping, photo/image search, people/object tracking, augmented reality etc. This course is intended for students who have taken previous courses in  computer vision, but are keen to explore advanced topics associated with their application to smart and embedded devices",16-623,FALSE,TRUE,FALSE
CMU-16-647-Spring,16-647: Human-Robot Interaction,Carnegie Mellon,Spring 2016,https://www.cs.cmu.edu/~illah/16-467/index.html,"This course is primarily lecture-based, with in-class participatory mini-projects, group homework assignments, a group term project that will enable students to put theory to practice using state-of-the-art interactive robots, and a final. The topics covered will include underlying robotic technologies, as they relate to human-robot interaction, interaction methodologies and techniques, study design, man-machine coupling, ethics and the singularity, and will include discussions of application domains that feature HRI.",16-647,FALSE,TRUE,FALSE
CMU-16-741-Fall,16-741: Mechanics of Manipulation,Carnegie Mellon,Fall 2019,https://www.cs.cmu.edu/afs/cs/academic/class/16741-s07/www/index.html,"To understand the mechanical processes governing manipulation, with a focus on the interaction of hand with environment. The class focuses on models founded on classical mechanics: kinematics, statics, and dynamics of interacting rigid bodies. We will develop techniques for rigid body mechanics, kinematic constraint, Coulomb friction, gravity, and impact, and apply these techniques to manipulation problems including picking and placing, parts orienting, assembly, and mobile manipulation.",16-741,FALSE,TRUE,TRUE
CMU-16-883-Fall,16-883:L Provably Safe Robotics,Carnegie Mellon,Fall 2019,https://www.cs.cmu.edu/~cliu6/provably-safe-robotics.html,"Safe autonomy has become increasingly critical in many application domains. It is important to ensure not only the safety of the ego robot, but also the safety of other agents (humans or robots) that directly interact with the autonomy.",16-883,FALSE,TRUE,FALSE
CMU-16-848-Spring,16-848: Hands: Design and Control for Dexterous Manipulation,Carnegie Mellon,Spring 2018,http://graphics.cs.cmu.edu/nsp/course/16899-s18/,"In this course, we will survey robotic hands and learn about the human hand with the goal of pushing the frontiers on hand design and control for dexterous manipulation. We will consider the necessary kinematics and dynamics for dexterity, what sensors are required to carry out dexterous interactions, the importance of reflexes and compliance, and the challenge of uncertainty. We will examine the human hand: its structure, sensing capabilities, human grasp choice and control strategies for inspiration and benchmarking. Students will be asked to present one or two research papers, participate in discussions and short research or design exercises, and carry out a final project.",16-848,FALSE,TRUE,TRUE
CMU-16-824-Spring,16-824: Visual  Learning and Recognition,Carnegie Mellon,Spring 2017,http://graphics.cs.cmu.edu/courses/16-824/2017_spring/index.html,"A graduate course in Computer Vision with emphasis on representation and reasoning for large amounts of data (images, videos and associated tags, text, gps-locations etc) toward the ultimate goal of Image Understanding. We will be reading an eclectic mix of classic and recent papers on topics including: Theories of Perception, Mid-level Vision (Grouping, Segmentation, Poselets), Object and Scene Recognition, 3D Scene Understanding, Action Recognition, Contextual Reasoning, Image Parsing, Joint Language and Vision Models, etc. We will be covering a wide range of supervised, semi-supervised and unsupervised approaches for each of the topics above.",16-824,FALSE,TRUE,FALSE
CMU-16-823-Spring,16-823: Physics-based Methods in Vision,Carnegie Mellon,Spring 2011,https://www.cs.cmu.edu/afs/cs/academic/class/16823-f06/,"Everyday we observe an extraordinary array of light and color phenomena around us, ranging from the dazzling effects of the atmosphere, the complex appearances of surfaces and materials and underwater scenarios. For a long time, artists, scientists and photographers have been fascinated by these effects, and have focused their attention on capturing and understanding these phenomena. In this course, we take a computational approach to modeling and analyzing these phenomena, which we collectively call as ""visual appearance"". The first half of the course focuses on the physical fundamentals of visual appearance, while the second half of the course focuses on algorithms and applications in a variety of fields such as computer vision, graphics and remote sensing and technologies such as underwater and aerial imaging. This course unifies concepts usually learnt in physical sciences and their application in imaging sciences. The course will also include a photography competition in addition to analytical and practical assignments.",16-823,FALSE,TRUE,FALSE
UToronto-CSC2412-Fall,CSC2412: Algorithms for Private Data Analsys,UToronto,Fall 2019,http://www.cs.toronto.edu/~anikolov/CSC2412F19/CSC2412.html,"In this course we will study privacy in data analysis from a rigorous theoretical perspective. We will focus on Differential Privacy: a recent approach to achieving strong provable privacy guarantees in the analysis of sensitive data. Informally, a data analysis algorithm is differentially private if changing the data of a single individual changes the output distribution of the algorithm only slightly. This guarantee ensures that the privacy risk to any individual increases only slightly by participating in data collection. Our focus will be on the design of efficient differentially private algorithms. In the process, we will learn about fascinating connections between differential privacy and machine learning, geometry, and game theory.",CSC2412,FALSE,TRUE,FALSE
UTexas-CS302-Spring,CS 302: Computer Fluency,UTexas,Spring 2014,https://www.cs.utexas.edu/~ear/cs302/,Computers touch everything we do today.  In this class we’ll look at computer systems from the ground up.  We’ll see how they work and what we can all do to exploit them more effectively.,CS302,FALSE,TRUE,TRUE
UTexas-CS349-Fall,CS 349: Contemporary Issues in Computer Science,UTexas,Fall 2016,https://www.cs.utexas.edu/users/ear/cs349/,"In this class, we’ll cover a collection of issues that: matter to computer scientists, and/or matter to our society and that computer scientists have some significant impact on.",CS349,FALSE,TRUE,TRUE
UTexas-CS303E-Fall,CS 303E: Elements of Computers and Programming,UTexas,Fall 2017,https://www.cs.utexas.edu/~mitra/csFall2017/cs303/cs303.html,"Computing is an integral part of all natural sciences and engineering disciplines. All other disciplines require some familiarity with computers. This course is designed to teach the fundamentals of computing and programming to students who wish to minor in Computer Science. In this course we will cover basic computer architecture and software components. We will learn to program in a high level language (Python). We will learn problem solving techniques for numerical and scientific problems. We will study the syntax and special features of Python, develop our own algorithms, and translate them to computer code. No prior programming experience is required but familiarity with personal computers will help significantly.",CS303E,FALSE,TRUE,TRUE
UTexas-CS104C-Spring,CS 104C: Competitive Programming,UTexas,Spring 2021,https://www.cs.utexas.edu/users/downing/cs104c/Schedule.html,"Explores the algorithms needed to solve a given problem, reason about corner cases, and write correct implementations under time pressure. Focuses on skills useful for international programming competitions, whiteboard job interviews, and programming tasks that require quickly solving challenging problems with creative use of algorithms.",CS104C,FALSE,TRUE,TRUE
UTexas-CS311-Spring,CS 311: Discrete Math for Computer Science,UTexas,Spring 2015,https://www.cs.utexas.edu/~vl/teaching/311/,"This course will introduce you to methods of reasoning used in computer science. Main topics: logical notation and proof methods; induction and recursion; sets, functions, and relations; the growth of functions; annotated programs and loop invariants.",CS311,FALSE,TRUE,TRUE
UTexas-CS313E-Spring,CS 313E: Elements of Software Design,UTexas,Spring 2021,https://www.cs.utexas.edu/users/mitra/csSpring2021/cs313/cs313.html,"Object-oriented design of software using Python, a modern high-level language. Introduction to abstract data types, fundamental algorithms, and basics of complexity analysis.",CS313E,FALSE,TRUE,TRUE
